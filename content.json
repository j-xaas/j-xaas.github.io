{"pages":[],"posts":[{"title":"About This Blog","text":"著者について 初めまして。本ページをご覧頂き有難うございます。都内の大手IT企業で、先端技術検証や新規サービスの実証～事業化を担当している若手社員です。主にSaaS/Serverless/MultiCloud/IoT/DevOps関連のPoC(Proof of Concept)に携わっています。 学生時代は早稲田大学の創造理工学部で3Dプリンターの研究をしていました。コンピューターサイエンスの基礎を学ばないまま、モダンな技術を扱うことになったので、日々悪戦苦闘しています。 ざっくりスキルマップ 主にプロマネやアーキテクチャ設計を担当しているAWS Solution Architectです 最近はフロントエンドエンジニアっぽいこともやってます 本サイトの目的 新人/初級者のサポート 自身の復習用のメモ アメリカ国立訓練研究所で提唱されているLearning Pyramidによれば、学習定着率を高める最善手は “Teach Others” です。そのため、本サイトをOutputの場として、個人的なTipsやハマった事の解決策をまとめていこうと考えております。内容としては、チームの立ち上げ段階で初級者が躓きがちな基礎レベルの解説から順に書いていく予定です。最近人に教える機会が増えてキリがないので、先回りしてWEBにまとめておくことにしました。マッチする記事があれば、新人教育やPJのスタートダッシュにお使いください。 IT業界では、ベテランの優秀層に囲まれるとスキルのギャップで苦しむシーンが多いと思います。私も初期配属された頃、9ヵ月間毎月資格を取り続けた事がありましたが、とても太刀打ちできませんでした。特にモダンな技術の文献は一定の暗黙知を有するものが多く、初級者に優しくありません。本サイトでは、専門用語を避けて初級者に合わせた表現をするよう心がけております。公開した記事が当時の私と同じように困っている方の助けになれば嬉しいです。 その他のテーマSmart HomeIoT案件に関わった影響で始めたSmart Homeの構築手法について載せていく予定です。現在は以下のような構成を作っています。 ↓ 辺りを実現するだけでもだいぶQOLが向上するのでお勧めです。DIY感覚で時短の為にやってます。 Smart Matで消耗品の発注を自動化 Smartリモコンで赤外線リモコンの機能を集約 DTM/Music Tech 以下について纏めていく予定です。初級者なのでアドバイスをもらえると嬉しいです。 DTM環境の構築手法 リモートセッション Music Tech (AI作曲ツールなど) 個人的に開発したいサービス案が沢山あるので、手伝ってくれる方を募集しています。Mail: junjunjunya108@gmail.com","link":"/2020/02/04/About-This-Blog/"},{"title":"Angular8:”global is not defined”の回避策","text":"概要 Angular8で以下のエラーにハマった際の解消法を解説します 1”global is not defined” 上記のエラーについて Angularでグローバルオブジェクトを参照する外部ライブラリを利用している環境で発生する事象 今回はAngularとAWS間のAPI連携機能を実装した際に発生 環境の詳細 12345678910111213141516171819202122232425Angular CLI: 8.3.24Node: 10.16.3OS: win32 x64Angular: 8.2.14... animations, common, compiler, compiler-cli, core, forms... language-service, platform-browser, platform-browser-dynamic... routerPackage Version-----------------------------------------------------------@angular-devkit/architect 0.803.24@angular-devkit/build-angular 0.803.24@angular-devkit/build-optimizer 0.803.24@angular-devkit/build-webpack 0.803.24@angular-devkit/core 8.3.24@angular-devkit/schematics 8.3.24@angular/cdk 8.2.3@angular/cli 8.3.24@angular/material 8.2.3@ngtools/webpack 8.3.24@schematics/angular 8.3.24@schematics/update 0.803.24rxjs 6.4.0typescript 3.5.3webpack 4.39.2 解決策 pollyfills.tsに設定が必要 所在 “pj-name”\\srcの配下 以下を追記すると解決します// &quot;global is not defined&quot;の対応 (window as any).global = window; 解説 polyfillとは JavaScriptのversion間の互換性を補うもの 利用したい機能に未対応のブラウザでも使えるように、同等の機能をJavaScriptで供給できる pollyfills.ts Angularにおけるpolyfillの設定ファイル 例えば、Angularで開発したAPをIEでも動かしたい時には設定が必要 Angularは”デフォルトではIEに未対応”です","link":"/2020/03/09/Angular8-global-is-not-defined%E3%81%AE%E8%A7%A3%E6%B6%88%E6%B3%95/"},{"title":"Angular x AWS SDK for JavaScriptの始め方","text":"angularで開発していたアプリケーションにaws-sdkを導入する際の備忘録 AWS SDKを入れることで、アプリケーションからAWSのリソースを操作可能になります ex.) S3やDynamoDBへのデータの格納、Cognitoによる認証、Lambdaの実行… Angularの場合、公式の開発者ガイド通りにやると鬼のようにエラーが出るので共有しておきます。ひと手間必要でした。 1. aws sdk for javascriptのinstall angular PJ直下で実行1npm install aws-sdk --save-dev この時点でAPを確認すると、以下のエラーが大量に出ます APの画面もブラウザに表示されなくなります 123&gt;ng serve --openERROR in node_modules/aws-sdk/clients/acm.d.ts:141:37 - error TS2591: Cannot find name 'Buffer'. Do you need to install type definitions for node? Try `npm i @types/node` and then add `node` to the types field in your tsconfig. 2. @types/nodeをinstallする Angular PJ直下で以下を実行12345npm install --save @types/node+ @types/node@8.9.5updated 1 package and audited 19123 packages in 41.418sfound 0 vulnerabilities 3. tsconfig.json ファイルに以下を追記 Angular PJ直下にあります 123&quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;node&quot;]} 場所は以下 1&gt; code .\\tsconfig.json tsconfig.app.json にも、同じく追記 Angular PJ直下にあります123&quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;node&quot;] } エラーの解消を確認 ng serve時に正しくAPの画面が表示される ここまででAngular APからAWSのリソースとAPI連携する下準備が整いました 以下についても後日UP予定です AWSの各リソースの利用方法、実装方法 Ampliyfy(BaaS)でAWSと連携させる手法","link":"/2020/02/28/Angular-x-AWS-SDK-for-JavaScript%E3%81%AE%E5%A7%8B%E3%82%81%E6%96%B9/"},{"title":"Angularアプリの開発支援ツールAugury(Chrome拡張機能)","text":"今回はAngularでWEBアプリを開発する際に簡単に利用できるツールを紹介します Auguryと は？ できること 導入方法 利用方法 備考 Auguryと は？ Angularの開発支援ツール Google Chromeの拡張機能 Chromeをメインブラウザとして利用しているデベロッパーには必須とも言えるツール できること 標準のデベロッパーツールに以下の機能を追加できます Componentの階層構造やプロパティ値の図示 ルーティング情報のグラフ化 import済みモジュール構成のリスト表示 導入方法 Chrome Webstoreにアクセス “Chromeに追加”をClick ブラウザの右上にAuguryの丸いアイコンが追加されます 利用方法 Angular APの起動 まずは以下のコマンドでAPの画面をChromeに表示しましょう1ng serve --open F12キーで開発者ツールを起動 ブラウザの右側に表示される開発者ツールに追加されているAuguryタブを選択 “Component Tree”タブのInjection Graph コンポーネントとサービスの依存関係をグラフ表示 個人的に一番利用する機能です “Router Tree”タブ ルート構造をツリー表示 “NgModule”タブ import済みのモジュール構成を確認可能 備考 以下も便利そうでした。APの構成管理やドキュメント作成の手間は極力自動化していきましょう。 compodocでAngularプロジェクトのビジュアルなドキュメントを自動生成する","link":"/2020/02/20/Angular%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E9%96%8B%E7%99%BA%E6%94%AF%E6%8F%B4%E3%83%84%E3%83%BC%E3%83%ABAugury-Chrome%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD/"},{"title":"Github.comからGithubEnterpriseへの移行手順","text":"概要 リポジトリ移行(Github⇒GHE)の備忘録です 想定する状況 Organizationごと中身をまるまる移行したいパターン Commitログ等は特に移行する必要無く、シンプルな手法で手早く終わらせたい 事前調査 organization単位の以降はできない リポジトリ単位の移行は可能 GHE内に同じ名称のOrganizationやリポジトリを作成可能 ★一意性のチェックがGithub側とは隔絶されている 手順1. GHEでOrganizationを作成 Githubと同様の名称で問題無し URLは前半が企業ごとのものに変わる SiteAdmin権限が必要 GUIで操作 2. GHEでリポジトリを作成 Github.com側と同様の名称で問題無し 空のリポジトリを一通り作成 GUIで操作 3. Local端末で移行対象のリポジトリのデータを退避 各リポジトリの中身をデスクトップ等へコピー Gitリポジトリの管理場所:Dドライブから削除 この後、GHEから同様の名称のリポジトリをCloneするため Dドライブでlsコマンドを打って削除されたことを確認 4. GHEからLocalへClone 各リポジトリ（空）を端末へClone URLはリポジトリのページの”Clone or download”タブより確認1git clone &lt;リポジトリのURL&gt; 5. Cloneした空リポジトリに退避データをコピー GHEからCloneした空リポジトリへ、退避場所からコピー 6. GHEのRemoteにデータを登録 各リポジトリで以下の作業を実施する 変更内容を保存12git add *git commit &quot;Repository Migration&quot; Remoteへ送信1git push Github Pagesが含まれている場合 _config.ymlに設定する公開URLを変更する必要がある GHEにおけるGithub PagesのURLは以下のようになる1https://pages.&lt;gheのURL&gt;/&lt;Organization名 or ユーザ名&gt;/&lt;リポジトリ名&gt;.io 7. GHEで確認 GHEの問題無くデータが移行できていることを確認 Github pagesが含まれていたため、ブラウザで表示されるようにする リポジトリのSettingsより、以下のようにGithub pagesを有効にしてSave GHEにおけるGithub PagesのURLは以下1https://pages.&lt;gheのURL&gt;/&lt;Organization名 or ユーザ名&gt;/&lt;リポジトリ名&gt;.io 8. Github.comより移行元を削除 リポジトリを削除 Organizationを削除 管理者権限が必要","link":"/2020/02/09/Github%E3%81%8B%E3%82%89GithubEnterprise%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C%E6%89%8B%E9%A0%86/"},{"title":"cloud9による共同編集・リモート開発","text":"こんにちは。最近ウィルス対策の影響でテレワークの利用が広がっているようです。IT界隈の方達は慣れているとは思いますが、「トラシューやコードレビュー、ペアプロ等は対面でないと困る」という声をちらほら聞きます。新入社員が先輩に横で教えてもらうためにわざわざ出社するケースもあるようです。そこで、今回は開発の遠隔・同時編集を可能にするTipsを紹介します。利用するのはAWSのブラウザ型IDEであるcloud9のワークスペース共有機能です。 前提知識 cloud9のワークスペース共有機能 画像の様に複数メンバでエディタ＆CLIを同時に遠隔操作できます 右側のタブに参加メンバが表示されます 初期設定だけ完了すれば、ブラウザでURLを共有してログインしてもらうだけです テレワーク時に「ちょっとここが分からないので、アドバイスを頂けますか？」と開発環境に入ってもらうと助けてもらいやすいです 直接コードやコマンドを書き込んでもらうこともできます Slack等のチャットだけでコードの話をするのは実際辛いです 開発チームを監督する側も状況を理解しやすく、皆が幸せになれます 対抗：VSCode LiveShare Microsoftのエディターでもプラグインによって似たようなことができます 個人的な使用感としては以下の差異があります 自分のLocal環境を共有 APを起動すると恐ろしく重くなり、落ちてしまうことも… 各メンバ全員がプラグインを設定する必要があり、手間取る ホスト側が参加メンバ毎に権限付与する工程が毎回ある VSCodeの豊富なプラグインが必要なケースもあるので、私は場合によって使い分けています。個人の好みにもよると思います。 前提条件 AWSアカウントを作成済み or 作成可能 cloud9 開発環境を作成済み 公式ドキュメントを参考にしてください AWS Cloud9 で 環境 を作成する 読者は以下を想定 開発環境のオーナー IAMユーザの作成権限を持つ cloud9環境共有手順 以下の二点が必要です AWSのIAM Userの作成 Cloud9への参加メンバの登録 右上の”Share”を押下 共有機能の設定画面が出ます Cloud9への参加メンバの登録 共有機能の設定画面の”Invite Members”にIAM User名を入力 タブで権限を設定 R: Readのみ RW: Read &amp; Write まだ未作成の場合は”create a new user”よりAWS Consoleに飛びましょう IAMユーザの追加 ★cloud9で共同編集したいだけのメンバ向けの権限についてです。最小権限の原則に従いましょう アクセス許可の設定の”既存のポリシーを直接アタッチ”を選択 検索欄に”cloud9”と打つ AWSCloud9EnvironmentMemberを選択・付与 まとめ 以上で複数メンバでの共同編集ができます。テレワークにおける情報伝達のもどかしさを解消して気持ちよく開発しましょう。ハンズオン研修・学習用途にも便利だと思います。 関連記事 cloud9 x Angular x FirebaseでWEB AP開発 画像ファイルD:\\Users\\0000011349117\\Desktop\\memo_article\\cloud9member 補足：Angular開発環境の構築手順(cloud9) 以下を実行するだけでOKです12npm install @angular/.....ng add @angular/material 自動で入るとは思いますが、もし利用中にCDKがないというエラーが出たら以下も実行してください1$ ng add @angular/CDK","link":"/2020/03/07/cloud9%E3%81%AB%E3%82%88%E3%82%8B%E5%85%B1%E5%90%8C%E7%B7%A8%E9%9B%86%E3%83%BB%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E9%96%8B%E7%99%BA/"},{"title":"Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録","text":"概要 想定読者 基礎知識 手順 1. Pluginの導入 2. _config.ymlにPluginの設定を追加 3. sitemap.xmlの生成 4. 本番環境へデプロイ 5. Google Search Consoleへ登録 概要こんにちは。今回はHexoでサイトマップを自動生成してGoogleに登録するまでの手法を紹介します。本サイトもHexoを用いて自動生成しています。 想定読者 静的サイトジェネレータhexoでWEBページを作成済み Google検索でヒットしない状態 サイトマップ未登録 基礎知識 サイトマップとは サイトにどのようなページがあるのか表す為のもの 以下の二種類があります HTMLサイトマップ XMLサイトマップ 検索エンジンが情報収集する対象となるため、SEO対策において重要 hexoではプラグインを利用することでサイトマップを自動生成できます Google Search Console Serch Consoleの概要 （公式サイトより引用）1Google Search Console は、Google 検索結果でのサイトの掲載順位を監視、管理、改善するのに役立つ Google の無料サービスです。Search Console に登録しなくても Google 検索結果にサイトが表示されるようにすることはできますが、Search Console に登録することで、Google のサイトに対する認識を理解し、改善できるようになります。 生成したサイトマップをこちらに登録することで、Google検索結果に自分のWEBページが出るようになります WEBページを公開したばかりの場合、登録しなければ検索結果に出ないと思われます 手順 Pluginの導入 _config.ymlにPluginの設定を追加 sitemap.xmlの生成 本番環境へデプロイ Google Search Consoleへ登録 1. Pluginの導入 HEXOでサイトマップを生成できるプライグインは二種類あります hexo-generator-sitemap hexo-generator-seo-friendly-sitemap 今回はこちらを採用 インストール HEXOディレクトリ直下で以下を実行1npm install hexo-generator-seo-friendly-sitemap --save 2. _config.ymlにPluginの設定を追加 HEXOの設定ファイルに先ほどのPluginを登録します ファイルはhexoディレクトリ直下にあります _config.ymlに追記する内容 12345## Plugins: https://hexo.io/plugins/sitemap: path: sitemap.xml tag: false category: false 3. sitemap.xmlの生成 いつも通りにhexoコマンドでジェネレートする際に、sitemapが生成されます 1hexo g sitemap.xmlの生成を確認 index.htmlと 通常はpublic配下 開いてみると、以下のように書かれています 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;sitemap.xsl&quot;?&gt;&lt;sitemapindex xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt; &lt;sitemap&gt; &lt;loc&gt;https://j-xaas.github.io/post-sitemap.xml&lt;/loc&gt; &lt;lastmod&gt;2020-03-10T13:04:39.446Z&lt;/lastmod&gt; &lt;/sitemap&gt;&lt;/sitemapindex&gt;&lt;!-- XML Sitemap generated by Hexo SEO Friendly Sitemap Generator --&gt; 4. 本番環境へデプロイ WEBページをホスティングしている、サーバ等へsitemap.xmlファイルをおきましょう github pagesを用いている場合は、Gitへpushします 5. Google Search Consoleへ登録 公式サイトへアクセス 未登録であれば、自分のWEBサイトのURLを登録しましょう サイドメニュー内、インデックスのサイトマップを選択 新しいサイトマップの追加 入力欄に”sitemap.xml”を入力 送信 しばらく待って更新すると、以下のようにステータスが”成功しました”と表示されます 以上でサイトマップの登録は完了です hexo g の度に更新されるので、事後作業は特にありません","link":"/2020/03/10/Hexo%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%88%E3%83%9E%E3%83%83%E3%83%97%E3%82%92%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90-Google-Search-Console%E3%81%B8%E7%99%BB%E9%8C%B2/"},{"title":"Cloud9 x Angular x FirebaseでAP開発（導入編）","text":"こんにちは。今回は上記の３つを組み合わせてWEB AP開発を行う際の手順を解説します。それぞれの使用経験があっても細かい所で沢山ハマったのでまとめておきました。初級者がこの記事だけで目標を達成できるように書いたつもりです。 各技術についての基礎知識簡単にポイントだけを解説します。分かっている方は飛ばしてください手順を細かく書いているので分からない言葉があっても、一先ず触りなから理解していきましょう cloud9 AWSのブラウザ型IDE 自端末のOSに依存せず開発可能 iPadでも開発可能（よく使ってます） 社内プロキシ問題に悩まされない 個人的には最重要ポイント 環境構築を省略可能 node_module, Git, AWS CLI等の便利なものが元から入っている 複数ユーザーで同時編集可能 リモートワークやレビューに便利です 対抗のGoogle Cloud Shellとの差分 後に同様の機能が付きそうではあります Angular Googleが出しているWEB APのフレームワーク 言語はHTML, TypeScript, scss SPA (Single Page Application)を開発可能 APの画面はAngular Materialでほぼ自動構築可能 静的WEBサイトホスティングサービスを用いれば、サーバレスを実現可能 代表例としてFirebase HostingやAmazon S3等が挙げられます Firebase GoogleのBaaS(Backend as a Service) 認証機能やデータベースなどのバックエンドの機能を提供してくれるサービス 開発工数を大幅削減可能 本質的な機能の開発に集中可能 APのHostingや顧客分析、収益管理まで可能 この３つを抑えれば開発環境の用意からAPの公開まで高速でできます。つまり、良いアイデアさえあれば、一人でもビジネスを始められます。 前提条件 cloud9環境を作成済み 指示に従って設定していくだけなので参考サイトを載せておきます 初めてのAWS Cloud9導入 Googleアカウントを作成済み Googelアカウントの作成 手順1. Angular開発環境の準備 Angularが動くために必要なもの node_module Angular CLI cloud9には初めからnode_moduleが入っている為、Angular CLIを入れるだけでOKです。（Windowsにnode_moduleを入れようとすると、それだけでだいぶ工数をロスします） 1.1. Angular CLIのinstall 1npm install -g @angular cli 確認 以下のようにngコマンドを使えるようになればOKです ngはangularの略です1234567891011121314ng --version _ _ ____ _ ___ / \\ _ __ __ _ _ _| | __ _ _ __ / ___| | |_ _| / △ \\ | '_ \\ / _` | | | | |/ _` | '__| | | | | | | / ___ \\| | | | (_| | |_| | | (_| | | | |___| |___ | | /_/ \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_| \\____|_____|___| |___/ Angular CLI: 8.3.20Node: 10.16.2OS: linux x64Angular: 8.2.14 ０から開発する場合 以下のコマンドでAngular PJ(AngularにおけるAPの単位)を作成しましょう1ng new &lt;AP名&gt; 今回は以下の名称で作成1$ ng new &quot;firebase-sample&quot; Gitから開発途中のソースを持ってきた場合 APのディレクトリ直下にもnode_moduleを入れなければ動かないので注意です1npm install 2. firebase projectの作成 初めは基本的にWEBのFirebaseコンソールで操作していきます Googleアカウントを作成していればすぐに始められます 2.1. 公式ページから右上の”コンソールへ移動”を押下 2.2. projectを追加（APの単位です） 2.3. Project名を設定 2.4. Googleアナリティクス(Firebaseプロジェクト向け) 特別な理由が無ければ有効のままでOK 2.6. 以下が表示されたら完成 続行を押すとPJの画面に飛びます 2.7. Firebase Project画面 以下が表示されればOK 基本的にこの画面で設定を行います 3. アプリの登録 次にFirebase Projectにアプリを登録します Firebase PJには複数のアプリを登録可能です 例えばWEB版、ios版といった形で複数をAP間で認証機能やデータベースを共有するイメージです 3.1. アプリを登録 ios/android/webからwebのアイコンを選択 3.2. アプリの追加 以下のように入力 アプリを登録 3.3. Firebase SDK の追加 以下のようにスクリプトが表示されます Angularの場合はindex.htmlのbody配下に置きます SPAなので、単一ページであるindex.htmlがJSで書き換わっていくのがAngularの特徴です1234567891011121314 &lt;body&gt; &lt;app-root&gt;&lt;/app-root&gt;&lt;!----firebaseSDKの追加--&gt; &lt;!-- The core Firebase JS SDK is always required and must be listed first --&gt; &lt;script src=&quot;/__/firebase/7.8.2/firebase-app.js&quot;&gt;&lt;/script&gt; &lt;!-- TODO: Add SDKs for Firebase products that you want to use https://firebase.google.com/docs/web/setup#available-libraries --&gt; &lt;script src=&quot;/__/firebase/7.8.2/firebase-analytics.js&quot;&gt;&lt;/script&gt; &lt;!-- Initialize Firebase --&gt; &lt;script src=&quot;/__/firebase/init.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 4. firebaseとAPの関連付け(Angular Fireの導入) Angular APとfirebaseを関連付けるまでに必要な作業の一覧は以下になります Firebase CLIのinstall 環境単位で必要な作業 angularfireのinstall AP単位で毎回必要な作業 (firebase側でアプリを追加 2で先に行った内容です) Firebase SDKの追加 FirebaseのAPIキーを取得 Angularの環境設定ファイルにAPIキーを設定 ★二点に設定が必要。よくはまるポイントです 開発環境 src/environments/environment.ts 本番環境(prodは本番という意味) src/environments/environment.prod.ts firebase login/init 環境設定ファイルをapp.module.tsに読み込む @angular/fireからAngularFireModuleを呼び出して、上記のenvironmentオブジェクトを使ってAPIキーをインストール （特定の機能を利用する場合の作業：認証機能を利用する際の例） @angular/fire/authからAngularFireModuleを呼び出して、NgModuleに登録 Firebase Authenticationを利用するために必要な工程 @angular/fireは全機能をinstallすると重くなる為、上記の様に必要なものだけを登録する仕様になっているらしい それぞれ詳しく解説していきます 4.1. Firebase CLIの導入 Firebase CLI 環境に一度入れればOKです 以下を実行することでinstallできます これでfirebase コマンドが有効になります1npm install -g firebase-tools 4.2. angular fireのinstall angularfireを入れます AngularとFirebaseの連携用Libraryです こちらは環境単位ではなくAP単位で入れる必要があります 以下を実行 ※最新版であればng addでもOK1firebase-sample (master) $ npm install @angular/fire firebase --save 出力結果1234+ @angular/fire@5.4.2+ firebase@7.9.3added 140 packages from 98 contributors and audited 19218 packages in 17.919sfound 5 vulnerabilities (3 moderate, 2 high) 4.3. Angular環境設定ファイルにAPIキーを貼り付け 開発環境向けと本番環境向けの２つの設定ファイルの改修が必要。よくはまるポイントです 各値はfirebase consoleより確認 src/environments/environment.ts 開発環境用の設定ファイルに以下の形式で設定します12345678910111213export const environment = { production: false, // Firebaseの設定情報を登録 firebase: { apiKey: '&lt;your-key&gt;', authDomain: '&lt;your-project-authdomain&gt;', databaseURL: '&lt;your-database-URL&gt;', projectId: '&lt;your-project-id&gt;', storageBucket: '&lt;your-storage-bucket&gt;', messagingSenderId: '&lt;your-messaging-sender-id&gt;' } };}; src/environments/environment.prod.ts 本番環境用の設定ファイルも同様です12345678910111213export const environment = { production: false, // Firebaseの設定情報を登録 firebase: { apiKey: '&lt;your-key&gt;', authDomain: '&lt;your-project-authdomain&gt;', databaseURL: '&lt;your-database-URL&gt;', projectId: '&lt;your-project-id&gt;', storageBucket: '&lt;your-storage-bucket&gt;', messagingSenderId: '&lt;your-messaging-sender-id&gt;' } };}; Firebaseの設定情報を確認 FirebaseコンソールのSettingsから確認可能 上記のIDとAPIキーをenvironmentsの該当箇所にコピペ 設定より、IDとAPIキー、送信者IDを確認する - 各設定項目は以下のように一意に定まる 1234567891011export const environment = { production: false, firebase: { apiKey: '&lt;ウェブAPIキー&gt;', authDomain: &quot;&lt;プロジェクトID&gt;.firebaseapp.com&quot;, databaseURL: &quot;https://&lt;プロジェクトID&gt;.firebaseio.com&quot;, projectId: &quot;&lt;プロジェクトID&gt;&quot;, storageBucket: &quot;&lt;プロジェクトID&gt;.appspot.com&quot;, messagingSenderId: &quot;&lt;送信者ID&gt;&quot;, } }; 送信者IDはクラウドメッセージングTabより確認可能 両方のファイルに以下を設定 123456789101112export const environment = { production: false, // ,を忘れないよう注意 // Firebaseの設定情報を登録 firebase: { apiKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX', authDomain: 'fir-sample-3a2dc.firebaseapp.com', databaseURL: 'https://fir-sample-3a2dc.firebaseio.com', projectId: 'fir-sample-3a2dc', storageBucket: 'fir-sample-3a2dc.appspot.com', messagingSenderId: '408620068768' } }; 4.4. CLIとFirebaseの関連付け(firebase login) 次に開発環境(Cloud9)のCLIとfirebaseを関連付けます c9の場合–nolocalhostが必須 ★社内Local環境でloginをやろうとするとFirebase認証がProxyに阻まれて突破できず詰むので気を付けましょう 頑張っても解決できませんでした… 123456789firebase login --no-localhost --reauthi Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google's privacy policy (https://policies.google.com/privacy) and is not used to identify you.? Allow Firebase to collect CLI usage and error reporting information? Yesi To change your data collection preference at any time, run `firebase logout` and log in again.Visit this URL on any device to log in:&lt;認証用のURL&gt; 上記のURLから、ブラウザでGoogleアカウント認証を進めるとコードが表示されます 貼り付けてSuccessと表示されれば成功です123? Paste authorization code here: &lt;Code&gt;✔ Success! Logged in as &lt;googleアカウント名&gt; Cloud9のCLIからFirebase(=Google Cloud)上のリソースにアクセス可能になりました 4.5. APとfirebaseのPJの関連付け(firebase init) Angular PJ直下で実行 1firebase init 以下のように出力されれば成功です 使いたいサービスを選択すると簡単にCloud側と連携できます スペースキーで各サービスを選択できます12345678910111213141516171819 ######## #### ######## ######## ######## ### ###### ######## ## ## ## ## ## ## ## ## ## ## ## ###### ## ######## ###### ######## ######### ###### ###### ## ## ## ## ## ## ## ## ## ## ## ## #### ## ## ######## ######## ## ## ###### ########You're about to initialize a Firebase project in this directory: /home/ec2-user/environment/firebase-sample? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices. (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)❯◯ Database: Deploy Firebase Realtime Database Rules ◯ Firestore: Deploy rules and create indexes for Firestore ◯ Functions: Configure and deploy Cloud Functions ◯ Hosting: Configure and deploy Firebase Hosting sites ◯ Storage: Deploy Cloud Storage security rules ◯ Emulators: Set up local emulators for Firebase features Project Setup Enterを押すと以下が出力されます 今回は事前にプロジェクトを作成しているので”use an exciting project”を選択 1234567891011=== Project SetupFirst, let's associate this project directory with a Firebase project.You can create multiple project aliases by running firebase use --add, but for now we'll just set up a default project.? Please select an option: ❯ Use an existing project Create a new project Add Firebase to an existing Google Cloud Platform project Don't set up a default project 自身のアカウントで作成済みのFirebase Projectが選択肢としてでてきます 事前に作った”fir-sample-3a2dc (firebase-sample)”を選択12? Select a default Firebase project for this directory: (Use arrow keys)❯ fir-sample-3a2dc (firebase-sample) 以降は、先ほど選択したサービスのSetupが順に出てきます。いくつか例として書いておきます Hosting Setup 公開したいディレクトリを尋ねられます Angularであればビルドしたい際の生成物が格納されるを入力しましょう dits/angular-pj-name Hostingについての詳細は以下にまとめています Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) Database Setup ひとまずデフォルトでEnter123456=== Database SetupFirebase Realtime Database Rules allow you to define how your data should bestructured and when your data can be read from and written to.? What file should be used for Database Rules? (database.rules.json) Firestore Set up リソース(firestore)のlocationを設定していないとErrorが出ます firebaseコンソール側で設定する必要があります123=== Firestore SetupError: Cloud resource location is not set for this project but the operation you are attempting to perform in Cloud Firestore requires it. Please see this documentation for more details: https://firebase.google.com/docs/projects/locations 以上で一先ずセットアップは完了です 次にのStepとしてFirebase HostingでAPを公開してみましょう（5分できます） Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) 実際にAuthentication(認証機能)やFirestore(ストレージ)を利用する手順は別記事に記載します 後書きここまでで本格的な実装に入る準備が整いました。Firebaseを使いこなせば、認証機能もデータのCRUD機能も1日で簡単に実装することができます。モダンな手法を使いこなして素早くサービスを開発していきましょう。 最後に、この先の機能実装の際に参考になりそうなページをまとめておきます。 APをFirebase Hostingで公開 Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) CRUD機能を実装 AngularFireでFirestoreのCRUD処理を実装する【Angular + Firebase】 認証機能を実装 Angular8でFirebaseを使ってGoogleアカウント認証機能を実装する おまけ：cloud9でng serveする際の注意 詳細は以下の記事にまとめてあります [Cloud9 x Angular] cloud9でng serveを実行してAPの画面を確認するまで cloud9で必要なこと portの指定(8080) browserのURLの指定 disableHostCheck angular.jsonファイルを書き換えてポートを変更 cloud9の場合はportを8080にする必要がある123456&quot;serve&quot;: { &quot;builder&quot;: &quot;@angular-devkit/build-angular:dev-server&quot;, &quot;options&quot;: { &quot;browserTarget&quot;: &quot;NgTororo:build&quot;, &quot;port&quot;: 8080 //ここを追加 } portの設定後であれば以下でOK1ng serve --disableHostCheck --public-host &lt;cloud9のPreviewのURL&gt;","link":"/2020/03/05/Cloud9-x-Angular-x-Firebase%E3%81%A7AP%E9%96%8B%E7%99%BA%EF%BC%88%E5%B0%8E%E5%85%A5%E7%B7%A8%EF%BC%89/"},{"title":"Hexoテーマ(theme)変更: icarus","text":"概要 変更手順 1. テーマの選定 今回採用したテーマ 2. Githubからダウンロード 3. 設定(_config.yml)を変更 Trouble Shooting icarus設定Tips ウィジェットを変更 プロフィールを変更 背景の変更 目次を自動作成するプラグインの導入 概要 Hexoにはテーマのテンプレートが数百種類用意されており、簡単に変更することができます デフォルトはlandscape シンプルでいいのですが、デザインとして物足りなく、プロフィール欄も欲しいので変更します &lt;div style=&quot;text-align:center;&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/41946222/76521887-038c5300-64a9-11ea-8dfd-8454b8ce0dd2.png&quot; height=&quot;100%&quot; width=&quot;100%&quot;&gt; &lt;/div&gt;変更手順 テーマの選定 Githubからダウンロード 設定(_config.yml)を変更 1. テーマの選定 まずは採用したいテーマを決めましょう Hexoのテーマ一覧は以下より確認できます Themes | Hexo 295種(2020/03/12時点)あります Star数のランキングはこちらです 自身のWEBページの方向性に合わせて選定しましょう 個人的にイケてると感じたテーマを紹介します シンプル icarus プロフィール欄がデフォルトである 各記事がサムネで表示される 手間は少し増えてしまいそう サイドのメニューと記事一覧を、画面サイズに応じて１～３列で表示 NexT プロフィール欄がデフォルトである モノトーン １～２列で表示 Material indigo Tranquilpeak 最近見つけたので追加。そのうちこちらに変更するかも ダイナミック React 会社サイト向け デザインが作りこまれています 別の機会に利用してみようと考えています Ochuunn サイトを開いた時の動作がおしゃれです デザイナー向け MiccallTheme Zhaoo TKL 一枚目から始まるタイプですが記事欄は質素です 今回採用したテーマ icarus GitのStar数ランク5位で人気のテーマです 後はいつも通りgenerateして本番環境へデプロイしましょう1hexo generate Trouble Shooting 本番環境で表示が崩れている場合 前のテーマからgenerateされていたファイルが邪魔をしています（私もハマりました） generateで生成されるファイル群を削除すれば、修正できます cheerioがないというエラーが出た場合 12ERROR Package cheerio is not installed.ERROR Please install the missing dependencies from the root directory of your Hexo site. 以下を実行 Hexoディレクトリ直下で1npm install cheerio --save hexo sを実行できます icarus設定Tips ハマる場面もあったので各種設定についても解説しておきます ウィジェットを変更 icarus/layout/widget内のファイルを改修することで、左右の表示を変更できます プロフィールを変更 icarusのwikiを参考に改修します 上記には書いてありませんでしたが、改修する設定ファイルは以下になります themes\\icarus_cofig.yml 中を確認すると以下のようにprofileの初期設定がされていることが分かります 123456789101112131415161718192021# https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: Your name # Title of the author to be shown in the profile widget author_title: Your title # Author's current location to be shown in the profile widget location: Your location # Path or URL to the avatar to be shown in the profile widget avatar: # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/ppoffice' 変更 profile画像は以下に格納しましょう \\themes\\icarus\\source\\images おしゅし のフリー素材として公開されている画像を用意しました 改修例 123456789101112131415161718widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: J # Title of the author to be shown in the profile widget author_title: IT Specialist # Author's current location to be shown in the profile widget location: Tokyo Japan # Path or URL to the avatar to be shown in the profile widget avatar: images/oshushi.png # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: true Profileの変更結果 &lt;div style=&quot;text-align:center;&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/41946222/76530468-1d349700-64b7-11ea-8cae-6ed0407cc359.png&quot; height=&quot;50%&quot; width=50%&quot;&gt; &lt;/div&gt;背景の変更 以下からできますhttps://github.com/highlightjs/highlight.js/tree/master/src/styles 1234567# Article display settingsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light 目次を自動作成するプラグインの導入 hexo-tocをインストール1$ npm install hexo-toc --save 目次を入れたい箇所に下記を追記すればOK。 1&lt;!-- toc --&gt; オプションとしてthemes/icarus/config.ymlに下記を追加します。 123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: '#' style: header-anchor 実際に記事に入れて見ましょう 123456789101112---title: Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録thumbnails: /gallery/sitemap_thumnail.pngdate: 2020-03-10 23:23:23toc: truetags:- Hexo- Sitemap- google search console---&lt;!-- toc --&gt;## 概要 画面を確認すると以下のように反映されていました。 関連記事 icarus(Hexo Theme) Tips Menuの編集 続いてメニューをカスタマイズしましょう","link":"/2020/03/13/Hexo%E3%83%86%E3%83%BC%E3%83%9E-theme-%E5%A4%89%E6%9B%B4-icarus/"},{"title":"HexoブログのAMP化【完全版】","text":"こんにちは。今回はHexoで生成したWEBページのAMP化の手法について解説します。簡単にいうとWEBページを高速表示可能な形式にします。同様の記事も数件見つけたのですが、所々でハマったので、完全版としてまとめました。 基礎知識 AMP(Accelerated Mobile Pages)とは？ hexo-generator-ampとは 導入手順 1. hexo-generator-ampのinstall 2. headタグにAMP HTMLのパスを指定 3. ./_config.ymlの改修 Trouble Shooting 4. Markdown記法の修正(画像) Trouble Shooting 5. WEB上でのチェック AMPテスト 基礎知識AMP(Accelerated Mobile Pages)とは？ AMP HTML モバイルでのコンテンツ表示を高速化させるための手法 GoogleとTwitterが協同で立ち上げたプロジェクトです ページ読み込みに3秒以上かかる場合、53%のユーザーが離脱してしまうと言われています 検索結果で並んでいるサイトに、稲妻マークが小さくついているものを見つけたことはありませんか？ 実はあのマークはAMPサイトであるサインです AMP化するには規格に則った記法でサイトを構築する必要があります 自力での対応は難しいので、自動生成する手法を今回解説します hexo-generator-ampとは hexo-generator-amp Google AMP (Accelerated Mobile Pages) を自動で生成してくれるプラグイン 各記事のHTMLに対して、AMP HTMLを生成 hexo generate実行時に通常のHTMLとAMP版のHTMLの双方ができます 導入手順1. hexo-generator-ampのinstall Hexoディレクトリ直下で実行1npm install hexo-generator-amp --save 2. headタグにAMP HTMLのパスを指定 head.ejs 自動生成するHTMLのheaderの設定を規定するファイルです ファイルの所在は以下 1\\themes\\theme-name\\layout\\ 私が利用しているテーマ:icarusの場合は一階層深い所にありました1\\themes\\icarus\\layout\\common\\ 以下を追記 123&lt;% if (is_post() &amp;&amp; config.generator_amp){ %&gt; &lt;link rel=&quot;amphtml&quot; href=&quot;&lt;%= config.url %&gt;/&lt;%= page.path %&gt;/amp/index.html&quot;&gt;&lt;% } %&gt; WEBページを作成する中で、度々headerにscriptを追加するシーンがあると思われます 基本的にhead.elsに同様に追記することで目的を達成可能です。覚えておきましょう 3. ./_config.ymlの改修 _config.ymlにPluginの設定を追加します theme配下ではなくHexoディレクトリ直下のファイルです 以下を追記 Gitの公式ページの説明はpathの記法が少し間違っていました1234567891011121314# hexo-generator-ampgenerator_amp: templateDir: amp-template assetDistDir: amp-dist logo: path: sample/sample-logo.png width: 600 height: 60 substituteTitleImage: path: sample/sample-substituteTitleImage.png width: 1024 height: 800 warningLog: false hexo serverで確認 Trouble Shooting 以下のエラーが出た場合 12345678[00:44:36.025] [hexo-generator-amp] hexo-generator-amp's template has been copied tothe your project.Please check the following file.-&gt; j-blog\\amp-template\\sample[00:44:36.040] [hexo-generator-amp] error: Not found the hexo-generator-amp's assetfiles. If you do not have the file please download the sample file from the following site. ( see: https://github.com/tea3/hexo-generator-amp/tree/master/template )Please check the following file.-&gt; j-blog\\amp-template\\sample-logo.png 上記はpathの指定が間違っている sample配下にsample-logo.png等が格納されているため、sample/を頭に付けましょう 4. Markdown記法の修正(画像) hexo server実行時にAMPの書式チェックがプラグインによって実行されます 恐らく以下のErrorが大量に出る人が多いと思われます markdownの画像のURL指定の表記がAMPでは通用しない為です12This plugin can not acquire the width and height of such url images.Please change the URL to HTTP or HTTPS, or add height and width. エラーメッセージについて解説 このプラグインは、URL画像の幅と高さを取得できない URLをHTTPまたはHTTPSに変更するか、高さと幅を追加してください どういうこと？ AMPの規格では画像のheightとwidthを設定する必要があります。 そのため、各記事のURL指定の画像に対してエラーが出ています とりあえず以下のErrorが出ている記事の画像を修正してみます 12345678910-&gt; _posts/About-This-Blog.md[18:39:10.984] [hexo-generator-amp] error: This plugin can not acquire the width and height of such url images.Please change the URL to HTTP or HTTPS, or add height and width. img path: https://user-images.githubusercontent.com/41946222/73755094-dd3c0f00-47a8-11ea-9ec5-e1e537559054.pngPlease check the following file.-&gt; _posts/About-This-Blog.md[18:39:10.985] [hexo-generator-amp] error: Error: connect ETIMEDOUT 151.101.108.133:443This plugin checks whether the image URL exists. img path: https://user-images.githubusercontent.com/41946222/74917091-5030c100-540a-11ea-9060-2d05fc6c6c23.pngPlease check the following file. 現在のmarkdown記法 heightとwidthを定められない1![image_title](image_url) 回避策 以下のようにHTMLの記法で修正123&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;image_url&quot; height=&quot;500px&quot; width=&quot;500px&quot;&gt;&lt;/div&gt; 各記事のURL指定の画像に対して同様の修正を実施します 割と大変なので、記事が少なめの段階で対処した方がいいです 確認 以下を実行1hexo server エラーの解消を確認 起動したAPをブラウザで確認 以下のように記事を開いている状態で、URLの後ろにampを付ければ生成されたAMP HTMLを確認可能です1http://localhost:4000/article_name/amp 各記事で確認しましょう Trouble Shooting AMP画像が表示されない heightとwidthの%指定はダメです pxでかっちり定めなければAMPでは表示されません 5. WEB上でのチェック 本番環境にデプロイ⇒WEBから確認 以下のように各記事のURLに/ampを足すとAMP HTML版のページの表示を確認可能です AMP版と通常版の両方のページをWEBから確認出来るようになっている状態です AMPテスト GoogleのAMPテスト 指定したURLがAMPに対応しているかチェック可能です AMP版のURLを指定してください 以上でHexoで生成したWEBページのAMP化は完了です 各種設定やTipsについては別記事で解説します","link":"/2020/03/15/Hexo%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AEAMP%E5%8C%96/"},{"title":"icarus(Hexo Theme) Tips Menuの編集","text":"こんにちは。今回はHexoのthemeにicarusを採用した際のTipsを解説します。 Aboutページを追加 1. Hexoの通常の記事として生成 2. _config/ymlを改修 Menuを追加 おまけ：ロゴの変更 icarusを適用すると以下のようなメニューがヘッダーに表示されます ポイント Aboutページは自分で作成する必要がある Menuは追加・削除可能 Aboutページを追加1. Hexoの通常の記事として生成 About-This-Blog.mdを生成1ng new 'About-This-Blog' source/_posts内に生成されたファイルを編集 2. _config/ymlを改修 path: your-blog\\themes\\icarus&gt; About: 移行を生成した記事のパスに変更 Hexoの記事のパスは “/YYYY/MM/DD/Article_name” です 123456789# Navigation bar link settingsnavbar: # Navigation bar menu links menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /2020/02/04/About-This-Blog/ # /aboutから変更 Menuを追加 メニューの追加も同様の箇所を改修するだけで簡単にできます 以下を追加します ポリシーページ 自身のECサイトへのリンク 作業は二点です menuの項目を増やす pathを指定する 外部サイトはURLそのままでOKです _config.yml 1234567891011# Navigation bar link settingsnavbar: # Navigation bar menu links menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /2020/02/04/About-This-Blog/ #/about Policy: /2020/03/17/Policy EC: https://sheeps.official.ec/ 確認 1hexo server 以下のように反映されます 外部サイトに飛べるか確認 メニューの”EC”を押下 以下のように画面が切り替わりました 私が書いたマスコットキャラ：シープ君のグッズ一覧が出てきます icarusは柔軟にメニューを弄れるのでカスタマイズ性が高いですね 自身のWEBページに合わせて自由に編集してみてください 個人で勉強ついでに開発しているWEB APが増えたら一覧ページをメニューに足そうと思います おまけ：ロゴの変更 オリジナルのロゴ 所在：\\themes\\icarus\\source\\images logo.svg オリジナルのロゴを作成して同様のディレクトリに格納 original_logo.pngを作成して配置 _config.ymlを編集 icarus側の設定ファイルを改修 themes\\icarus_config.yml 旧1234favicon: /images/favicon.svg# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.svg 新 faviconをコメントアウトしないと上に被さって上手く表示できません1234#favicon: /images/favicon.svg# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/original_logo.png これだけです 画面への反映を確認1hexo server pngをSVGファイルに変換しておくと見栄えも読み込みも良くなります ↓でぱっと変換できます PNG SVG 変換 - 画像ファイルをオンラインで変換する","link":"/2020/03/17/icarus-Hexo-Theme-Tips-Menu%E3%81%AE%E7%B7%A8%E9%9B%86/"},{"title":"Angularで階層構造の表を開発(Treetable)","text":"こんにちは。今回は表題の内容を解説します。Angular MaterialのMat-tableとMat-treeを組み合わせれば実現可能ですが、初級者には難しく、コードが複雑になります。そこで、簡単に階層型の表を生成可能なOSS:Treetableを利用します。 Treetableの導入手順 1. install 2. app.module.tsでModuleをimport 3. Component側で使用 3.1. HTML 3.2. TS 4. Optionを設定 Eventの設定 サンプルソースの解説 自分でサンプルを開発した際のメモ サンプルデータで表を出す Treetableの導入手順1. install 以下を実行 1npm i ng-material-treetable --save Angular Materialパッケージがinstallされていることを確認 既に入れていればスルー1npm i @angular/material @angular/cdk @angular/animations --save 2. app.module.tsでModuleをimport src/app/app.module.tsを改修 TreetableModuleをimport1234567891011import { TreetableModule } from 'ng-material-treetable'; @NgModule({ ... imports: [ ... TreetableModule ], ...})export class AppModule { } 3. Component側で使用3.1. HTML sample.component.htmlを改修 treetable要素を加えるだけでOKです1&lt;treetable [tree]=&quot;yourTreeDataStructure&quot;&gt;&lt;/treetable&gt; 3.2. TS sample.component.ts データソースとinterface（データの型）を規定します GET等で外部APIからデータを持ってくる場合は、べた書きしているデータ部分を返り値に差し替えてください データ構造は自由です。無くてもOK 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import { Component, OnInit } from '@angular/core';// 追加import { Node, Options } from 'ng-material-treetable';@Component({ selector: 'app-tree-table', templateUrl: './tree-table.component.html', styleUrls: ['./tree-table.component.scss']})export class TreeTableComponent implements OnInit { // データソースを定義 // 省略部分はJSONデータ 表２のデータソース class内の先頭に必要であった arrayOfNodesTree: Node&lt;Task&gt;[] = [ { value: { name: 'Tasks for Sprint 1', completed: true, owner: 'Marco' }, children: [ { value: { name: 'Complete feature #123', completed: true, owner: 'Marco' }, children: [] }, { value: { name: 'Update documentation', completed: true, owner: 'Jane' }, children: [ { value: { name: 'Proofread documentation', completed: true, owner: 'Bob' }, children: [] } ] } ] }, { value: { name: 'Tasks for Sprint 2', completed: false, owner: 'Erika', }, children: [ { value: { name: 'Fix bug #567', completed: false, owner: 'Marco' }, children: [] }, { value: { name: 'Speak with clients', completed: true, owner: 'James' }, children: [] } ] } ]; constructor() { } ngOnInit() { }}// 表のデータ構造の定義export interface Task { name: string; completed: boolean; owner: string;} 4. Optionを設定 sample.component.tsの改修12// 追加の必要有import { Node, Options } from 'ng-material-treetable'; sample.component.htmlの改修 [options]による指定で適用できます1234&lt;treetable [tree]=&quot;yourTreeDataStructure&quot; [options]=&quot;yourOptions&quot;&gt;&lt;/treetable&gt; Eventの設定 sample.component.html12345&lt;treetable [tree]=&quot;yourTreeDataStructure&quot; (nodeClicked)=&quot;logToggledNode($event)&quot;&gt; &lt;!--Clickで開閉--&gt;&lt;/treetable&gt; sample.component.ts nodeClickedで動くメソッドを定義123logToggledNode(node: Node&lt;SomeNodeType&gt;): void { console.log(node);} 以上で階層型の表が完成しました。後は、データソースを直接編集するか、外部から取得したデータに差し替えるだけです。手順の解説は以上です。WEB AP開発の初級者は台帳APでも試しに作ってみると良いかもしれません。(Excelはやめましょう)おまけとして、StackBlitzに挙がっていたサンプルソースの解説も置いておきます。 サンプルソースの解説 StackBlitz 以下の書き方で今回の要件は満たせそう1arrayOfNodesTree: Node&lt;Task&gt;[] = 外部からGETしてきたデータ app.component.ts 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import { Component } from '@angular/core';// 追加の必要有import { Node, Options } from 'ng-material-treetable';@Component({ selector: 'my-app', templateUrl: './app.component.html', styleUrls: ['./app.component.css']})export class AppComponent { // 表１のOption treeOptions: Options&lt;Report&gt; = { capitalisedHeader: true, customColumnOrder: [// 列名を定義？ 'owner', 'name', 'backup', 'protected' ] };// 省略部分はJSONデータ 表１のデータソース singleRootTree: Node&lt;Report&gt; = { value: { name: 'Reports', owner: 'Eric', protected: true, backup: true }, children: [ { 中略 } ] };// 省略部分はJSONデータ 表２のデータソース arrayOfNodesTree: Node&lt;Task&gt;[] = [ {中略 } ] logNode(node: Node&lt;Report&gt;) { console.log(node); }}// 表のデータ型 列の要素を定義// 表1export interface Report { name: string; owner: string; protected: boolean; backup: boolean;}// 表２export interface Task { name: string; completed: boolean; owner: string;} 次にHTML側を確認 かなりシンプルに書ける treetable要素の中にデータソースとして定義したものを指定するだけ12345&lt;treetable [tree]=&quot;TS側で定めたデータソース名&quot; (nodeClicked)=&quot;logNode($event)&quot;&gt; // Clickで開閉&gt;&lt;/treetable&gt; 1234567891011121314// 表１&lt;h2&gt;Tree as Single Root Node&lt;/h2&gt;&lt;treetable [tree]=&quot;singleRootTree&quot; [options]=&quot;treeOptions&quot; (nodeClicked)=&quot;logNode($event)&quot;&gt;&lt;/treetable&gt;// 表２&lt;h2&gt;Tree as Array of Nodes&lt;/h2&gt;&lt;treetable [tree]=&quot;arrayOfNodesTree&quot; // tsでデータソースを定めたやつ (nodeClicked)=&quot;logNode($event)&quot;&gt; &lt;/treetable&gt; 自分でサンプルを開発した際のメモ tree-table Componentを新たに生成 1\\src\\app&gt; ng g component tree-table 上の階層のComponentでtree-tableを参照するように変更 serveで画面への反映を確認。問題無し123456789&lt;/mat-card-header&gt;&lt;mat-card-content&gt; &lt;div&gt; &lt;app-tree-table&gt;&lt;/app-tree-table&gt; &lt;!--tree tableコンポーネントを挿入----&gt; &lt;/div&gt;&lt;/mat-card-content&gt; サンプルデータで表を出す tree-tableコンポーネントを改修 HTMLの改修 1234&lt;treetable [tree]=&quot;arrayOfNodesTree&quot; (nodeClicked)=&quot;logNode($event)&quot;&gt;&lt;/treetable&gt; tsの改修 import, データソース, interfaceを定義 列を減らしてみる 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import { Node, Options } from 'ng-material-treetable'; // 省略部分はJSONデータ 表２のデータソース arrayOfNodesTree: Node&lt;Task&gt;[] = [ { value: { name: 'Tasks for Sprint 1', completed: true, owner: 'Marco' }, children: [ { value: { name: 'Complete feature #123', completed: true, owner: 'Marco' }, children: [] }, { value: { name: 'Update documentation', completed: true, owner: 'Jane' }, children: [ { value: { name: 'Proofread documentation', completed: true, owner: 'Bob' }, children: [] } ] } ] }, { value: { name: 'Tasks for Sprint 2', completed: false, owner: 'Erika', }, children: [ { value: { name: 'Fix bug #567', completed: false, owner: 'Marco' }, children: [] }, { value: { name: 'Speak with clients', completed: true, owner: 'James' }, children: [] } ] } ] logNode(node: Node&lt;Report&gt;) { console.log(node); }}// 表のデータ構造を決定export interface Task { name: string; completed: boolean; owner: string;} AP画面への反映を確認1ng serve --open 以下のように表示された エラーが発生 class内で初めにデータの定義が必要 順番を入れ替えればOK 最終的なtsファイル 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import { Component, OnInit } from '@angular/core';// 追加import { Node, Options } from 'ng-material-treetable';@Component({ selector: 'app-tree-table', templateUrl: './tree-table.component.html', styleUrls: ['./tree-table.component.scss']})export class TreeTableComponent implements OnInit { // データソースを定義 // 省略部分はJSONデータ 表２のデータソース class内の先頭に必要であった arrayOfNodesTree: Node&lt;Task&gt;[] = [ { value: { name: 'Tasks for Sprint 1', completed: true, owner: 'Marco' }, children: [ { value: { name: 'Complete feature #123', completed: true, owner: 'Marco' }, children: [] }, { value: { name: 'Update documentation', completed: true, owner: 'Jane' }, children: [ { value: { name: 'Proofread documentation', completed: true, owner: 'Bob' }, children: [] } ] } ] }, { value: { name: 'Tasks for Sprint 2', completed: false, owner: 'Erika', }, children: [ { value: { name: 'Fix bug #567', completed: false, owner: 'Marco' }, children: [] }, { value: { name: 'Speak with clients', completed: true, owner: 'James' }, children: [] } ] } ]; constructor() { } ngOnInit() { }}// 表のデータ構造の定義export interface Task { name: string; completed: boolean; owner: string;} 参考ページ Angular Material TreeTable Component TreeTable Component画面 Mat-treeとMat-tableを組み合わせて開発する場合の参考 任意のネスト、キー名をTreeで表示するコードサンプル","link":"/2020/03/17/Angular%E3%81%A7%E9%9A%8E%E5%B1%A4%E6%A7%8B%E9%80%A0%E3%81%AE%E8%A1%A8%E3%82%92%E9%96%8B%E7%99%BA-Treetable/"},{"title":"Privacy Policy","text":"個人情報の利用目的当ブログでは、メールでのお問い合わせの際に、メールアドレス等の個人情報をご登録頂く場合がございます。 これらの個人情報は質問に対する回答や必要な情報を電子メール等でご連絡する場合に利用させていただくものであり、個人情報をご提供頂く際の目的以外では利用致しません。 広告の配信について当サイトでは、第三者配信の広告サービス「Google Adsense グーグルアドセンス」を利用しております。このような広告配信事業者は、ユーザーの興味に応じた商品やサービスの広告を表示するため、当サイトや他サイトへのアクセスに関する情報 『Cookie』(氏名、住所、メール アドレス、電話番号は含まれません) を使用することがあります。またGoogleアドセンスに関して、このプロセスの詳細やこのような情報が広告配信事業者に使用されないようにする方法については、こちらをご確認ください。 アクセス解析ツールについて当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しております。 このGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。このトラフィックデータは匿名で収集されており、個人を特定するものではありません。この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。この規約に関して、詳しくはこちらをご確認ください。 免責事項当サイトのコンテンツ・情報につきまして、可能な限り正確な情報を掲載するよう努めておりますが、必ずしも正確性・信頼性等を保証するものではありません。 当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねますのでご了承ください。 当サイトで掲載している画像の著作権・肖像権等は各権利所有者に帰属致します。権利を侵害する目的ではございません。記事の内容や掲載画像等に問題がございましたら、各権利所有者様本人が直接メールでご連絡下さい。確認後、対応させて頂きます。 当サイトからリンクやバナーなどによって他のサイトに移動された場合、移動先サイトで提供される情報、サービス等について一切の責任を負いません。","link":"/2020/03/18/Privacy-Policy/"},{"title":"Hexoにコメント欄を追加(Disqus)","text":"こんにちは。今回はHexoで生成したWEBサイトにコメント欄を追加する手法について解説します。他の説明記事がどれも間違っていて（恐らくバージョンの問題）だいぶハマったのでまとめておきます。 1. Disqusとは Disqus コメント機能を拡張するサービス 様々なPlatformに対してプラグインを提供 HexoのthemeはDisqusの活用を前提としたものが多く、簡単に導入可能です ※ themeに対して設定する為、選定後の対処をお勧めします 関連記事：Hexoテーマ(theme)変更: icarus 無料で利用を開始可能です 2. 導入手順2.1. Disqusに登録 DisqusのSignupを実施 Twitter, FB, Googleアカウントの何れかを利用可能です 私はGoogleアカウントを利用しました 認証後にSignupを押下 “I want to install Disqus on my install”を選択 Create a new Site 以下の欄を入力 Website Name Category CreateSiteを選択 以下の順に選択 “Got it. Let’s get started!” “I don’t see my platform listed, install manually with Universal Code” 以上でDisqusのサイト用ページが作成されました 2.2. Disqus設定 以下が設定ページです Installation Comment機能非対応のthemeの場合はこちらのスクリプトをサイトに貼り付けましょう Hexoデフォルトのlandscapeであれば必要 該当のejsとプレフィックスにつくファイルを編集してください ファイル所在(landscapeの例)1Your-blog\\theme\\Your-Theme\\layout\\_partial 本サイトに採用しているicarusであれば、この工程はスルーしてOK “Configure”を押下 URLを入力 “Complete Setup”を押下 上部のSettingタブを選択 左のリストのGeneralを選択 “shortname”の値を控える 後でhexoに設定します 各項目に入力して”Save”を押下 以上でDisqus側の設置は完了です 細かく設定可能なので 2.3. Hexoに設定 shortnameをtheme側の_config.ymlに記述 元の状態123comment:# Name of the comment plugintype: 改修 typeにdisqusを設定 shortnameにdisqusで定義された値を設定123comment: type: disqus shortname: &lt;from_disqus&gt; Comment機能があるthemeの場合は以上でOK(icarus等) 以下のディレクトリがあるかで判断してください Your-Blog\\themes\\Your-Theme\\layout\\comment Trouble Shooting ※Comment機能がないthemeの場合(デフォルトのLandscape等)の対応も載せておきます Hexo側の設定ファイルの改修も必要です Your-Blog/_config.yml 12# disqusdisqus_shortname: https-j-xaas-github-io Disqus/Setting/Installationで表示されるScriptを該当するejsファイルにコピペしてください ejsファイルとは？ Tour-Blog/theme/Your-Theme/layoutの配下にあります 例えばheader.ejsはHexoで各記事をgenerateする際に共通の設定を与えてくれるファイルです つまり、headerに共通して与えたいスクリプトがあれば、ここにコピペするだけでOKです ※旧バージョンの場合 他の記事はどれも以下のように設定するよう書かれていましたがエラーになります123comment: disqus: [shortname] duoshuo: [shortname] comment機能の設定ファイルを探して確認 以下にありました j-blog\\themes\\icarus\\layout\\comment\\disqus.ejs ”comment.shortname”とあることから、設定ファイルのcommentのshortnameの値を参照していることが分かります themeによって特殊な設定が必要なケースも予想されるため、同じように確認してみてください123456(function() { var d = document, s = d.createElement('script'); s.src = '//' + '&lt;%= get_config('comment.shortname') %&gt;' + '.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s);})(); 3. 利用テスト3.1. Localでチェック 画面への反映をチェックしましょう1hexo server 記事の下部にコメント欄を確認できます 仕様はDisqusのSettingで細かく変更可能です コメントの投稿は本番環境でないとエラーになります generate 1hexo generate 本番環境へデプロイ 3.2. 投稿 WEBから実際にコメントを投稿してみましょう ”ログイン”よりGoogleアカウントでログイン Disqusのアカウント登録に利用したアカウントを用いれば、管理者のコメントとして認識されます コメントを投稿してみましょう 投稿者名の横に”管理者”が表示されます Googleアカウントが実名なので、Twitterで登録しておけばよかったかも… 3.3. アカウント登録 記事の訪問者をイメージして、Twitterアカウントで試してみます 事前に管理者アカウントから”ログアウト”しておきます 投稿欄の下のTwitterマークを選択 認証画面に飛びます アカウント設定 各入力項目を埋めて”Sign Up”を押下 すると、以下のように規約が表示されます 設定したアドレスに以下のmailが届きます 青字を押下 認証が完了しました WEB上でログイン コメントを投稿 アイコン画像はTwitterのものがそのまま反映されるようです 以上でDisqusの解説は終了です。手軽なので是非導入してみましょう。","link":"/2020/03/21/Hexo%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%AC%84%E3%82%92%E8%BF%BD%E5%8A%A0-Disqus/"},{"title":"[Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】","text":"こんにちは。今回は静的WEBサイトジェネレータのHexoを用いたWEBページの自動生成手法と、Github Pagesを用いた公開手法について解説します。”３分でできる”等という触れ込みを見て始めたのですが、当時素人だった私は相当ハマり諦めました…。初級者向けに説明が欠けている所を重点的にまとめようと思います。 昨今はWord PressやNote等のサービスを使って記事を書く方が多いと思いますが、自由度が低く、クオリティを追求すると有料になってしまう事が多いです。 今回の手法であれば、運用費を1円もかけず、ソースコードを完全に自由にいじれます。エンジニア界隈で流行っている手法ですが、素人や学生でも使えるレベルです。GithubやWEBの基礎の勉強にもなるので、是非挑戦してみてください。 ざっくりのイメージ（まだ分からなくてOKです） 1. 関連技術概要 早く進めたい人は手順に飛んでOKです 1.1. Hexo 静的WEBサイトジェネレータ 静的WEBサイト HTML + CSS + JavaScriptで構成されるWEBページ 上記をコマンド一つで自動生成するツールです Markdown形式のファイルを自動的にビジュアライズして表示可能 Markdownとは文章を簡単に記述するための記法です ハイフンで箇条書きを表現したり、#で見出しの文字を表現したりできます HTMLで書くよりはるかに簡単なので覚えましょう 慣れれば普段のメモもこの記法が楽です テーマが300種類近くあります Hexo Theme ブログや企業サイト、デザイナーのポートフォリオ等、なんでも作れます Themeの変更方法やカスタマイズ方法は他の記事で解説しているので、ページ作成後にご覧ください Hexoテーマ(theme)変更: icarus 1.2. Github Pages GitHub(バージョン管理ツール)が提供しているホスティングサービス 静的なWEBページを公開可能 運用費は無料 一定数のリクエストを超えると落ちてしまう制限がある 10万PV以上/月 初めは無視してOKです Githubの知識があれば学習コスト0で利用可能 Githubとは 簡単に言うと、ソースコードを置いておく場所です 開発に必須とも言えるツールであるため、覚えておくに越したことはないです Github Pagesが優れている点は、このソースの置き場所でそのまま公開できる手軽さにあります Github Pagesで生成可能なページの種類 ユーザーページ（https://ユーザー名.github.io） Githubユーザ名のrepository(名前固定)で公開 Githubユーザ1名につき、1つまで Point Organization(組織)のリポジトリである場合は上記の”ユーザ名”を”Organiztation名”に読み替えて利用できます つまりOrganizationを量産すれば、その数だけユーザページを作成可能です プロジェクトページ（https://ユーザー名.github.io/リポジトリ名/） repositoryを作成すれば、無制限にサイトを作成可能 Angularで開発したSingle Page Applicationのホスティングも可能 WEBアプリの公開にも使えます 10万PVで落ちるという制約があるため、ビジネスの現場ではそこまで使われません 個人で開発したものや、開発途中のものを公開するにはとても便利です Angularの解説は以下にまとめてます Category/Serverless Application Dev/Angular フロントエンドのスキルを深めていくのであれば、次のStepとしてAngularによるWEB AP開発に取り組むのが良いと思います。書籍等で勉強してみてください（おすすめ） Markdownやasciidoc形式のファイルをそのままおいて、ビジュアライズ表示も可能 push直後には失敗していた。数分後に確認したところ、確認できた。 編集内容の反映までに初めはリードタイムが必要 2. 手順 初級者向けに環境構築から書きます 2.1. 前提/環境構築 エディターを用意 (以下がお勧めです) Local端末の場合 VS Code 【ゼロから！】Visual Studio Codeのインストールと使い方 クラウド型IDEの場合 (GoogleアカウントがあればCloud Shellが楽です) Google Cloud Shell 【GCP入門編・第9回】 Cloud Shell で、いつでもどこでも Google Cloud Platform (GCP) が操作可能に！ AWS Cloud9 Cloud9の使い方と便利機能！最強プログラミング開発環境（IDE） Node.jsを Hexoを動かすために必要です まだ入れていなければ、インストールしましょう 参考 【Node.js入門】各OS別のインストール方法まとめ(Windows,Mac,Linux…) Google Cloud ShellやAWS Cloud9等のクラウドIDEであれば、初めから入っています 面倒な環境構築を避けたい方は利用してみましょう 2.2. github pagesの公開 準備 ユーザ直下に作成する場合 特になし Organizationで作成する場合 Organization名がユーザ名の代わりになります URLにそのままなるので、作りたいWEBページに合わせて決めましょう repositoryを作成 以下のように名称を設定すると中においた静的ソースコードがWEBページとして公開される user-name.github.io 今回のrepository名 user-name.github.io 最終的に以下のURLで表示されます https://user-name.github.io Markdownファイルをおいてみる repositoryをコピー PS D:&gt; git clone https://github.com/user-name/user-name.github.io.git 適当なmarkdownファイルを作成してreporitoryにpush ブラウザで確認 https://github.com/user-name/user-name.github.io 2.3. 静的サイトジェネレーターを利用してサイトをビジュアライズ 作成したgithub pagesのrepository配下にhexoを入れます Hexoをインストール この時点でエラーが出たらNode.jsのバージョンを確認してください1$ npm install -g hexo Hexoでプロジェクトを作成 1$ hexo init your-blog hexoで起動して、ページを確認 12$ cd your-blog$ hexo server Localhostで以下の画面を確認 環境構築が事前に済んでいたので、ここまで3分程度 ポイント README.mdは干渉するので削除 まだgitにLocalで作ったブログをpushしてもWEBサイトには出ません ここでハマったので詳しく解説していきます generate HTMLをpublicフォルダ内に生成するコマンド1hexo generate publicというディレクトリが作られ、配下に以下が生成される \\user-name.github.io\\your-blog\\public 12345678Mode LastWriteTime Length Name---- ------------- ------ ----d----- 2019/11/26 19:03 2019d----- 2019/11/26 19:03 archivesd----- 2019/11/26 19:03 cssd----- 2019/11/26 19:03 fancyboxd----- 2019/11/26 19:03 js-a---- 2019/11/26 19:03 6589 index.html 以下でindex.htmlを確認しましょう file:///D:/user-name.github.io/your-blog/public/index.html Trouble Shooting ここでpushをすると、以下のエラーに悩まされます ググっても関係のない対処法ばかり出て初級者は詰むと思います 私もSSH鍵の設定を確認したりだいぶ迷走しました 12GitHub Pages failed to build your site.The value '{}' was passed to a date-related filter that expects valid dates in /_layouts/default.html or one of its layouts. 回避策 エラーの原因 Github pagesはリポジトリ内のルートディレクトリを読み込もうとする HEXOでgenerateされたWEBページはpublicディレクトリにある 読み込めずにエラーが出ている generateされたファイルがrepository直下におかれるように設定を編集 hexoディレクトリ直下の設定ファイルを編集することでできました _config.ymlを編集 12旧：public_dir: public新：public_dir: ../ 上記の状態でgenerateコマンドを打つと、public配下に生成されていたファイル群が、repository直下に生成される 1234567891011 ディレクトリ: D:\\user-name.github.ioMode LastWriteTime Length Name---- ------------- ------ ----d----- 2019/11/26 21:36 2019d----- 2019/11/26 21:36 archivesd----- 2019/11/26 21:36 cssd----- 2019/11/26 21:36 fancyboxd----- 2019/11/24 13:00 your-blogd----- 2019/11/26 21:36 js-a---- 2019/11/26 21:36 6834 index.html your-blog（ソースファイル）をgithub pagesが読み込んでエラーを起こさないように名称を変更 余計なディレクトリがあるとGithub PagesはWEBページを表示できません 初級者は個々でもはまると思います 元々のHexoディレクトリを_で読み込めなくするだけでOKです1PS D:\\user-name.github.io&gt; mv your-blog _your-blog ここまでやってからpush WEBブラウザでページの生成を確認 1https://user-name.github.io/ 2.4. 新しい記事を追加 hexo new ‘記事名’ 概要ページを作ってみましょう 12PS D:\\user-name.github.io\\your-blog&gt; hexo new &quot;about-mob&quot;INFO Created: D:\\user-name.github.io\\your-blog\\source\\_posts\\about-mob.md source/_posts/&lt;記事名&gt;.mdが生成 localhostでチェック 123PS D:\\user-name.github.io\\your-blog\\source\\_posts&gt; hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 記事が増えている 生成されたMarkdownファイルを確認 123456PS D:\\user-name.github.io\\your-blog\\source\\_posts&gt; lsMode LastWriteTime Length Name---- ------------- ------ -----a---- 2019/11/26 20:51 57 about-mob.md-a---- 2019/11/26 18:42 838 hello-world.md abouto_mob.mdを編集 編集内容がLocal内で反映されていることを確認 2.5. 下書き記事を追加1hexo new draft &quot;article-name&quot; 下書きディレクトリ source/_drafts にmdファイルが生成される 本番環境やhexo serverでは表示されない 表示したい時は以下で–draftsを付ける1hexo server --drafts 2.6. 固定ページを追加1$ hexo new page &quot;dir-name&quot; source/“dir-name2/index.md が生成される まとめ 以上で解説は終了です 以下ができる状態になったと思います 静的サイトジェネレーターでWEBサイトを自動生成 静的WEBサイトホスティングで公開 Hexoサイトのカスタマイズ 次はテーマを変更してみましょう Hexoテーマ(theme)変更: icarus その他のカスタマイズ Category/Hexo","link":"/2020/03/23/Hexo-x-Github-Pages-5%E5%88%86%E4%BB%A5%E5%86%85%E3%81%AB%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90%E3%81%97%E3%81%A6%E7%84%A1%E6%96%99%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/"},{"title":"iPad Pro (第4世代)でDTM環境を構築","text":"こんにちは。先日、新しいiPad 2020(第４世代)を購入しました。発売当日に受け取り、即DTM環境を作ってみました（たぶん世界最速）Alexaにより、セッティングも自動化しました。シンプルな構成なので、入門者の方も良かったら参考にしてみてください。結論から言うと、DTMをやるだけならMacBook無しでも大丈夫だと思います。 1. 機材解説 Audio Interface Cubaseのセットアップ手順 iPad Pro 2020（第4世代） Hub Bluetoothスピーカー＆イヤホン＆カメラ アンプ 全体像 2. AlexaでAuto Setting 定型アクション 解説 3. 今後の展望 モニター部分をプロジェクターに変更 AWS Componserの導入 電子ドラムを追加 リモートセッション まとめ 1. 機材解説Audio Interface Steinberg USB3.0 UR44Cを採用しました 採用ポイント ジャック×4 ＆ マイクプリアンプx4 複数人の楽器とマイクを繋いで、イヤホンジャック or Bluetoothで出力すれば、サイレントセッションが可能 これがやりたくて買った節があります 価格 3万円ちょっとで手頃 今回の条件に当てはまる中で最安でした 他は5万以上 更にジャックを増やしたければ、予算を上げるしかないと思います まだ初級者なので、必要になったらミキサーでも買おうかなぁというスタンスです USB 3.0（USB Type-C）対応 PCを毎回立ち上げるのは面倒なため、タブレットで済ませたい ios版のCubaseがついてくる Cubase 最も有名な音楽制作ソフトでプロもよく使っています 機能が豊富で、宅録には必須 無料 本来は購入する必要があります セットアップが楽 Apple StoreでinstallしてUSB-Cケーブルで繋げるだけ 実は今回のハードもCubaseもSteinburg社が開発しているので相性が良い ループバック機能により、動画配信も可能 Cubaseのセットアップ手順 Cubasis LE2をApp Storeからinstall アプリを起動 ”To unlock a Cubasis LE features…”と表示されます 解除方法は以下の二つです 料金を支払う 対象製品と接続する この対象製品がSteinberg USB3.0 UR44Cです USB-Cケーブルで接続(iPadについていた純正品を使いました) unlock完了 以下のように表示されれば連携完了です Cubaseを初めてすぐに適当にパッドを使って打ち込んでみました（意外とそれっぽくなって楽しい） iPad Pro 2020（第4世代） 12.9インチモデルを採用しました 採用ポイント USB C対応 USB C対応のInterfaceに簡単に繋げます メモリが6Gに増強 音源編集にはある程度パワーが欲しい トラックパッド・マウスに対応 Bluetoothマウス等でPCライクな作業が可能に 出力方法にBluetoothを選択可能 値下げ iPad Pro第三世代登場時よりもだいぶ安いです メモリの増強以外のポイントはiPad Pro（第三世代）でも満たしています コスパ重視の方は11インチなら8万程度です Hub USB-C Hubを付けました 以下のような入出力を実現するために採用してます 入力 USB-C 出力 HDMI イヤホンジャック Bluetooth Bluetoothスピーカー＆イヤホン＆カメラ WF1000XM-3 立って弾く際にコードが引っかかるのが面倒で、結局生音でしかやらない節があったため採用 専用アプリから細かくイコライザーを弄れて楽しい Bluetoothのノイキャンイヤホンの中では一番音質が良い(2020/03 時点) スケールアップ技術で、音質を勝手に上げてくれる SRS-XB32 価格が手頃で低音の出が良い これの一つ上のサイズは音量重視で音がこもり気味（Sonyの店員さん談） 複数個を連携させて、別の音を振れる 自分を囲むように配置して、音に包まれてみたかったので使ってます ジャックもさせます 防水なのでお風呂でも聞ける WEBカメラ 録画・配信用にクリップ型のカメラを繋げています オススメ Webカメラ HD1080P 150 Webカメラ 広角 Webカメラ 広角 高画質 Changer webカメ アンプ Fender信者なので、Fenderのベースアンプを使っています ”でかくてかっこいい”という理由で40Wを購入したものの、近所迷惑になるので音量最低でもそのまま音を出せない.. 全体像 急いで組んだので後で綺麗に整理しようと思います 2. AlexaでAuto Setting せっかくDTM環境を作っても、セッティングに時間がかかるとやる気が失せてしまうので、自動化しました。電気代にも優しくなります。 ITの知識が無くても説明に従えば簡単にできるので。良かったら真似てみてください。 機器が増えるほど効果を発揮してくると思います 定型アクション Alexaに「DTM」と言うと、実行される”定型アクション”を設定しました Trigger 音声：「DTM」 Action スマート電源タップAをON/OFF Bassアンプを接続 スマート電源タップBをON/OFF エフェクターを接続 スマートリモコンを起動 Monitorのリモコンの電源ボタンを登録 解説 スマートスピーカー 画面付きのEcho Show 5を採用 Smart電源タップ 電源のON/OFFで操作する機器であれば基本これでOKです 一通り試したことがありますが、一番コスパがいいのは各穴を制御できるMeross スマート電源タップです Smartリモコン 赤外線リモコンで動くものであれば、Smartリモコンに記憶させて、Alexaから実行できます 大量のリモコンを纏められるのですっきりします 私はNature Remo miniを使っています 人感センサーまでついているので、勝手にON/OFFさせることもできます 3. 今後の展望モニター部分をプロジェクターに変更 iPadはBluetoothによって画面をミラーリングすることもできます。プロジェクターにはPopin Aladdinを使う予定です 採用理由 120インチを表示できるので大きいモニターよりコスパが良い 壁一面に映してリモートセッションをやってみたい… 照明と一体型のプロジェクター 暗くする手間を省ける 場所を取らない 赤外線リモコンが付随しているので、スマートリモコンでAlexaから動かすことも可能 AWS Componserの導入仕事柄AWS(クラウドサービス)の動向を常にチェックしているのですが、去年のSummitで機械学習用のキーボードが発表され、ずっと気になっています。 AWS Composerとは 弾いたメロディに対して、AIがアレンジを加えて作曲 学習済みのモデルが複数用意されている そのままSoundCloudにアップ可能 学習モデルはオリジナルでも作成可能 学習モデルは与える音源によって変化していくらしいです。AIに音楽のルーツを持たせられるのが人間の様でとても興味深いです。 エンジニア寄りの話になりますが、AWSでの開発もcloud9等のブラウザ型IDEを用いれば、iPadからやれてしまいます。趣味と仕事を結びつけたら楽しそうなので、時間を見つけて挑戦しようと思います。 電子ドラムを追加 ここまで揃えれば家でセッションできますね おすすめを教えて頂けると嬉しいです リモートセッション ネットを介してセッションできるサービスがあります 現時点では遅延もあるらしいです 手段 YAMAHA NETDUETTO ヤマハのサービスです JamBlaster 米国のスタートアップが最近開発したハードです スマホベースでネットと繋ぐらしい。詳しくは調査中 5GやWifi6で遅延が減って、完璧なサービスが登場するのが楽しみです とりあえずYAMAHAのNETDUETTOを一緒に試してくれる方を募集してます（いきなり知らない人は怖いので） まとめ今回の記事は以上です。タブレットでも音源編集が可能になり、だいぶDTMの敷居が下がったように思います。私も何も知らないまま一から調べて今回の構成を作ったので、ここまでは誰でも真似できると思います。是非実践してみてください。質問やアドバイスなどあればどしどしください。","link":"/2020/03/25/iPad-Pro%E3%81%A7DTM%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/"},{"title":"iPad ProでWEB AP開発 & RPA","text":"こんにちは。先日iPad 2020(第４世代)を購入しました。発売日の今日受け取ってこの記事を書いています。最近はPCライクな作業の効率がUpしているので、WEB APの開発をできるようにしてみました。一言で開発環境が立ち上がるように自動化もしています。さっきDTM環境も構築しました。 概要 基礎知識 選定基準 周辺機器 マウス Keyboard イヤホン Google Cloud Shellの設定手順 ショートカット x SiriでIDEを開くまでを自動化 手順 開発の周辺作業 関連記事 概要 ざっくりのイメージ図を書きました 流行りのブラウザ型IDEを利用して、iPadでの開発を可能にします また、iPadのRPAツールで一言でIDEが立ち上がるようにします 基礎知識 ブラウザ型IDEとは？ URLで即アクセスして、ブラウザで利用可能なIDE RDPをするより手軽 そもそもiPadからのRDPはできなくもないがまだ厳しい 裏側で動いているのはクラウド上の仮想サーバ Cloud9ならEC2、Cloud ShellならGCEのリソースを利用 意識せずに使えるので安心してください 自端末のOSに依存せず開発可能 つまりiPadでも開発可能 普通のWinows PCでも効果が大きいです 社内プロキシ問題に悩まされない 個人的には最重要ポイント 環境構築を省略可能 node_module, Git, AWSやGCPのCLI等の便利なものが元から入っている 新設チームや初級者への効果は計り知れないと思います お勧めできるブラウザ型IDEは以下の二つです Google Cloud Shell Googleのブラウザ型IDE Googleアカウントで利用 環境構築を省略可能 Firebase CLI等のGCP向けのものが入っている AWS Cloud9 AWSのブラウザ型IDE AWSアカウントで利用 環境構築を省略可能 AWS CLI等の便利なものが入っている ★複数ユーザーで同時編集可能 リモートワークやレビューに便利です やり方は以下にまとめてあります cloud9による共同編集・リモート開発 選定基準 用途から 手軽さ優先・今すぐ使いたい Google Cloud Shell Googleアカウントさえあれば、5分以内に使い始められます Cloud9はAWSのアカウントが必要なので、権限周りがシビアです 組織で共有している場合、少し面倒なことになります 複数人で同時編集したい AWS Cloud9 そのうち、Google Cloud Shellにも同じ機能がつきそうではあります 以下を参考にどうぞ cloud9による共同編集・リモート開発 開発するサービスから バックエンドに利用するクラウドが決まっていれば、環境構築の手間を削減できるので、合わせましょう Firebase, GCPを利用する Google Cloud Shell AWS, Amplify, Lambdaを利用する AWS Cloud9 周辺機器マウス iPadとマウスはBluetoothで繋げられます iPad対応で”発信機が不要”なモノにしましょう 安めで、USB充電が可能なFenifoxを使っています amazonで探していたら、ipadに対応していないにも関わらず、”対応”と書かれているものがあったので、よく確認してください fenifoxの説明には全くないのですが、接続時にパスワードを求められたら”0000”,”1234”,”1111”の何れかを入力すればOKです 拘る人にはApple純正のマウスもあります Keyboard ひとまずMagic Keyboardを使用しています 非常に軽く、登録後は叩くだけでipadと繋がります 打鍵感に拘る人はこれが良いと思います 話題のiPadが浮くキーボードは2020/05発売なので待機中です Apple Magic Keyboard イケてるけど、エントリーモデルのipadより高い… イヤホン 会議用に用意しておくと便利です Sony製品が好きなのでWF1000XM-3を使っています Google Cloud Shellの設定手順 Google アカウントを作成 ログインした状態でGCPを開く Google Cloud Platform Googleアカウントでそのままログイン GCPコンソールが開きます コンソール上部の赤で囲んだマークを押すと、コマンドラインが現れます コマンドラインが下部に出た状態 次に拡大ボタンを押下しましょう 全画面表示になります 次にペンのマークを押下しましょう エディターが現れます 以上でVC Codeのような画面になったと思います このWEBページもGoogle Cloud Shellのエディターで編集して、CLIでhexoのコマンドを打って自動生成しています 画像の処理が楽なのでiPadでやると効率があがります WEB APのlocalhostで実行してブラウザで確認したい時 上の左から二番目のアイコンをクリックすると、portを指定してブラウザを開くことができます クラウドIDEで開発する際に嵌りがちなシーンですが、Cloud Shellなら楽に解決できます ショートカット x SiriでIDEを開くまでを自動化 『Hey Siri, GCP』と言ったらGoogle Cloud Shellが開くようにします ブラウザ型IDEの欠点として、ブラウザから開く手間があります。自動化して時短＆モチベーション向上を図りましょう ショートカット iPhoneやiPadで使える手軽なRPAアプリ iPadで作業するメリットの一つだと思います 手順 GCPコンソールのURLを控える ”ショートカット”アプリを開く ”ショートカットの作成” ショートカット名を”GCP”に設定 左上の検索欄で”Chrome”と入力 候補に出る”Chromeで検索”を選択 “ChromeでURLを開く”を選択 URL欄に先ほどのURLをコピペ 以上で完了です。”HEy Siri, GCP”といえば、自動でIDEが出てきます よく使うサービスは同じように表示までを自動化しておくと便利です 冒頭に動画を載せておきましたが、cloud9も同じようにURL指定で開けるようにしています 開発の周辺作業PCじゃないと無理じゃない？と言われそうな作業の代替え案です パワポ Googleスライドを使いましょう クラウド上に保存すれば、どの端末からでも見れるので便利です アクセス制限を付けて所定の人にだけ見せることを可能です Excel せめてGoogleスプレッドシートを使いましょう IT界隈ではExcelを使うとディスられる風潮があるので気を付けてください 関連記事 cloud9による共同編集・リモート開発 Cloud9 x Firebase x AngularでAP開発","link":"/2020/03/25/iPad-Pro%E3%81%A7WEB-AP%E9%96%8B%E7%99%BA/"},{"title":"Angular コンポーネント間の連携手法まとめ(Service/＠ViewChildで親から子のメソッドを呼出し)","text":"初級者向けに説明した際の備忘録です。 概要 ① Serviceを活用する場合の手順 Serviceを作成して機能を取り出す Serviceをimport Serviceを注入 Serviceのメソッドを実行 ② @ViewChildを活用する場合の手順 @ViewChildと対象の子Componentをimport @ViewChildデコレータを設定 子のメソッドを実行 概要 AngularにおけるComponent間連携 別々のComponent間ではそのままデータを受け渡したり、メソッドを呼び出すことができません Material等を用いた画面の作り方を覚えて、機能開発を始めたレベルの初級者が最初にハマるポイントだと思います 連携手法 Serviceとして機能を外に取り出し、複数のComponent側から参照 基本的にこちらが推奨 親子構造のコンポーネント間で直接参照する @ViewChildデコレータというものを使えば手軽にできます 上記の連携手法x2について解説します。 ① Serviceを活用する場合の手順 Serviceに機能を取り出して参照する場合の手順を以下に示します 親子間で連携させたい場合は飛ばしてください Serviceを作成して機能を取り出す 作成1ng g service 'service-name' service-name.service.tsを編集 共有したい機能は基本的にここに書く Component側に書くのはUI関係に絞る Serviceをimport 以降はServiceを取り込むComponentのtsファイルを編集します1import { ServiceNameService } from '../service-name.service'; Serviceを注入 constructorにserviceを注入することで、Service内のメソッドを参照可能になります private “このComponent内でServiceを扱う名称”: “Serviceのクラス名”123456export class TestComponent implements OnInit { // Serviceを注入インスタンス化 constructor(private TestService: ServiceNameService) { console.log('サービスを注入'); } Serviceのメソッドを実行 上記で定めたTestService.”メソッド名” で実行できます1this.TestService.functionA(); ② @ViewChildを活用する場合の手順 親子間でメソッドを呼ぶ際の手順を示します @ViewChildと対象の子Componentをimport ※対象が複数の場合はViewChildrenを用いる1234// 親子間の連携にはViewChildが必要import { Component, ViewChild } from '@angular/core';// 子のComponentをimportimport { ChildComponent } from '../child/child.component'; @ViewChildデコレータを設定 ※Angular8以上は@ViewChildの引数が二つ {static: false}を第二引数に指定すればOK 1234export class ParentComponent { // 子コンポーネントをプロパティ:childとして設定 @ViewChild( ChildComponent, {static: false} ) private child: ChildComponent; 子のメソッドを実行1child.functionA(); 今回の解説は以上です Angularを扱う際は、なるべく細かいComponentに分けて疎結合な設計にしましょう","link":"/2020/03/31/Angular-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%AE%E9%80%A3%E6%90%BA%E6%89%8B%E6%B3%95%E3%81%BE%E3%81%A8%E3%82%81-Service-%EF%BC%A0ViewChild%E3%81%A7%E8%A6%AA%E3%81%8B%E3%82%89%E5%AD%90%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E5%87%BA%E3%81%97/"},{"title":"git merge & コンフリクトの解消（複数名の編集内容を集約）","text":"Githubで初級者がハマりがちなポイントについてです。複数メンバの編集内容をGitで効率的にまとめる手法を解説します。 基礎知識 githubの分散開発 git mergeとは 手順 merge コンフリクトの解消 基礎知識githubの分散開発 基本的な進め方 開発メンバ数のbranchを作成 別々のbranchを各メンバが編集 作業完了後にmerge ※本記事で解説する内容 git mergeとは githubのコマンド 機能 複数branchのmerge つまり各メンバの編集内容を反映して合わせることができます メリット 差分の可視化 githubであれば、編集箇所がマーカーで表示されます 編集日時・編集者も一目で判別可能 目視でソースの変化を比較するにはすさまじい労力を伴います 変更の反映・集約の自動化 わざわざコピペする手間を削減可能 複数名が別々の編集をしたファイル 開くと各メンバの変更箇所が並んで表示されます ボタン一つでどれを採用するか決定可能です ※詳細は手順内で説明 mergeの楽さと過去の改修内容を時系列で遡れることが、gitを活用して分散開発を行う主な理由です 手順 他人が編集していた別branchの変更内容を、自分のLocal端末上でmergeするまでを書きます merge リモートから別branchを取得 Localに未登録であれば実行(git branch -aで別branchが出ない場合)1git fetch 追加されていることを確認1git branch -a branchへ移動して内容を確認1git checkout &lt;branch-name&gt; 元のbranchに戻る1git checkout master ※Commitが未実行のファイルが無いか確認 そのままmergeすると変更の取り込みが漏れてしまうため 以下のように出ればOK123456git statusOn branch masterYour branch is up to date with 'origin/master'.nothing to commit, working tree clean merge1git merge &lt;branch-name&gt; 別々のファイルを改修していた場合は、以上で完了です merge実行時に”CONFLICT”が出力されれば、次の処理も必要です コンフリクトの解消 コンフリクトとは 編集内容の衝突のこと それぞれのbranchで同じファイルを編集していた際に発生する どちらの編集内容を採用するか決める必要がある1CONFLICT (content): Merge conflict in &lt;conflict-file&gt; コンフリクトの解消方法 上記のコンフリクトが発生した各ファイルを開く VS Codeの場合 コンフリクト箇所をマーカー表示 緑のマーカー 以下から始まる箇所1&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD (Current Change) 現在のbranch側の編集内容 青マーカー 以下から始まる箇所 1&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name (Incoming Change) 現在のbranchにmergeしようとしているbranch側の編集内容 マーカー上部に表示されるメニュー Accept Current Change Accept Incoming Change Accept Both Changes Comppare マーカー表示箇所のどちらを採用するか決定 方法は二つ マーカー上部のメニューから選択 例：Accept Current Changeを選択 Current branchの内容(緑マーカー)が採用され、Incoming branch(青マーカー)の内容が消去されます つまり、差分を一目で確認して、一押しで取捨選択可能です 要らない方のマーキング箇所を手動で消去 ファイルの編集後 addまでしてコンフリクトが解消された状態になります1git add &lt;conflict-file&gt; 確認 赤字でコンフリクト中のファイルが表示されなければOK1git status Remoteに登録 12git commitgit push 今回の解説は以上です。pull, commit, push等のgitの基礎と今回の内容を覚えれば、一先ずチームで分散開発を始めることができると思います。ここで手間取ると初動からPJが遅延するので、未修得のメンバがいれば放置せずに教えてあげましょう。細かい機能は使わないものも多いので、走りながら必要に応じて覚えていけば大丈夫です。","link":"/2020/04/08/git-merge-%E3%82%B3%E3%83%B3%E3%83%95%E3%83%AA%E3%82%AF%E3%83%88%E3%81%AE%E8%A7%A3%E6%B6%88%EF%BC%88%E8%A4%87%E6%95%B0%E5%90%8D%E3%81%AE%E7%B7%A8%E9%9B%86%E5%86%85%E5%AE%B9%E3%82%92%E9%9B%86%E7%B4%84%EF%BC%89/"},{"title":"[オンライン飲み会向け]　Netflix Partyでリモート鑑賞会をする方法","text":"最近コロナウィルスの影響でオン飲みが流行っているので、映画好きにお勧めのNetflix Partyについて書きます。 1. Netflix Partyとは 2. Netflix Partyの導入方法 3. 使い方 スマホやタブレットでリモート鑑賞する方法 1. Netflix Partyとは 複数名でNetflixを鑑賞できるサービス 機能 映画の共有・同時視聴 Zoom等で画面共有をすればいいのでは？と考える方も多いと思いますが、Netflixにはガード機能が備わっており、画面がブラックアウトしてしまいます Chatroom 映像の画面の横にチャットが表示されます Google Chromeの拡張機能 無料 開発元 非公式 Google/Netflixとは無関係のサードパーティーが開発 利用条件 デバイス PC スマホやタブレットでは使えませんでした 事前のアカウント作成 Netflixアカウント 全員必要 Googleアカウント ChromeへのNetflix Partyの導入 全員必要 2. Netflix Partyの導入方法 まずは↓からNetflix PartyをChromeに追加します Choromeウェブストア Netflix party “拡張機能を追加” 表示されたポップアップでも”拡張機能を追加” 以上で準備はOK Chromeの画面右上に”NP”アイコンが出ます 3. 使い方 動画を再生 NPアイコンが赤くなります NPアイコンを押下 start the party URLが出てきます このURLを一緒に鑑賞するメンバに共有します 以上で同時再生機能とチャットルームを使えます。 ユーザが入るとチャット欄に”Join”と表示されます 利用イメージ こんな感じでモニターに映してZOOMやLINEで皆と通話しながら利用しています 回線が弱いと偶に切れてしまう事もありますが、同じURLから入り直してチャットルームにメンバが表示されればOKです 大画面で鑑賞したい方向けにオススメを置いておきます モニター 24in 高さ調整可能で手頃 Z6 Polar Meets popIn Aladdin大画面ホームシアター Netflix等の動画配信サービスを鑑賞可能なプロジェクター HDMIでPCやゲームと繋いで、壁一面に映せます スマホやタブレットでリモート鑑賞する方法 Netflix Partyをモバイルで利用する手段はありません 調査したところ、↓のアプリでできそうです Rave Squad Airtime","link":"/2020/04/08/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E9%A3%B2%E3%81%BF%E5%90%91%E3%81%91-Netflix-Party%E3%81%A7%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E9%91%91%E8%B3%9E%E4%BC%9A%E3%82%92%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"iPhone/iPadのRPAツール『ショートカット』でサボりを防止する","text":"サボりを防止するために、勉強と関係の無いアプリを開いたら自動的に叱られるようにしてみました。ネタ記事ですが、Appleのショートカットアプリはかなり応用が効く便利ツールなので覚えておいて損はないです。 海外版松岡修造として著名なシャイア・ラブーフさんに叱られます 基礎知識 手順 まとめ/応用例 IT界隈の方向けの応用例 関連記事 基礎知識 RPA (Robotic Process Automation) 定型的な事務作業をSoftware型のロボットが自動化する概念 昨今の働き方改革ブームの文脈でバズワードになりがち 直感的に利用可能なサービスが沢山出ているので、使えないとまずいです ショートカット Apple純正のRPAアプリ このアイコンのAppです 導入の手間が無い iPhoneやiPadなら元から入っているため 特に課金要素は無いので利用しないのはもったいないです RPA入門者向け これを使えない人が仕事でPC用のRPAツールを使うのは無理です 直感的に使えるショートカットで慣れておきましょう Siriからも実行可能 できる幅が広いので、使いこなせば大抵の作業を一言で完了できます 手順 ショートカットアプリを開く 画面下部の”オートメーション”を選択 画面右上の＋マークを選択 ”個人用オートメーションを作成”を戦t買う ”ショートカットを作成”を選択 ここから以下のように設定します トリガー ”Appを開く” アクション URLを開く 下にスワイプして”Appを開く”を選択 “Appを選択”画面で作業を邪魔するアプリを選択 今回はTwitterを登録してみます 次へ アクションの設定画面に飛びます ”アクションを追加”を選択 ”WEB” ⇒ ”URLを開く” を選択 青字の”URL”にyoutubeのURLを指定 Do itおじさん動画のURL https://www.youtube.com/watch?v=nwW4CDGucVs 別の動画にも応用可能です ”実行前に尋ねる”を無効化 完了 以上で適用されます テスト Twitterを開いてみましょう 画面上部にオートメーションを実行と表示され、Do itおじさんの動画に強制的に飛ばされます 解除方法 オートメーションを編集 “このオートメーションを有効”の横のタブを無効化すればOK 試験前にアプリをわざわざ消すより手軽に対策できます まとめ/応用例 今回は”指定したURLを開く”という最も基本的な機能を利用しました ショートカットはもっと複雑なことも沢山出来るので是非試してみてください 例 位置情報をTriggerとした操作 外出時に自動で予定表に入れた目的地への経路案内を表示 時間をTriggerとした操作 タイマーを設定した時間に、IoT家電を操作 カーテンの開閉 電気を点灯 IT界隈の方向けの応用例 最近は手軽にAPI連携を確立できるサービスがいくらでもあるので簡単に応用できます 例 IFTTTとの連携 This(Trigger)とThat(Action)を定めることで簡単に400種類以上のサービスとの連携を可能にするクラウドサービス TriggerにWebhookを定めると所定のURLに対するリクエストだけで動く仕組みを作れます つまり、ショートカットからIFTTTのURL宛にリクエストを送るだけで様々なサービスを動かせます FaaS (Function as a Service)と連携 AWS LambdaやGoogle Functions辺りをキックして動かせば大抵のシステムと連携可能です 関連記事 iPad ProでWEB AP開発 &amp; RPA 同じ要領で開発にも応用しています","link":"/2020/04/09/iPhone-iPad%E3%81%AERPA%E3%83%84%E3%83%BC%E3%83%AB%E3%80%8E%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%80%8F%E3%81%A7%E3%82%B5%E3%83%9C%E3%82%8A%E3%82%92%E9%98%B2%E6%AD%A2%E3%81%99%E3%82%8B/"},{"title":"[Angular]親子コンポーネント間でデータを共有(@Input/@Output/EventEmitter)","text":"Angularのコンポーネント間ではデータをそのまま共有することはできません。初級者が躓くポイントの一つだと思うので、解説をまとめておきます。 基礎知識 1. 親⇒子 (@Inputを使用) 1.1. 親側 parent.component.ts parent.component.html 1.2. 子側 child.component.ts child.component.html 2. 子⇒親 (@Output/EventEmitterを使用) 2.1. 子側 child.component.ts child.component.html 2.2. 親側 parent.component.html parent.component.ts 基礎知識 Angularで親子間のデータを伝播させるにはデコレーターを利用します デコレーター 構成情報を付与する仕組み 対象 クラス/プロパティ/メソッド/引数 構文 @name ex.) @NgModule データの流れ 使用するデコレーター 親 ⇒ 子 @Inputデコレーター 子 ⇒ 親 @Outputデコレーター 例えば、子A ⇒ 親 ⇒ 子B の順にデータを共有することも可能です ※関係性の遠いコンポーネント間のデータ共有にはServiceを介しましょう それぞれ解説していきます。 1. 親⇒子 (@Inputを使用) Component構成は以下の入れ子構造を想定 親 parent.component 子 child.component 1.1. 親側 選択肢を表示parent.component.ts 選択値を 1234567891011121314// 選択値を保存する変数selected: string;// データを定義data = [ {name = &quot;選択肢A&quot;} {name = &quot;選択肢B&quot;} {name = &quot;選択肢C&quot;}]// click時に選択値をselectedに格納&quot;onClick(select_name){ this.selected = select_name;} parent.component.html 定義したデータ型からbuttonを繰り返し表示 click時に選択値を引数としてonClick()を実行 123456&lt;div *ngFor=&quot;let d of data&quot;&gt; &lt;button (click)=&quot;onClick(d.name)&quot;&gt;{{d.name}}&lt;/button&gt;&lt;/div&gt;&lt;!--childコンポ―ネントを入れ子で表示---&gt;&lt;app-child [item]=&quot;selected&quot;&gt;&lt;/app-child&gt; 1.2. 子側child.component.ts @Inputでitemを受け取ります childから渡した選択値が入ります1234567// Inputが必要import {Component , Input} form '@angular/core'// @Inputでexport class ChildComponent{ @Input() item: string;} child.component.html 受け取った値を表示1234&lt;!--ngIfでデータが空じゃなければ表示--&gt;&lt;div *ngIf=&quot;item&quot;&gt; &lt;li&gt;{{item}}を選択しました&lt;/li&gt;&lt;/div&gt; 2. 子⇒親 (@Output/EventEmitterを使用) Component構成は以下の入れ子構造を想定 子 child.component 選択肢をbuttonで表示 親 parent.component 選択値によって変化 @Outputでデコレーターを活用して、子コンポーネントで発生したイベントを親に通知 2.1. 子側child.component.ts import @Outputで受け渡すイベントを定義 (click)でイベントを発生させるメソッドを定義 共有したいデータを引数として受け渡す emitメソッド イベントをここで発生させる 構文 event: イベント名 data: $eventオブジェクトとして渡すデータ1this.event.emit(data) 記載例 12345678910111213141516// 1. OutputとEventEmitterを利用するためにimportimport { Component, Output, EventEmitter } from '@angular/core';export class ResourceTreeComponent { // 2. イベントを宣言 発生時に$eventオブジェクトとして&lt;&gt;で定義した型のデータを親へ受け渡す @Output() selected = new EventEmitter&lt;string&gt;(); // 3. (click)で共有したいデータを引数としてイベントを発生させる onclick(data) { // 選択したリソースタイプをselectedへ格納 this.selected.emit(data); } child.component.html 想定する状況 事前に定義したデータ：nodeをtreeとbuttonで選択肢を表示 選択値: node.nameを親に渡したい (click)でonclickを発火させる 1234567&lt;!--mat-treeで階層型の選択肢を表示---&gt;&lt;mat-tree-node *matTreeNodeDef=&quot;let node&quot; matTreeNodeToggle matTreeNodePadding&gt; &lt;!--click時にnode.nameを選択値として取得---&gt; &lt;button mat-button (click)=&quot;onclick(node.name)&quot;&gt; {{node.name}} &lt;/button&gt; 2.2. 親側parent.component.html 子から受け取ったdataを変数selectに入れて表示 (selected)=”onSelect($event)” childでselectedイベントが発生したタイミングでonSlect()メソッドを実行 $eventオブジェクト emitメソッド経由で渡されるdata123&lt;div&gt;{{select}}&lt;/div&gt;&lt;!--子コンポーネントの要素にイベントバインディングを設定---&gt;&lt;app-child (selected)=&quot;onSelect($event)&quot;&gt;&lt;/app-child&gt; parent.component.ts12345678910export class ParentComponent implements OnInit { // データを受け取る変数を宣言 select: string; // resourcce-treeからデータを受け取る onSelect($event) { this.select = $event; return this.select; } 解説は以上です。","link":"/2020/04/10/Angular-%E8%A6%AA%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%85%B1%E6%9C%89-Input-Output-EventEmitter/"},{"title":"[Angular] map() & filter() & mat-checkboxを使って選択値を配列に格納するロジック","text":"複数のチェックボックスの中で選択項目を判別して、それぞれの固有値を配列に格納するロジックの作り方を解説します。 以下のSample画面で言うと、チェックされたJapanの値を配列に格納します 使いどころ checkした項目に応じて外部サービスに対するリクエストに含めるパラメータを変化させる 基礎知識 Angularにおけるデータ加工ロジック map filter 実装 データ構造の定義 状態判別ロジック 配列データを引数としてリクエストを送る際の例 tsに定めたdataに応じてチェックボックスのリストを表示するHTML 基礎知識 記載例 画面で確認 おまけ: for文で書く場合 基礎知識 すぐに実装に取り掛かりたい方は飛ばしてOK Angularにおけるデータ加工ロジック 基本的にmapやfilterを利用する アンチパターン 何でもfor,if文 何故か? mapは並列処理 for文と比較して処理が高速 書式がシンプル 開発期間短縮 可読性向上 リファクタリングの簡略化 map map() 処理 引数として与えられた配列の各要素に対して、一つづつ関数を実行 カウンタが不要な配列向けのfor文というイメージでOKです 返り値 実行結果から新たな配列を生成 filter filter() 処理 引数として与えられたテスト関数を各配列要素に対して実行 配列向けのif文というイメージでOKです 返り値 テスト関数の条件に合格した要素からなる新しい配列を生成 利用イメージ 12345678// 配列を宣言const array = ['AA', 'BB', 'CC', 'DDD', 'EEEE', 'FFFFF'];// 配列arrayを引数として、条件式3文字以上の要素を抽出して、配列として返すconst result = array.filter(array =&gt; array.length &gt;= 3);console.log(result);// output: Array [&quot;DDD&quot;, &quot;EEEE&quot;, &quot;FFFFF&quot;] 構文は以下 value: 配列の要素 index: インデックス array: 操作中の配列本体1var newArray = arr.filter(callback(element[, index[, array]])[, thisArg]) 他の利用例は以下を参考にどうぞ MDNをご覧ください その名の通りのfilter()で絞り込み。（配列とかおれおれAdvent Calendar2018 – 12日目） 実装ざっくりイメージは以下 tsファイル 役割 データ構造の定義 判別ロジック (click)イベントで発火 html 役割 checkboxの表示 tsファイルで指定したデータの参照 (click)イベントの指定 データ構造の定義 配列dataに以下のようにデータ構造を定義します valueを読み替えて使用してください sample.component.ts1234567// dataにcheckboxの値とチェック状態の初期値：selectedを定義data = [ { value: 'Japan', selected: false}, // 初期値 true { value: 'America', selected: false}, { value: 'China', selected: false}, { value: 'England', selected: false},] 状態判別ロジック 状態を判別するmethodを宣言します ざっくりイメージ filter() data全体からチェック済みのもの(Selected=true)に絞る map() 残ったdataのvalueで配列を生成 Listに格納 sample.component.ts12345678910makeList() { // 格納先の配列を宣言 let countryList = []; // selectedからチェック状態を確認して、配列にを格納していく countryList = this.data .filter((d) =&gt; d.selected) // checkされているものに絞る .map((d) =&gt; d.value); // valueを取得 return countryList; //} 配列データを引数としてリクエストを送る際の例 選択値を使って外部サービスへリクエストを行うケースを想定 service側で受け取った変数に応じた分岐処理を用意しておくイメージです sample.component.ts1234567submit(){ // 選択値を受け取る const selectedCountries = this.makeList(); // 任意のServiceのメソッドを実行 getService.requesrMethod(selectedCountries)} tsに定めたdataに応じてチェックボックスのリストを表示するHTML基礎知識 ngFor 指定した配列をループ表示させる構造ディレクティブ べた書きするよりもすっきり書けます 今回は以下のように配列:dataをループさせています ngForのループの中でdataを変数itemとして使うという意味1*ngFor= &quot;let item of data; index as i&quot; ng-container x *ngFor 組み合わせると、ng-containerの中の要素全てを一まとまりでループさせることが可能です mat-checkbox 通常のcheckboxはイケてないのでAngular Materialを使います 通常のcheckboxを使う場合は”mat-checkbox”を”input”に読み替えてください Angularのフォーム 二種類あります テンプレート駆動型 書式がシンプルで手軽に実装可能であるため採用 #myForm=”ngForm” と設定することでこちらになる モデル駆動型 (Reactive駆動型) コードは冗長になりがち より柔軟に複雑な要件を満たせる記載例 sample.component.html 1234567891011121314151617181920&lt;div&gt;Choose Country&lt;/div&gt;&lt;!---formで選択したリージョンの情報を纏めてからリクエスト------&gt;&lt;form #myForm=&quot;ngForm&quot; (ngSubmit)=&quot;submit()&quot;&gt; &lt;!---定義した配列dataをngForでループ表示 要素をiでカウント----&gt; &lt;ng-container *ngFor= &quot;let item of data; index as i&quot; &gt; &lt;!---inputで通常のCheckboxに変えてもOK---&gt; &lt;mat-checkbox type=&quot;checkbox&quot; name = &quot;country{{i}}&quot; [(ngModel)]=&quot;data[i].selected&quot; [value]=&quot;item.value&quot; (change)=&quot;checkCountry(i)&quot; &gt;{{data[i].value}}&lt;/mat-checkbox&gt; &lt;/ng-container&gt; &lt;!---チェックボックスから得たデータを纏めてリクエストするボタン---&gt; &lt;button mat-raised-button color=&quot;primary&quot;&gt;Get Data&lt;/button&gt; &lt;!--(ngSubmit)=で設定されたsubmit()が実行される--&gt;&lt;/form&gt; 画面で確認 以下のように表示されます おまけ: for文で書く場合 for文でも判別ロジック書いたので参考までにどうぞ だいぶ冗長になってしまいます 12345678910111213141516// 格納先を宣言let regionList = [];// for文で書く場合var num=0;for ( let c = 0; c &lt;= this.data.length - 1 ; c++) { if (this.data[c].selected) { // Checkされているか判定 trueなら実行 // 配列に要素を追加 .push() countryList.push(this.data[c].value); // リージョン名を格納 console.log(countryList[num] + ' checked'); // デバッグ用 num++; } else { console.log('Not Check'); // デバッグ用 }}console.log(countryList);","link":"/2020/04/13/Angular-map-fileter-mat-checkbox%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E9%81%B8%E6%8A%9E%E5%80%A4%E3%82%92%E9%85%8D%E5%88%97%E3%81%AB%E6%A0%BC%E7%B4%8D%E3%81%99%E3%82%8B%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF/"},{"title":"[Cloud9 x Angular] cloud9でng serveを実行してAPの画面を確認するまで","text":"Angularの開発であれば、小まめにWEB APの画面を確認しながら進めるのが一般的だと思います。ただ、開発環境にcloud9を採用する場合は、ng serveを実行する際に一手間必要になります。初級者が必ずと言っていいほどハマるポイントなので解説をおいておきます cloud9上でのserve 1. previewの表示 2. angular.jsonファイルを書き換えてポートを変更 3. ng serveの実行（オプション指定） cloud9上でのserve Localとcloud9の比較 開発環境 ng serveでAPが動作する場所 Local端末 localhost(ローカルの端末上) cloud9 実態はAWSのEC2インスタンス(仮想サーバー) cloud9上でserveを実行しても、EC2インスタンス上でAPが動きます いつものようにlocalhostを見ても、WEB APを確認できるはずが無いわけです そこでCloud9のAPの画面を見るにはPreviewという機能を使用します Preview トップの画像の様にcloud9の画面の一枠にweb APの画面を表示できます cloud9でpreviewにAPの画面を表示する為に必要なこと portの指定(8080) ホストの指定 PreviewのURLを指定します disableHostCheck 1. previewの表示 上部タブから”Preview”を選択後”Preview Runnig Application”を選択するとCloud9上に表示できます PreviewのURL欄を控えてください 2. angular.jsonファイルを書き換えてポートを変更 cloud9の場合はportを8080に設定する必要があります 設定せずとも”–port 8080”を毎回オプションとして付ける手もあります123456&quot;serve&quot;: { &quot;builder&quot;: &quot;@angular-devkit/build-angular:dev-server&quot;, &quot;options&quot;: { &quot;browserTarget&quot;: &quot;NgTororo:build&quot;, &quot;port&quot;: 8080 //ここを追加 } 3. ng serveの実行（オプション指定）1ng serve --disableHostCheck --public-host &lt;cloud9のPreviewのURL&gt; 以上です。このようなつまらないポイントで”半日失いました”は可哀そうなので、cloud9のビギナーを見かけたら教えてあげてください。","link":"/2020/04/14/Cloud9-x-Angular-cloud9%E3%81%A7ng-serve%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6AP%E3%81%AE%E7%94%BB%E9%9D%A2%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/"},{"title":"Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理)","text":"こんにちは。今回はFirebase Hostingについての解説です。AngularとFirebaseの連携手法については以前に詳しくまとめた記事をご覧ください Cloud9 x Angular x FirebaseでAP開発（導入編） 基礎知識 AP公開までの手順 本記事の前提 事前の設定作業：Firebase PJの初期化 APをFirebase Hostingへ公開 APをビルドして再度deploy 以降の開発の流れ Firebase Console解説(Hosting関連) Hosting ダッシュボード 使用状況 使用料と請求額 まとめ おまけ: firebase.jsonの中身 基礎知識 Firebase Hostingとは Googleが提供しているBaaSであるFirebaseのサービス群の一つ Hostingサービス 開発したアプリケーションをを保持してWEBに公開してくれます 同様の機能を持つ競合サービス Amazon S3 バックエンドにAWSを用いるのであれば基本的にこちら Github Pages 本サイトはこれを使ってホスティングしています 利用方法は以下に詳しくまとめています [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 設定後はdeployコマンド一撃でサービスを公開可能です 1firebase deploy AP公開までの手順本記事の前提 以下の作業が完了済み Angular PJの生成 1ng new &quot;ap-name&quot; Firebase PJの作成 Firebase Consoleでする作業 Firebase CLIの導入 1npm install -g firebase-tools 開発環境からのFirebase Login 1firebase login ここまでの作業の詳細は以前の記事をご確認ください Cloud9 x Angular x FirebaseでAP開発（導入編） 事前の設定作業：Firebase PJの初期化 以下のコマンドでFirebase PJを初期化可能です 1firebase init 利用するリソースを選択 上記を実行すると以下のように選択欄が表示されます 今回はHostingだけを選択(スペース) ⇒ Enter1234567? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices. ◯ Database: Deploy Firebase Realtime Database Rules ◯ Firestore: Deploy rules and create indexes for Firestore ◯ Functions: Configure and deploy Cloud Functions❯◉ Hosting: Configure and deploy Firebase Hosting sites ◯ Storage: Deploy Cloud Storage security rules ◯ Emulators: Set up local emulators for Firebase features Hosting Setup deployコマンドの実行時に公開したいディレクトリを尋ねられます publicのまま変更無し ⇒ Enter 変更 ディレクトリのパスを入力 ⇒ Enter Angularの場合の設定 publicディレクトリを指定 dist/angular-ap-name Angularでビルドを実行した際に、生成されたファイルが格納されるディレクトリのことです ここをちゃんと設定しないと後にハマるので気を付けましょう single-page appとして設定 y AngularはSingle Page Applicationであるためyes 出力 123456✔ Wrote dist/firebase-sample/index.htmli Writing configuration info to firebase.json...i Writing project information to .firebaserc...✔ Firebase initialization complete! firebase.jsonというファイルが生成されていれば成功です APをFirebase Hostingへ公開 deployコマンド Firebase PJのデフォルトの Hosting サイトにデプロイされます1firebase deploy deployを実行 1firebase-sample (master) $ firebase deploy 出力 123456789101112131415=== Deploying to 'fir-sample-3a2dc'...i deploying hostingi hosting[fir-sample-3a2dc]: beginning deploy...i hosting[fir-sample-3a2dc]: found 10 files in dist/firebase-sample✔ hosting[fir-sample-3a2dc]: file upload completei hosting[fir-sample-3a2dc]: finalizing version...✔ hosting[fir-sample-3a2dc]: version finalizedi hosting[fir-sample-3a2dc]: releasing new version...✔ hosting[fir-sample-3a2dc]: release complete✔ Deploy complete!Project Console: https://console.firebase.google.com/project/fir-sample-3a2dc/overviewHosting URL: https://fir-sample-3a2dc.firebaseapp.com Deploy completeと出れば成功です デフォルトのホスティングサイトのURLは以下のように規定されます projectID.web.app projectID.firebaseapp.com 今回のHosting URLにアクセスしてみます 1Hosting URL: https://fir-sample-3a2dc.firebaseapp.com 空のままデプロイした場合のデフォルト画面 まだAPをビルドしていなければこのように表示されます dist/angular-ap-nameの中が空であるため 実際にAPをビルドしてからdeployして変化を確認しましょう APをビルドして再度deploy Angular PJをビルド dist/my-project-nameディレクトリが生成されます1$ ng build --prod 出力 123456789101112firebase-sample (master) $ ng build --prodGenerating ES5 bundles for differential loading...ES5 bundle generation complete.chunk {2} polyfills-es2015.5b10b8fd823b6392f1fd.js (polyfills) 36.2 kB [initial] [rendered]chunk {3} polyfills-es5.8e50a9832860f7cf804a.js (polyfills-es5) 127 kB [initial] [rendered]chunk {0} runtime-es2015.c5fa8325f89fc516600b.js (runtime) 1.45 kB [entry] [rendered]chunk {0} runtime-es5.c5fa8325f89fc516600b.js (runtime) 1.45 kB [entry] [rendered]chunk {1} main-es2015.3b7f37fdd4f3fcb1925c.js (main) 245 kB [initial] [rendered]chunk {1} main-es5.3b7f37fdd4f3fcb1925c.js (main) 293 kB [initial] [rendered]chunk {4} styles.09e2c710755c8867a460.css (styles) 0 bytes [initial] [rendered]Date: 2020-04-15T15:05:31.948Z - Hash: e637fe92a3f41b4587c8 - Time: 21540ms Angular PJ直下にdistディレクトリが生成されます 1234firebase-sample (master) $ lsangular.json dist karma.conf.js package-lock.json tsconfig.app.json tslint.jsonbrowserslist e2e node_modules README.md tsconfig.jsondatabase.rules.json firebase.json package.json src tsconfig.spec.json もう一度deploy 1firebase-sample (master) $ firebase deploy 出力 123456789101112131415=== Deploying to 'fir-sample-3a2dc'...i deploying hostingi hosting[fir-sample-3a2dc]: beginning deploy...i hosting[fir-sample-3a2dc]: found 10 files in dist/firebase-sample✔ hosting[fir-sample-3a2dc]: file upload completei hosting[fir-sample-3a2dc]: finalizing version...✔ hosting[fir-sample-3a2dc]: version finalizedi hosting[fir-sample-3a2dc]: releasing new version...✔ hosting[fir-sample-3a2dc]: release complete✔ Deploy complete!Project Console: https://console.firebase.google.com/project/fir-sample-3a2dc/overviewHosting URL: https://fir-sample-3a2dc.firebaseapp.com Hosting URLを確認 アプリの画面が反映されている 今回は特にAPを弄っていないので、ng newで生成したAPの初期画面が表示されています 以降の開発の流れ APを改修 ローカルで確認1ng serve --open APをビルド1ng build --prod 本番環境へデプロイ1firebase deploy Firebase Console解説(Hosting関連)Hosting ダッシュボード 以下のように カスタムドメインの追加 本格的なサービスのリリースに向けてドメインを変えたい場合は、こちらの画面で簡単に登録可能です ドメインの取得 簡単に取得できるサービスを二つ紹介しておきます Google Domain お名前.com 費用優先ならこれ Google Domains利用イメージ 取得したいドメイン名で検索すると、利用可能なドメインと料金が出ます。以下の例では、.comはすでに使われているようです。 使用状況 以下のように時系列で使用状況がビジュアライズされます 使用料と請求額 上限と現在の使用料が分かります 無料のSparkプランでは”10GB/month”が上限になります- 重要なポイント - ビジネスをスモールスタートさせる段階では 容量について 10 GB = 10487560 KB 現在の使用料＝リクエスト×110485760 他のプランと料金を比較する際は以下をご確認ください Firebase 料金プラン プランの変更 まとめ今回の解説は以上になります。 クラウドの最大のメリットはビジネスの規模に応じてPlatformを柔軟にスケールできることです。 サービスの初期段階ではFirease HostingのSparkプランを使って無料でスモールスタートを切り、人気・収益を確保してから有料プランに移行というのが、スタートアップにありがちな手法です。 ここまででその手法を身に着けることができたと思います。良いアイデアを思いついたら是非Hostingを使って広告でもつけて公開してみましょう。淡々と学習するよりも、遥かにモチベーションが向上します。 追記：ng deployやangular-fireを使って、firebaseコマンドを使わずにデプロイする手法もあるようです Angular入門: デプロイ おまけ: firebase.jsonの中身 以下にデプロイの設定が記載されています Angularなら以下のようになっていればOK123456789101112firebase.json{ &quot;hosting&quot;: { &quot;public&quot;: &quot;dist/angular-pj-name&quot;, &quot;rewrites&quot;: [ { &quot;source&quot;: &quot;**&quot;, &quot;destination&quot;: &quot;/index.html&quot; } ] }}","link":"/2020/04/16/Firebase-Hosting%E5%AE%8C%E5%85%A8%E7%89%88-Angular%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%97%E3%81%9FSPA%E3%82%92%E7%84%A1%E6%96%99%E3%81%A7%E5%85%AC%E9%96%8B%EF%BD%9E%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5%E3%83%9C%E3%83%BC%E3%83%89%E3%81%A7%E8%B2%BB%E7%94%A8%E7%AE%A1%E7%90%86/"},{"title":"PCでDTM環境を構築 [Steinberg UR44C/Cubase ai]","text":"PCでDTM環境を構築するまでを解説します。InterfaceにはSteinberg UR44Cを採用しています。基本的にモバイル向けのCubasis leをiPadで使用していますが、リモートセッションサービスがPC対応のみであったため、備忘録的にまとめておきます。 1. Interfaceについて Steinberg UR-C マルチエフェクターで代用 2. 導入手順 TOOLS for UR-C インストール後の確認 Basic FX Suiteのアクティベーション Cubase AIのダウンロード 1. Interfaceについて PCにラインで音を取り込むにはインターフェイスが必要になります Steinberg UR-C Steinberg UR44Cを採用しました 採用ポイント Input×4 ＆ マイクプリアンプx4 複数の楽器とマイクを繋ぎ、人数分のヘッドホンに出力すれば、屋内でサイレントセッションが可能 元々↑をやりたくて買いました 価格 3万円ちょっとで手頃 今回の条件に当てはまる中で最安（他は5万以上） 更にInputを増やしたければ、予算を上げるかミキサーを買うしかないと思います もう少し節約したい場合 UR22C （17000円程度） InputとOutputが減りますが基本的にはほぼ同じ機器 USB 3.0（USB Type-C）対応 PCとiPad Proの両方で読み込めます Cubase le(モバイル用)とcaubase ai(PC用)のコードがついてくる Cubase 音楽制作ソフト 扱いやすく機能が一通り揃っているので初級者におすすめらしい 本来は購入する必要があります(6000円程度) ループバック機能により、動画配信も可能 周辺機器について インターフェイス ⇔ PC間の接続ケーブル 製品にUSB-C ⇔ USB3.0のケーブルがついてきます USB-C ⇔ USB-Cケーブルはついてきません なので、USB-CポートのみのMacBookやiPadの場合は以下の何れかの対処が必要です ハブで変換する USB Type C ハブ USB C ハブ USB3.0 ハブ 6in1 Type-c hubを使ってます USB-Cケーブルを購入 Outputの端子用のアダプタ ステレオ標準プラグ(楽器のシールドを刺す穴)なので、ステレオミニプラグ（イヤホンの端子）はそのままでは刺せません わざわざ対応した端子の機器を買わなくても、変換アダプタ(2つで700円程度)を使えばOKです UGREEN ステレオミニプラグ（メス）⇒ステレオ標準プラグ（オス） 変換アダプタ 金メッキ 3.5mm ⇒ 6.35mm アンプヘッドホン変換 (2個) マルチエフェクターで代用 マルチエフェクターの中にはインターフェイスとしての機能がついているものもあります ZOOMのG3やB3等 ポイント CubaseのようなDAWソフトはついてこないので別途購入が必要 Inputが少ない なので、以下に当てはまる方はインターフェイスを買った方が良いです 複数の楽器やマイクを繋げたい DAWソフトを利用したい 2. 導入手順 PCとSteinberg UR-CでDTM環境を構築する為に必要な作業は以下の三点です TOOLS for UR-Cのインストール Basic FX Suiteのアクティベーション ここまででPCで扱うDAWツールは基本使えます Cubase AI (DAW)のダウンロード TOOLS for UR-C 公式サイトからから入れます TOOLS for UR44 V2.2.1 - 278 MBを選択 zipファイルがインストールされます USBを全部外す zipファイルを開いてsetup.exeを実行 指示にしたがって次へを押していけばOK 以下が出たら完了 インストール後の確認 steinbergと付属のUSBで接続 電源はUSBCからではなく、アダプターに設定してください デバイスマネージャーを開く オーディオの入力及び出力にsteinbergが表示されてればOK PCがインターフェイスからの接続を読み込めるようになりました Basic FX Suiteのアクティベーション 先ほど一緒にインストールした上記にアクティベーションコードを入れて、ライセンスを入れる必要があります eLicencer Control Centerを開く アクティベーションコードを入力を選択 Steinbergを購入した際の説明書に以下の紙が入っています ESSENTIAL PRODUCT LICENSE INFORMATION ここに書いてあるコードを入力 以下の画面が表示されます ライセンスをダウンロード 以上で完了です ここまででPCへのライン音源の取り込みは可能です DAW以外にもリモートセッションツール等で遊べるようになります [SYNCROOM/NETDUETTO] YAMAHAのリモートセッションツールを試してみた Cubase AIのダウンロード SteinbergのWEBサイトでアカウント登録する必要があります 詳細はサイト内に詳しくまとまっています ダウンロードの際にコードが必要になります steinbergの説明書についている以下の紙に記載されています CUBASIS AI DOWNLOAD INFORMATION","link":"/2020/04/19/PC%E3%81%A7DTM%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89-Steinberg-UR44C-Cubase-ai/"},{"title":"[SYNCROOM/NETDUETTO] YAMAHAのリモートセッションツールを試してみた","text":"先日4/6にYAMAHAより新しい遠隔合奏サービス「SYNCROOM」が発表されました。6月～のリリースに備えて、既に公開中のβ版: NET DUETを使ってみます。（仕様はほぼそのままなので慣れとくといいかも） YAMAHAの遠隔セッションサービス（SYNCROOM/NETDUETTO） SYNCROOM 6月頃より正式リリース 無料 超低遅延 0.02秒（20msec）程度らしい ZOOM等のサービスでは0.5秒以上はズレが生じます CD音質の通信 非圧縮もしくはロスレスの16bit/48kHz 参考 コロナ禍で苦しむミュージシャンの救世主となるか？ヤマハがネット越しのセッションツール、SYNCROOMをリリースする背景 NETDUETTO 上記のβ版で公開中（※2020/04時点） 無料 接続可能な人数 一つのルームに5人まで 2つのルームを繋ぐことで最大10人まで SYNCROOMとの差分 予定されている追加機能 メトロノーム機能 レコーディング機能 ユーザ登録 利用条件 デバイス PC (iPad Proでは無理でした) SYNCROOMでタブレットにも対応してくれたら嬉しいですが、当分無理そう OS macOS 10.15 Catalina以降 Windows 10(64bit) ネット回線 基本的に光回線前提 NURO光等 softbank光やDOCOMO光を利用している場合 料金変更無しで追加申請可能な回線強化の手段があるらしい（熟練者談） できれば有線LAN WiFiでもできますが、LANケーブルを刺せるPCがあるとベター WiFi 6なら無線でも大丈夫かも？ モバイルの5Gのように、WiFiも最近6世代目になり高速化しました セッティング ざっくりイメージ 機材 インターフェイス 楽器からのライン音源をPCに取り込むにはインターフェイスとPC側で読み込む為のドライバーのインストールが必要です 初級者はSteinbergの以下のどちらかでOKだと思います Steinberg UR22C：￥17000ぐらい Steinberg UR44C：￥27000ぐらい 使用しているSteinbergのURシリーズについては、別記事で初期設定の手順をまとめておきました PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] Outputの端子 ステレオ標準プラグ(楽器のシールドを刺す穴)なので、ステレオミニプラグ（イヤホンの端子）はそのままでは刺せません 安めの変換アダプタ(2個で700円程度)を買いました UGREEN ステレオミニプラグ（メス）⇒ステレオ標準プラグ（オス） 変換アダプタ 金メッキ 3.5mm ⇒ 6.35mm アンプヘッドホン変換 (2個) マルチエフェクターの中にはインターフェイス機能が付随したものもあるので、そちらで代用してもOK 有線LAN WiFiで代用可能ですが遅延します。1000円程度なので有線LANも準備しておきましょう 以下を使用しています Linkinperk CAT8 LANケーブル 2m 40Gbps 2000MHz 超高速 40Gbps 2000MHzでほぼ最速です Portは有線LANを指す穴です 家のコンセントのどれかに必ずあるので、探してみてください ここからネットワークに接続できます 機材が準備できたら、早速PCにNETDUETTOを導入してみましょう NET DUET導入手順Download YAMAHAのNETDUETTOラボから自身のPCのbit数に合わせてダウンロード SYNCROOMから64bit対応に限定されるらしいです ダウンロードしたzipファイルを開くとこんな感じ インストール インストーラーを起動 次へを押していきます インストール先 1C:\\Program Files\\Yamaha\\NETDUETTO2\\ 以下のようにインストールが始まります 数分でインストールできます 初期設定 アイコンを開きます チュートリアル画面が出てきます 次へを押すと、以下の画面がでます ”ASIOに対応したオーディオデバイスが見つかりました”と出ればOK 事前にインターフェイスの準備が必要です 今回はsteinberg ur44cからUSBでPCに接続しています 別記事で解説します 入力の設定 遅延が無いかモニタリングできます バッファサイズの設定 コントロールパネルを押すと自分が利用しているインターフェイスに応じたドライバの設定が出てきます ”Input Latency”を見ながら遅延が低くなるよう設定してみました ニックネームとアイコンを設定 以上で完了です 使い方使い方はシンプルです 機材をセッティング インターフェイスや楽器をPCに繋いでおきます 適当に楽器を弾いて、”インプット”から出力を確認しましょう ここに出てこない場合はインターフェイスのドライバーが入っていないかもしれません ルームに集まる(↓のどちらか) ルームを作る 他人が作ったルームに入る ルームは以下のように表示されます セッション画面 詳細表示を押すと、各メンバの通信状況や遅延状況を確認可能です Twitter連携 “Twitter連携”を押すと以下のようにウィンドウが出ます 認証 出てきたPINコードを入力 アイコンとユーザ名が出ます","link":"/2020/04/19/YAMAHA%E3%81%AE%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%84%E3%83%BC%E3%83%ABSYNCROOM%E3%81%AE%E3%83%99%E3%83%BC%E3%82%BF%E7%89%88%EF%BC%9ANETDUET%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"[Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する","text":"今回はAngular開発におけるComponentの自動生成手法について解説します。アプリの基本的な画面はこの手法を用いれば、コードを書くまでもなく高速で開発できます。サービスとしての独自性の無い単純作業は極力自動化しましょう。 Angular Schematicsとは？ 準備 Angular PJを生成 Schematicsをinstall 画面表示用のComponentを生成 ナビゲーションを自動生成 画面に反映 1. top componentに埋め込む 2. topをルーティングで指定 3. Localhostで画面への反映を確認 自動生成されるコードの解説 参考 Angular Schematicsとは？ Schematicsの機能 カスタマイズされたComponentをコマンドで自動生成 ありがちなUIは大抵これで自動生成できます 今回は例として画面のサイズに応じて自動的に開閉するサイドナビとツールバーでできたナビゲーションを自動生成します モジュールの追加 設定の変更 例えば、Angular CLIの以下のコマンドの処理はSchematicsで定義されています ng generate ng add @angular/cdkと@angular/materialに含まれています Angular CLIのng generateやng add といったコマンドの処理はAngular Schematicsによって定義されている 自分で作ることもできます 既存のSchematicsを拡張することも可能 実行コマンド 1ng generate @angular/material:&lt;schematics-name&gt; &lt;component-name&gt; 自作可能 ありがちな構成を用意しておけば、サービスを高速で量産できます わざわざ手順書を残すよりも遥かに効率的です 準備Angular PJを生成生成済みであればここはスルーしてください APの雛形を作成1ng new 'sample-ap' Angular PJの初期画面はこんな感じです1ng serve --open Angularの初期画面をまっさらにします src/app/app.component.html をrouter-outletだけを残して削除1&lt;router-outlet&gt;&lt;/router-outlet&gt; Schematicsをinstall ng addコマンドで npm installを使って入れると設定ファイルを弄る必要が出たりします まずはAngular Materialを入れます1ng add @angular/material 出力 好きなthemeを選択 ひとまずIndigo/Pinkにします 他も基本yesでOKです123456789101112/firebase-sample (master) $ ng add @angular/materialInstalling packages for tooling via npm.Installed packages for tooling via npm.? Choose a prebuilt theme name, or &quot;custom&quot; for a custom theme: ❯ Indigo/Pink [ Preview: https://material.angular.io?theme=indigo-pink ] Deep Purple/Amber [ Preview: https://material.angular.io?theme=deeppurple-amber ] Pink/Blue Grey [ Preview: https://material.angular.io?theme=pink-bluegrey ] Purple/Green [ Preview: https://material.angular.io?theme=purple-green ] Custom ? Set up HammerJS for gesture recognition? Yes? Set up browser animations for Angular Material? YesUPDATE package.json (1437 bytes) cdkをinstall1ng add @angular/cdk 出力 packege.jsonの中身を自動で改修してくれます12Skipping installation: Package already installedUPDATE package.json (1437 bytes) 画面表示用のComponentを生成 top1\\src\\app&gt; ng g component top ナビゲーションを自動生成 実行 1\\src\\app&gt; ng g @angular/material:navigation 出力 123456$ ng generate @angular/material:navigation main-navCREATE src/app/navi/navi.component.scss (193 bytes)CREATE src/app/navi/navi.component.html (938 bytes)CREATE src/app/navi/navi.component.spec.ts (1234 bytes)CREATE src/app/navi/navi.component.ts (583 bytes)UPDATE src/app/app.module.ts (1126 bytes) src/appの配下にmain-navコンポーネントが自動生成されています 12345678src\\app\\main-nav&gt; lsMode LastWriteTime Length Name---- ------------- ------ -----a---- 2020/04/23 14:59 936 main-nav.component.html-a---- 2020/04/23 14:59 193 main-nav.component.scss-a---- 2020/04/23 14:59 1256 main-nav.component.spec.ts-a---- 2020/04/23 14:59 598 main-nav.component.ts 画面に反映1. top componentに埋め込む src\\app\\top\\top.component.html app-component_nameで要素を作るだけで入れ子にできます 1&lt;app-main-nav&gt;&lt;/app-main-nav&gt; &lt;!--main-naviコンポーネントを参照--&gt; 2. topをルーティングで指定 画面起動時にtopコンポーネントが表示されるように設定 src\\app\\app-routing.module.ts 123456//routeを定めるコンポーネントをimportimport { TopComponent } from './top/top.component';const routes: Routes = [ {path: '', redirectTo: '/top', pathMatch: 'full'}, //デフォルトのパス。AP起動時 {path: 'top', component: TopComponent }, // top画面のパスを定義 3. Localhostで画面への反映を確認 APを起動 1ng serve --open 以下のようにナビが表示されます ツールバーには自動的にAngular-PJ名が入ります サイドナビの表示は画面サイズに応じて変化 大 デフォルトで表示 小 デフォルトでは非表示/バーガーアイコンの押下で開閉 Windowを狭めてみる バーガーアイコンを押下 Menuが表示されます あとは各画面を生成してサイドナビのMenuから飛べるようにすれば、アプリの雛形ができます この程度の画面はSchematicsを使って3分で実装しましょう 初級者が自力で書くと、ここまででもだいぶ工数を食います 自動生成されるコードの解説 Schematicsで自動生成したデフォルト main-nav.component.html angular materialのmat-toolberやmat-sidenaviが使われています WEBアプリだと毎回書きがちなパターン1234567891011121314151617181920212223242526272829303132&lt;mat-sidenav-container class=&quot;sidenav-container&quot;&gt; &lt;!--サイドナビ--&gt; &lt;mat-sidenav #drawer class=&quot;sidenav&quot; fixedInViewport [attr.role]=&quot;(isHandset$ | async) ? 'dialog' : 'navigation'&quot; [mode]=&quot;(isHandset$ | async) ? 'over' : 'side'&quot; [opened]=&quot;(isHandset$ | async) === false&quot;&gt; &lt;mat-toolbar&gt;Menu&lt;/mat-toolbar&gt; &lt;mat-nav-list&gt; &lt;!--ここをrouterLink=&quot;/pass-name&quot;で各画面に飛べるように改修--&gt; &lt;a mat-list-item href=&quot;#&quot;&gt;Link 1&lt;/a&gt; &lt;a mat-list-item href=&quot;#&quot;&gt;Link 2&lt;/a&gt; &lt;a mat-list-item href=&quot;#&quot;&gt;Link 3&lt;/a&gt; &lt;/mat-nav-list&gt; &lt;/mat-sidenav&gt; &lt;!--ヘッダー--&gt; &lt;mat-sidenav-content&gt; &lt;mat-toolbar color=&quot;primary&quot;&gt; &lt;!--sidenavの開閉用ボタン--&gt; &lt;button type=&quot;button&quot; aria-label=&quot;Toggle sidenav&quot; mat-icon-button (click)=&quot;drawer.toggle()&quot; *ngIf=&quot;isHandset$ | async&quot;&gt; &lt;mat-icon aria-label=&quot;Side nav toggle icon&quot;&gt;menu&lt;/mat-icon&gt; &lt;/button&gt; &lt;span&gt;scrab-for-aws&lt;/span&gt; &lt;/mat-toolbar&gt; &lt;!-- Add Content Here --&gt; &lt;/mat-sidenav-content&gt;&lt;/mat-sidenav-container&gt; Tips ヘッダーに複数の要素を表示して、画面サイズに応じて配置を変化させたい場合 要素の間に以下を挟めばレスポンシブな余白ができます1&lt;span style=&quot;flex:auto;&quot;&gt;&lt;/span&gt;&lt;!----余白--&gt; この後の作業イメージ（画面遷移の実装） 各画面用のコンポーネントを生成1ng g component &lt;component-name&gt; app-routing.module.tsでパスを設定 main-nav.component.htmlを改修 各ボタンのrouterLinkに各Componentのパスを設定 参考 公式 Schematics Schematicsの作り方 Advent Calender 2018 Schematicsを作ってみよう Angular CLI 6.0.0のng addとSchematicsを使ってAngularMaterialを簡単セットアップ","link":"/2020/04/23/Angular-Schematics-%E9%96%8B%E9%96%89%E5%8F%AF%E8%83%BD%E3%81%AA%E3%82%B5%E3%82%A4%E3%83%89%E3%83%8A%E3%83%93%EF%BC%86%E3%83%84%E3%83%BC%E3%83%AB%E3%83%90%E3%83%BC%E3%82%923%E5%88%86%E3%81%A7%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/"},{"title":"描画ツールまとめ [draw.io/Cloud Craft/Mind Node/plantUML]  Excel好きの残念なSE/コンサルにならない手段","text":"個人的にイケてると思う描画ツールのまとめです。システム構成図や業務フロー図を何故かExcelで作る風潮があるようですが、そもそも描画ツールではないので、微妙な絵しか起こせません。以下のツールを教えて、レガシーな現場をあなたの手で改善しましょう。新人であれば最初の小さな成果になるかもしれません。（厳しい上司に当たると、Excelを使うだけで情弱扱いされます） 1. 描画ツール一覧 2. 各ツールについて 2.1. draw.io 2.2. cloud Front 2.3. PlantUML 2.4. MindNode 2.5. MindMaster 1. 描画ツール一覧 UML(ex. システム構成/クラス図/シーケンス図…) draw.io cloud Front PlantUML ツリー MindNode MindMaster 2. 各ツールについて2.1. draw.io draw.io WEBブラウザベースの描画ツール Googleアカウントで運用でき、ローカル/Google Drive/Github等にデータを保存可能 用途：万能 フローやシステム構成等の大抵の図は全てこれで作成可能です テンプレートの例 FlowChartやクラス図 Cloudのアーキテクチャ VS Code用のプラグインもあります Draw.io VS Code Integration 2.2. cloud Front cloud Front WEBベースの描画ツール 用途 クラウドアーキテクチャのシステム構成図作成 AWSに特化しており、draw.ioのようにGCPのテンプレはありません AWS上の環境情報のリアルタイム取得（有料） 構成図の自動描画 構成や設定情報の表示 見積もりの自動生成 AWSを活用しているチームであれば今すぐ導入を勧めます 以下のような図を数分で作成できます リアルタイムデータの確認機能 任意のコンポーネントをクリックすると、現在のコンフィグとコストを確認できます。AWS Web Consoleに直接ジャンプして、Liveリソースとタグを確認できます Collaborate機能 ダイアグラムやAWSリソースに直接ドキュメントを追加可能です。チーム全体で図をオンラインで共有・編集したり、ドキュメント、Wiki、プレゼンテーションにエクスポートしたりすることができます。 運用費の見積もりは上記のように出せます。 2次元の図も作成可能です 優秀なエンジニアのドキュメントをみると、これかdraw.ioで作っている方が多いです pptで綺麗に作るとだいぶ時間を食うので避けましょう 現実の環境から図を自動生成することまでできます 公式説明訳12345公開してすぐに古くなってしまう静的なドキュメントを作成する時間を無駄にしないでください。Cloudcraft Liveは、AWS環境のすべてのサービス関係を瞬時に分析し、完全なシステムアーキテクチャ図をリバースエンジニアリングします。強力な自動レイアウト機能や高度なAWSアカウントスキャン機能もAPIとしてご利用いただけます 有料版について 単なる構成図の描画であれば、無料版で可能 AWSとAPI連携して情報を取得するのは有料 2.3. PlantUML PlantUML 用途 コードによるUMLの作成 draw.ioと同様に大抵の図に対応可能 コーディングに慣れた上級者向けではありますが、テキストなのでGitで差分管理可能 PlanUMLの実行には以下のインストールも必要です Java Graphviz 基本的にVS Codeにプラグインを入れて使います Visual Studio MarketplaceからInstall 書き方 PlantUML Cheat Sheet 2.4. MindNode MindNode iPad用のアプリ 用途 ツリー状の情報のまとめ アイデアの整理によく使っています スキルマップを5分程度で整理した例 2.5. MindMaster MindMaster MindNodeのWEB版だと思ってください downloadしてAPとしても利用可能です 用途 MindNodeと同様 以下の様にテンプレを選択して利用を開始できます pptやExcelで必死にレイアウトを調整する手間は 今回の解説は以上です。知っておくだけで生産性が向上するものが多いので、是非同僚に教えて上げてください。良いツールを見つけたら追記します。お勧めがあれば教えて頂けると嬉しいです。","link":"/2020/05/15/%E6%8F%8F%E7%94%BB%E3%83%84%E3%83%BC%E3%83%AB%E3%81%BE%E3%81%A8%E3%82%81-draw-io-Cloud-Craft-Mind-Node-plantUML-Excel%E5%A5%BD%E3%81%8D%E3%81%AE%E6%AE%8B%E5%BF%B5%E3%81%AASE-%E3%82%B3%E3%83%B3%E3%82%B5%E3%83%AB%E3%81%AB%E3%81%AA%E3%82%89%E3%81%AA%E3%81%84%E6%89%8B%E6%AE%B5/"},{"title":"Github入門 ～入社初日の完全な素人でも分かる優しい説明～","text":"今回はGithubというツールについて解説します。学生や新入社員等、これからアプリ開発を始める方が初めに覚えるツールなのですが、専門用語を並び立てた説明だらけで戸惑う方が多いため、極力丸めた言葉で優しく書きました。 Githubはエンジニアに取っての読み書きのようなものです。当然の前提知識として暗黙知にされることが多く、アプリ開発を学ぶ中では必ず使うシーンがあります。あくまで作業を楽にするための便利なツールなので、食わず嫌いをせずに早めに覚えましょう。 1. Githubとは 2. Githubの利用に必要な準備 2.1. アカウントの作成 2.2. IDEの準備 2.3. インストール 3. リポジトリ作成～クローン 3.1. リモートリポジトリの作成 3.2. リポジトリをLocal端末へのClone 4. 編集した内容をリモートに送るまで/基本コマンド 4. Githubを用いた分散開発 Cheat Sheat 関連記事 1. Githubとは 猫のようなキャラはマスコットのOctocatです ソースコード(アプリを構成するファイル群の事)を保管/共有する場所 アプリケーションはコードを書いたファイルの集まりで構成されます 複数人で開発するには、各メンバが編集したソースコードを集めて合体(mergeと言います)させ、最新版を保管しておく共通の場所が必要 バージョン管理ツール 時系列に沿ったソースコードの編集内容の変化を管理可能です 差分の視覚化 他メンバが開発した箇所がマーキングされて表示されます ソースを1行づつ見比べる手間を省略できます 任意のタイミングに戻せる 例えば、誤ってアプリを壊してしまった際に、直前のタイミングに戻せます コードレビュー（評価） Pull Requestという機能を利用すると、自身の編集内容と共にメンバーに確認依頼を飛ばせます 差分が一目で分かるため、レビューが効率的です 指摘箇所のコードとコメントをセットで登録でき、対話形式で解決できます 昔はExcelにレビュー表を作って一つ一つチェックしていたようです このファイルのXX行目の～～がと毎回書いて照らし合わせる作業は恐ろしく非効率的なのでやめましょう 連携機能 WEBhook Slack等のチャットツールに通知を飛ばす機能です Github Actions 自動化機能 例えば、Gitに編集したコードをアップした際に本番環境（アプリが動くサーバー等）に自動的に送ってくれたりします（デプロイという作業） ある程度開発に慣れたら使ってみましょう CI/CDやDevOpsというワードと一緒に勉強してみてください 2. Githubの利用に必要な準備 まずはアカウントを作成して、自分のPC上でGitのコマンドを実行できるようにインストールする必要があります 2.1. アカウントの作成 gitubでアカウント登録を行いましょう 必要事項を入力してSign up 通知メールから承認 2.2. IDEの準備 開発を行うにはIDEというものが必要です IDEは以下の二つの要素でできています エディター コードを編集する場所 CLI コマンドを打つ場所 基本的にここでgithubを操作するコマンドを打つので、用意が必要です 以下をPCにインストールしましょう Visual Studio Code この記事もVS Codeで書いています 以降は上記のIDEのCLI(VS Codeの画面下部)にコマンドを打つという前提で説明を書きます 2.3. インストール 以下を参考にGithubをPCに入れましょう Gitのインストール 3. リポジトリ作成～クローン リポジトリとは ソースコードを格納する一つの箱のようなもの 基本的にアプリ単位で作成します これをGithub上と自分のPC上に対になる形で配置します(clone) 中身のファイルを編集して、コマンドで行き来させます ざっくりイメージ pullコマンドで自分のPCに持ってくる 編集 pushコマンドでGithubに返す 3.1. リモートリポジトリの作成 githubにログインして”New Repository”から作成してみましょう 3.2. リポジトリをLocal端末へのClone リポジトリ作成後の画面を開く “Clone or download”を押下 戻りのボタンです 出てきたURLを保存します 以下のコマンドをCLIで実行 Github上に作ったリポジトリが自分のローカル端末(PC)にコピーされます1git clone &lt;url&gt; ここまででGit ⇔ PC間で、データを行き来させることが可能になりました 4. 編集した内容をリモートに送るまで/基本コマンド基本的な流れを以下に示します Github上から最新のソースコードを取得 1git pull 開発 ファイルを開いて編集 リポジトリ生成時にReadme.mdというファイルができていると思います リポジトリの説明を書くファイル ここに開発のルール等をメモしてメンバと共有するのが一般的です VS Codeなら以下のコマンドで開けます1code &lt;ファイル名&gt; add: リモートに送るファイルを指定 厳密にはCommitに含めるファイルを指定1git add &lt;編集したファイル名&gt; commit: 編集の完了を宣言 commitのタイミング毎にバージョン管理がされます 好きなタイミングに戻れるようにこまめにcommitしましょう1git commit リモートに編集内容を送る ここで送られるのはcommitに含まれるファイルのみ1git push ここまでで、個人開発はできます。次は複数人が関わるパターンを勉強しましょう。ブランチという概念の理解が必要です。 4. Githubを用いた分散開発※続きは気が向いた時に書きます Cheat Sheat Git Cheat Sheat 関連記事 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github.comからGithubEnterpriseへの移行手順","link":"/2020/05/19/Github%E5%85%A5%E9%96%80-%E5%85%A5%E7%A4%BE%E5%88%9D%E6%97%A5%E3%81%AE%E5%AE%8C%E5%85%A8%E3%81%AA%E7%B4%A0%E4%BA%BA%E5%90%91%E3%81%91%E3%81%AE%E5%84%AA%E3%81%97%E3%81%84%E8%AA%AC%E6%98%8E/"},{"title":"[Angular入門] 環境構築～PJの開始/基本コマンド","text":"WEBアプリケーション開発に用いるフレームワークである、Angularの環境構築～アプリの雛形の生成までを解説します。Angularを使えば、Single Page Applicationと呼ばれるモダンなアプリを高速で開発することができます。例えば、GoogleやTwitter等のWEBアプリはこれで作られています。 1. Angular動作環境の準備手順 1.1. Node.jsのインストール 1.2. Angular CLIのインストール 2. Angularプロジェクトの作成~実行手順 2.1. Angularプロジェクトの作成 2.2. ビルドと実行 3. Angular関連のTips 1. Angular動作環境の準備手順1.1. Node.jsのインストール インストール済みであれば飛ばしてください Node.jsとは JavaScriptが動くために必要な土台のようなものです Angularで開発する際には、TypeScriptというJavaScriptの拡張版の言語でコードを書きます TypeScriptは最終的にJavaScriptに変換されて動くので、Node.jsが必須となります Node.js Download こちらから自身のOSに合ったものをダウンロードしてください ダウンロードしたnode-vX.XX.X-xXX.msiをダブルクリックして、インストールを開始します。下記画面が表示されるので、表示される内容に従いインストールを進めてください。 1.2. Angular CLIのインストール インストール 1npm i -g @angular/cli 正常にインストールされれば、ngコマンドを使用可能になります(ngはAngularの略称) ngコマンドを使うことで、一からコードを書かずにAPの一部を自動生成できます このように開発工数を短縮する為に使う便利な道具がフレームワークだと思ってください 2. Angularプロジェクトの作成~実行手順2.1. Angularプロジェクトの作成 以下のコマンドでアプリの雛形が生成されます12ng new &lt;sample-ap-name&gt;cd &lt;sample-ap-name&gt; Angualr APのディレクトリ構成 以下のセットが自動生成されます 2.2. ビルドと実行 次のserveコマンドで先の手順で生成したAP（の雛形）が起動します。1ng serve --open 上記コマンドの機能詳細 開発用のWEBサーバが起動し、作成したAPを起動 TypeScriptコンパイラを、監視モードに ソースコードが変更される度に、ブラウザを更新 –openはブラウザも同時に起動するオプション 3. Angular関連のTips VSCode拡張機能 おすすめ その他にも沢山あるので随時導入してください Angular公式のチュートリアル Angularよく使うコマンド","link":"/2020/05/20/Angular%E5%85%A5%E9%96%80-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%EF%BD%9EPJ%E3%81%AE%E9%96%8B%E5%A7%8B-%E5%9F%BA%E6%9C%AC%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/"}],"tags":[{"name":"Angular","slug":"Angular","link":"/tags/Angular/"},{"name":"”global is not defined”","slug":"”global-is-not-defined”","link":"/tags/%E2%80%9Dglobal-is-not-defined%E2%80%9D/"},{"name":"AWS SDK for JavaScript","slug":"AWS-SDK-for-JavaScript","link":"/tags/AWS-SDK-for-JavaScript/"},{"name":"Github.com","slug":"Github-com","link":"/tags/Github-com/"},{"name":"GithubEnterprise","slug":"GithubEnterprise","link":"/tags/GithubEnterprise/"},{"name":"GithubPages","slug":"GithubPages","link":"/tags/GithubPages/"},{"name":"cloud9","slug":"cloud9","link":"/tags/cloud9/"},{"name":"共同開発","slug":"共同開発","link":"/tags/%E5%85%B1%E5%90%8C%E9%96%8B%E7%99%BA/"},{"name":"テレワーク","slug":"テレワーク","link":"/tags/%E3%83%86%E3%83%AC%E3%83%AF%E3%83%BC%E3%82%AF/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Sitemap","slug":"Sitemap","link":"/tags/Sitemap/"},{"name":"google search console","slug":"google-search-console","link":"/tags/google-search-console/"},{"name":"Firebase","slug":"Firebase","link":"/tags/Firebase/"},{"name":"AngularFire","slug":"AngularFire","link":"/tags/AngularFire/"},{"name":"Augury","slug":"Augury","link":"/tags/Augury/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"AMP","slug":"AMP","link":"/tags/AMP/"},{"name":"hexo-generator-amp","slug":"hexo-generator-amp","link":"/tags/hexo-generator-amp/"},{"name":"Treetable","slug":"Treetable","link":"/tags/Treetable/"},{"name":"Disqus","slug":"Disqus","link":"/tags/Disqus/"},{"name":"WEB Page Dev","slug":"WEB-Page-Dev","link":"/tags/WEB-Page-Dev/"},{"name":"iPad Pro","slug":"iPad-Pro","link":"/tags/iPad-Pro/"},{"name":"DTM","slug":"DTM","link":"/tags/DTM/"},{"name":"Alexa","slug":"Alexa","link":"/tags/Alexa/"},{"name":"Google Cloud Shell","slug":"Google-Cloud-Shell","link":"/tags/Google-Cloud-Shell/"},{"name":"Cloud9","slug":"Cloud9","link":"/tags/Cloud9/"},{"name":"RPA","slug":"RPA","link":"/tags/RPA/"},{"name":"ショートカット","slug":"ショートカット","link":"/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/"},{"name":"ブラウザ型IDE","slug":"ブラウザ型IDE","link":"/tags/%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E5%9E%8BIDE/"},{"name":"Service","slug":"Service","link":"/tags/Service/"},{"name":"@ViewChild","slug":"ViewChild","link":"/tags/ViewChild/"},{"name":"Google Chrome","slug":"Google-Chrome","link":"/tags/Google-Chrome/"},{"name":"Netflix Party","slug":"Netflix-Party","link":"/tags/Netflix-Party/"},{"name":"Siri","slug":"Siri","link":"/tags/Siri/"},{"name":"iPhone","slug":"iPhone","link":"/tags/iPhone/"},{"name":"@Input","slug":"Input","link":"/tags/Input/"},{"name":"@Output","slug":"Output","link":"/tags/Output/"},{"name":"@EventEmitter","slug":"EventEmitter","link":"/tags/EventEmitter/"},{"name":"map()","slug":"map","link":"/tags/map/"},{"name":"filter()","slug":"filter","link":"/tags/filter/"},{"name":"mat-checkbox","slug":"mat-checkbox","link":"/tags/mat-checkbox/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"Hosting","slug":"Hosting","link":"/tags/Hosting/"},{"name":"Steinberg UR44C","slug":"Steinberg-UR44C","link":"/tags/Steinberg-UR44C/"},{"name":"Cubase ai","slug":"Cubase-ai","link":"/tags/Cubase-ai/"},{"name":"SYNCROOM","slug":"SYNCROOM","link":"/tags/SYNCROOM/"},{"name":"NETDUETTO","slug":"NETDUETTO","link":"/tags/NETDUETTO/"},{"name":"リモートセッション","slug":"リモートセッション","link":"/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3/"},{"name":"Schematics","slug":"Schematics","link":"/tags/Schematics/"},{"name":"Angular Material","slug":"Angular-Material","link":"/tags/Angular-Material/"},{"name":"draw.io","slug":"draw-io","link":"/tags/draw-io/"},{"name":"Cloud Craft","slug":"Cloud-Craft","link":"/tags/Cloud-Craft/"},{"name":"Mind Node","slug":"Mind-Node","link":"/tags/Mind-Node/"},{"name":"plantUML","slug":"plantUML","link":"/tags/plantUML/"}],"categories":[{"name":"Tool Tips","slug":"Tool-Tips","link":"/categories/Tool-Tips/"},{"name":"Serverless Application Dev","slug":"Serverless-Application-Dev","link":"/categories/Serverless-Application-Dev/"},{"name":"Firebase","slug":"Serverless-Application-Dev/Firebase","link":"/categories/Serverless-Application-Dev/Firebase/"},{"name":"AWS","slug":"Serverless-Application-Dev/AWS","link":"/categories/Serverless-Application-Dev/AWS/"},{"name":"Github","slug":"Tool-Tips/Github","link":"/categories/Tool-Tips/Github/"},{"name":"WEB Page Dev","slug":"WEB-Page-Dev","link":"/categories/WEB-Page-Dev/"},{"name":"Hexo","slug":"WEB-Page-Dev/Hexo","link":"/categories/WEB-Page-Dev/Hexo/"},{"name":"SPA (Angular)","slug":"Serverless-Application-Dev/SPA-Angular","link":"/categories/Serverless-Application-Dev/SPA-Angular/"},{"name":"SmartHome","slug":"SmartHome","link":"/categories/SmartHome/"},{"name":"DTM","slug":"SmartHome/DTM","link":"/categories/SmartHome/DTM/"},{"name":"Google Cloud Shell","slug":"Tool-Tips/Google-Cloud-Shell","link":"/categories/Tool-Tips/Google-Cloud-Shell/"},{"name":"RPA","slug":"Tool-Tips/RPA","link":"/categories/Tool-Tips/RPA/"},{"name":"Chrome 拡張機能","slug":"Tool-Tips/Chrome-拡張機能","link":"/categories/Tool-Tips/Chrome-%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD/"},{"name":"AWS Cloud9","slug":"Tool-Tips/AWS-Cloud9","link":"/categories/Tool-Tips/AWS-Cloud9/"},{"name":"Drawing","slug":"Tool-Tips/Drawing","link":"/categories/Tool-Tips/Drawing/"}]}