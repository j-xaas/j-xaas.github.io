{"pages":[],"posts":[{"title":"[AR.js Studio] NoCodeでWebARをGithub Pagesに公開する ","text":"AR.jsというフレームワークを用いたAR開発の一部をNoCodeで実現する、AR.js Studio（WEBサービス）について解説します。 AR.js自体の解説は↓にまとめました [AR.js x A-Frame] WebAR入門～マーカーベースで3Dオブジェクトを表示するAPを開発する～ 概要 AR.js Studio AR.jsを活用したWEB ARをコードを書かず、ブラウザ上の操作だけで実現できるサービス AR.js AR(拡張現実)をWebブラウザ上で実現する技術 [AR.js x A-Frame] WebAR入門～マーカーベースで3Dオブジェクトを表示するAPを開発する～ 作成したARはGithub PagesでWEBにそのまま公開することができます Github Pages 無料で静的コンテンツをホスティングするGithubの機能 詳細は以下にまとめました [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 利用に際して、Githubのアカウントが必要 通常のAR.jsと比較して制限があるため、エンジニアは使わなくても良さそう 通常のAR.jsと比較した制限 利用可能なデータの種類 3Dモデルのうち複数のデータ形式を利用できません（Ex .obj, .mtl…） 画像トラッキングベースのAR AR.js Studioではマーカーベースとロケーションベースに限定される データ容量 データ毎に最大の容量が定まっています 使用方法 AR.js Studioにアクセス https://ar-js-org.github.io/studio/ Project Typeを選択 Location-based 緯度経度を指定して、そこにARを置くタイプ 指定した場所にカメラを向けるとオブジェクトが表示される Marker-basede Marker（特定の白黒の画像）をカメラに写ると、その上にオブジェクトを表示する Marker-base TypeよりMarker-basedを選択 Start Buidingを押下 設定 Use a premade marker or upload your own マーカーをオリジナルのものに変更することができます デフォルトでは以下 変更する場合はupload imageから任意の画像をアップロード どのような画像がマーカーに向いているかは公式ガイドをご確認ください 基本白黒でシンプルなものが望ましい Choose the content ARで表示したいコンテンツをアップロードします 表示可能なコンテンツは以下 3D Object (.gltf, .glb .zip; max size 50MB) 通常のAR.jsであれば利用可能なobj形式が使えないのは微妙 Image (.jpg, .png, .gif; max size 15MB) Video (.mp4; max size 25MB) 今回は3Dオブジェクトをアップロードしてみます glbファイルを選択 Export the project 以下の二種の利用方法があります Publish on Github Gituhub Pagesに生成されたソースを公開 Download package ソースをLocalにダウンロード 利用シーン カスタマイズする場合 AR.js Studioの制限で書けない範囲を開発できます Github Pages意外でホスティングする場合 Github Pagesは10万アクセスで落ちる仕様なので、本格的な運用（大規模なアクセスが予想されるサイト）には向いていません AWSのS3やGCPのFirebase Hostingに載せることになると思います [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) Publish the project 公開するARのプロジェクト名を入力します そのままURLになるので注意 Publishを押下 Githubのアカウント連携の許可を求められます Authorize Github Pagesの自動生成を開始 自動生成が完了 URLでAPが公開されている状態 アクセスすればアプリが起動し、マーカーをカメラで写すことでARを表示できます 関連記事 [AR.js x A-Frame] WebAR入門～マーカーベースで3Dオブジェクトを表示するAPを開発する～ [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理)","link":"/AR-js-Studio-NoCode%E3%81%A7WebAR%E3%82%92Github-Pages%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B/"},{"title":"[AWS Budgets x SNS]でPJ毎の運用コストを管理/閾値超過で通知","text":"AWSにおけるコストの管理方法についてです。総コストはCloud Watchでも見れますが、PJ単位でコスト管理するにはAWS Budgetsでタグを使ってフィルタリングする方式が適しています。 AWS Budgestとは？ AWS Budgets カスタム予算を設定して、コストまたは使用量が予算額や予算量を超えたとき (あるいは、超えると予測されたとき) にアラートを発信できるサービス コストレポートで出力して、報告にそのまま使える PJのリソースの総コストをタグでフィルタリング まずは各リソースにタグを付ける PJタグを付与するルールをチーム内で設定 Console/ AWS Budgets Cost Explorer ここでコストの詳細を視覚的に確認できる データのグループ化やフィルタリングでPJ毎のリソースのコストを抽出する グループ化の条件/詳細/タグから絞る データのフィルタ機能で全体から絞る 予算作成 &amp; アラートを設定 AWS Budgets/予算を作成 予算を作成する 予算タイプ コスト予算 予算の設定 タグでPJで利用しているリソース群に絞る アラートの設定 しきい値 80%にしておく SNS Topicを経由するか、直でメール送信か選べる 今回は連絡電子メールにTeamsの開発チームのチャンネルのアドレスを設定 予算の確認 問題なければ”作成” 以上で、コストの閾値超過時点でTeamsに通知が飛ぶように設定できた。 参考関連記事 [AWS WAF] CloudFrontへアクセス可能なソースIPを社内イントラに制限 AWS CloudFront~S3のアクセス制御まとめ/署名付きURL s3 ssl化 https化(CloudFront/ACM/Route53) [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化","link":"/AWS-Budgets%E3%81%A7PJ%E6%AF%8E%E3%81%AE%E9%81%8B%E7%94%A8%E3%82%B3%E3%82%B9%E3%83%88%E3%82%92%E7%AE%A1%E7%90%86-%E9%96%BE%E5%80%A4%E8%B6%85%E9%81%8E%E3%81%A7SNS%E9%80%9A%E7%9F%A5/"},{"title":"[AWS] MFA(多要素認証)の有効化/IAM運用の基本","text":"AWS運用における基本的なセキュリティ対策として、強い権限をもつIAMユーザにはMFAの設定が必須です。 基礎知識 MFA(Multi-Factor Authentication)とは AWSのアカウント管理について MFA設定手順 設定後の認証の流れ 基礎知識MFA(Multi-Factor Authentication)とは MFA = 多要素認証 本人確認のための要素を複数、ユーザーに要求する認証方式 例えば、スマホのSMSでパスワードを送る方式や、一時的なパスワードを入力する方式を体験したことのある方が多いと思います 高いセキュリティを求められるサービスではデファクトになりつつあります 万が一、ユーザ名＆パスワードが流出しても悪用を防げることがメリット AWSではIAMユーザ毎にMFAを設定可能 AWSのアカウント管理について詳細な説明は省きますが、AWSのIAM運用の基本的な考え方を以下に示します。この辺りを理解するには、AWS Solution Architect等の資格の取得がお勧めです。 IAM運用の基本的な構成 Master Account 危険なので基本的に使用禁止 MFAを必ず有効化 AWS管理者用：Admin権限をもつIAMユーザ 危険なので常用はしない。使用するのはユーザ追加の時等。 MFAを有効化して、重要な作業を実施する際にだけ利用 作業者用：PJメンバのIAMユーザ より上位のIAMユーザを持っているメンバも基本的にこちらを使って作業 より大きな枠組みのマルチアカウント構成やOrganizationの話は省いておりますが、その辺りはAWS SysOps Administratorを取得すれば理解できるので興味があれば勉強してみるといいと思います。 MFA設定手順 前提 IAMを弄る権限を持つIAMユーザで設定 今回はスマホのMFAアプリを使います 社用スマホがあれば基本的にこの手法でOK AWSコンソールのサービス一覧より、IAMを選択 左のナビゲーションペインよりユーザーを選択 MFAを有効化したいユーザを選択 認証情報タブを選択 MFAデバイスの割り当ての右の”管理”を押下 次へ ”QRコードの表示”を押下 好きなMFAアプリでQRコードを読み込む 今回はMS Authenticatorを使いました ”2段階認証のセットアップ”からQRコードを読み込めます MFAアプリに表示されるワンタイムパスワードを入力 MFAの割り当てを押下 以下のように表示されればOKです 設定後の認証の流れ AWS Consoleのログイン画面にアクセス Account/IAM User名/Passwordを入力 連携させたMFAアプリに表示されるワンタイムパスワードを入力","link":"/AWS-MFA-%E5%A4%9A%E8%A6%81%E7%B4%A0%E8%AA%8D%E8%A8%BC-%E3%81%AE%E6%9C%89%E5%8A%B9%E5%8C%96-IAM%E9%81%8B%E7%94%A8%E3%81%AE%E5%9F%BA%E6%9C%AC/"},{"title":"[AWS CloudTrail] 証跡/内部監査用のログを貯める","text":"監査対策としてCloudTrailでログを取得する方式を解説します。 CloudTrailとは？ CloudTrailで内部監査用のログを貯める 証跡の作成 参考 関連記事 CloudTrailとは？ 単一のAWS アカウントにおける、全APIリクエストを記録するサービス 公式説明1CloudTrail を使用すると、AWS アカウントのイベントを表示できます。これらのイベントの記録を保持するには、証跡を作成します。証跡により、イベントメトリクスを作成し、アラートをトリガーして、イベントワークフローを作成することもできます。 また、AWS Organizations のマスターアカウントでログインすると、組織の証跡を作成することができます。 一つのAPではなく、アカウント全体の話 外向きよりも、内向きの監視が目的 AWSアカウントを共有する内部のIAMユーザの悪意を持った行動を抑えることができる 外部からのリクエストも記録できる デフォルト 90日間の記録は初めから有効 無料 永続的に保持する際には有料となる ”証跡情報の作成” S3 本番稼働でなければ、ひとまず対処しなくてもOK？ CloudTrail Insights 異常検知機能 公式説明1CloudTrailが異常なアクティビティを検出した場合、Insightsイベントはトレイルの送信先のS3バケットに配信されます。また、CloudTrailコンソールでInsightsイベントを表示すると、インサイトの種類やインシデント期間を確認することができます。CloudTrailのトレイルでキャプチャされる他のタイプのイベントとは異なり、インサイトイベントは、アカウントの通常の使用パターンとは大きく異なるアカウントのAPI使用状況の変化をCloudTrailが検出した場合にのみログに記録されます。 有料 Organizationのマスターアカウントを使えば、マルチアカウント運用でも組織の証跡を作成可能 監査チームとの連携に活用 CloudTrailで内部監査用のログを貯めるデフォルトでは90日間の情報しか確認出来ないため、証跡を作成してS3 bucketに貯める必要がある。 AWS Console/CloudTrail ダッシュボード/”証跡の作成”を押下 証跡の作成 使い方は2種類ありそう アカウント統一の証跡を作成 サービス毎に証跡を分ける 複数の認跡の作成では、追加コストが発生 リージョン毎に一つまでの証跡を作成しても無料であり、S3のみの課金となる。CloudWatch側でサービス毎のログは取るので、CloudTrailはアカウント統一の証跡を作成することにする 証跡情報の作成 証跡名 アカウント名-logsで設定してみる 証跡情報を全てのリージョンに適応 はい 管理イベント そのまま Insightsイベント いいえ 追加料金を避けるため CloudWatchからのAlartで充分だと考える データイベント S3, Lambda共に全てでOK ストレージの場所 新しいS3バケットを作成しますか？ はい S3バケット 適当に命名 bucket-for-cloudtrail-logs 詳細 ログファイルの検証 CloudTrailからログファイルを送信後に、編集/削除/変更がないか確認できる Cloud Configが必要だと考えていたが、利用せずとも改ざん対策できた タグ Own 証跡の作成者だけ登録 作成 以上で証跡とS3 Bucketが生成される。内部監査対策は基本的にこれだけでOK。 参考関連記事 [AWS WAF] CloudFrontへアクセス可能なソースIPを社内イントラに制限 AWS CloudFront~S3のアクセス制御まとめ/署名付きURL s3 ssl化 https化(CloudFront/ACM/Route53) [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化","link":"/AWS-CloudTrail-%E8%A8%BC%E8%B7%A1-%E5%86%85%E9%83%A8%E7%9B%A3%E6%9F%BB%E7%94%A8%E3%81%AE%E3%83%AD%E3%82%B0%E3%82%92%E8%B2%AF%E3%82%81%E3%82%8B/"},{"title":"AWS CloudFront~S3のアクセス制御まとめ/署名付きURL","text":"AWSのCloudFront x S3の構成におけるアクセス制御の手法について解説します ソースIPの絞り方 コンテンツへのアクセスを経路をCloudFrontに限定 CroudFrontのアクセス制限 CroudFront経由以外のS3バケットへのアクセスをシャットアウトする Distributionの作成時に設定 Distribution作成後に設定 CloudFront エッジキャッシュ内のファイルへのアクセス制限 署名付きURLでソースIPを限定する S3 Bucket Policyの記載例 参考 CroudFrontのアクセス制限 2ルートを考える必要があります ①CroudFrontにキャッシュされたコンテンツへのアクセス 署名付き URL または署名付き Cookie の使用が求められるように CloudFront を設定可能です。 以下の制限を指定 最終日時。この日時以降、URLが無効化 解約したユーザーずっとアクセス可能な状態を防げます (オプション) URL が有効になる日時。 (オプション) コンテンツへのアクセスに使用可能なコンピュータの IP アドレスまたはアドレス範囲 ②オリジンへの直接のアクセス CroudFrontを介した通信に限定する事が可能です オリジン S3やEC2等のコンテンツを実際にHostingしている場所のこと 詳細 プライベートコンテンツ供給の概要 CroudFront経由以外のS3バケットへのアクセスをシャットアウトする CroudFrontの大きな役割の一つが攻撃者とコンテンツの間の緩衝材となることです 直接S3へアクセス可能な状態では上記の効果を生めないため、基本的に遮断したほうが良いです Distributionの作成時に設定 Origin Settings Restrict Bucket Access Yesに設定 ⇒ CloudFront経由でのみ閲覧可能に絞る Grant Read Permissions on Bucket Yesに設定 ⇒ S3バケットのPolicyを自動で変更 Distribution作成後に設定 AWS Console/CroudFront 対象のDistributionを選択 Origins and Origin Groupsタブ 対象のOrigin Domainを選択肢てEditを押下 Restrict Bucket Access Yesに変更 Grant Read Permissions on Bucket Yesに設定 ⇒ S3バケットのPolicyを自動で変更 Yes, Edit バケットポリシーの変化を確認 以下が自動的に追記されていた123456789{ &quot;Sid&quot;: &quot;2&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: { &quot;AWS&quot;: &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity XXXXXXXXXXX&quot; }, &quot;Action&quot;: &quot;s3:GetObject&quot;, &quot;Resource&quot;: &quot;arn:aws:s3:::XXXXXXXXXX/*&quot;} 注意点 元々書いていたポリシーに追記される形式になるため、どちらもEffectで書かれていれば二通りの通信を許可することになります CloudFront エッジキャッシュ内のファイルへのアクセス制限 署名付き URL の使用 署名付きURLでソースIPを限定する カスタムポリシーを使用して署名付きURLを作成することでIPを制限できます (オプション) コンテンツへのアクセスに使用可能なコンピュータの IP アドレスまたはアドレス範囲。 ポリシーステートメントの例 任意のIPアドレスからのみディレクトリ内の全ファイルにアクセス可能 1234567891011{ &quot;Statement&quot;: [ { &quot;Resource&quot;:&quot;http://d111111abcdef8.cloudfront.net/training/*&quot;, &quot;Condition&quot;:{ &quot;IpAddress&quot;:{&quot;AWS:SourceIp&quot;:&quot;192.0.2.0/24&quot;}, &quot;DateLessThan&quot;:{&quot;AWS:EpochTime&quot;:1357034400} } } ] } S3 Bucket Policyの記載例アクセス制限内容 ソースIP SourceIpで定めた二点のみ アクセス経路 Principalで定めたCroudFrontディストリビューション経由のみ アクション GetObject＝読み込みのみ 12345678910111213141516171819202122{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;PublicReadGetObject&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: { &quot;AWS&quot;: &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity XXXXXXXX&quot; }, &quot;Action&quot;: &quot;s3:GetObject&quot;, &quot;Resource&quot;: &quot;arn:aws:s3:::xxxxxxxxxx/*&quot;, &quot;Condition&quot;: { &quot;IpAddress&quot;: { &quot;aws:SourceIp&quot;: [ &quot;XXX.XXX.XX.X/24&quot;, &quot;XXX.XXX.XX.X/24&quot; ] } } } ]} 参考 カスタムポリシーを使用する署名付き URL のポリシーステートメントの例","link":"/AWS-CroudFront%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%88%B6%E5%BE%A1%E3%81%BE%E3%81%A8%E3%82%81-%E7%BD%B2%E5%90%8D%E4%BB%98%E3%81%8DURL/"},{"title":"[AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化","text":"基礎知識 S3の静的WEBサイトホスティング機能 APをS3で公開するまでの流れ Angular APをBuild S3バケットの作成 S3にHosting（アプリを公開） S3にソースをアップロード 静的ウェブホスティング設定 ブロックパブリックアクセス バケットポリシーを変更 プロパティの変更/Static website hosting S3で公開したAPのアクセス制限 デプロイの自動化(CI/CD)の検討 Tourble Shooting: 404でAPにアクセスできない 参考 関連記事 S3 基礎知識S3の静的WEBサイトホスティング機能 静的WEB Hostingとは 静的コンテンツをWEBに公開するオンラインストレージの機能 静的コンテンツとは HTML/CSS/JavaScriptなどで構成されるWEBページやWEBアプリ サーバーレスアーキテクチャを実現 Angularで開発したアプリは静的WEB Hostingを利用することで、WEBサーバー無しで公開できます TypScript(JavaScript)で書いた機能は、アクセスしたユーザーのブラウザ側で動くため、公開する側にコンピューティングパワーが必要無い=WEBサーバーが必要無いわけです こういったサービスを利用して、表向きのサーバー無しで構成するのが、サーバレスアプリケーションと呼ばれるており、最近の流行りです メリット サーバーの運用費がかからないため、インフラのコストを大幅に削減可能 一般的にアクセス数が伸びるまでは無料で公開できるため、スタートアップが新しいサービスを立ち上げる際によく使う手法でもあります 静的WEB Hostingの代表的なサービス Amazon S3 AWSでHosting。本記事で解説しています。 Firebase Hosting GCP(Google Cloud Platform)でHosting 初めからSSL化(Https化)される点は、S3よりイケてますが、通信が増えるとS3の方がコスパが良いイメージ 以下の記事で解説しています Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) Github Pages GithubでHosting。本サイトはこれで公開しています(2020/06/16時点) 以下の記事で解説しています [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 S3の料金 料金はHostingする容量＋通信料で定まります 無料枠 初めの1年間以下を利用できます Hosting：5GBまで 通信 20,000 GET リクエスト、2,000 PUT、COPY、POST、あるいは LIST リクエスト、データ送信 15 GB 計算方法 SPA(Single page Application)は初めにAP全体を読み込んで画面遷移は端末側で行います。つまり、画面遷移によって通信が発生しません。よって、初めにS3のAPにアクセスしたタイミングでAPの容量分の通信が発生します。 APアクセス数/1000 x 0.05USD + AP容量 x 0.023USD 料金の目安 最初の 50 TB/月 0.023USD/GB Angularで開発したAPの容量 がっつり機能を具備したAPで容量は20MB程度でした 50TBを超えるには相当人気が出ないと無理です Tips: コスト削減方法 APの設計により、通信を減らす 前述したように、フロントをMPAではなく、SPAで開発することで画面遷移に伴う通信を削減可能です CloudFrontでキャッシュ アクセスの多いリージョンからS3へのアクセスを軽減できます S3を使う場合はこれを利用するのが一般的です APをS3で公開するまでの流れ以下の流れで解説します Build S3バケットを生成 デプロイ APを更新する度に手動でデプロイするのはイケてないので、その後の自動化方法も別記事で解説しています。 CI/CD入門 Github Actionsでビルド/テスト/デプロイを自動化 Angular APをBuildまずはアプリを本番環境で動く状態にします ng buildコマンド プロジェクト配下に/distフォルダを生成 コンパイルされたアプリ一式が格納される1ng build --prod 生成されたフォルダ angular pj直下にdistフォルダができています1234567891011121314151617181920your-app&gt; lsMode LastWriteTime Length Name---- ------------- ------ ----d----- 2020/06/05 17:00 distd----- 2020/02/04 11:15 e2ed----- 2020/06/05 15:42 node_modulesd----- 2020/05/08 9:25 src-a---- 2020/02/04 11:15 246 .editorconfig-a---- 2020/02/04 11:15 631 .gitignore-a---- 2020/04/13 9:53 3905 angular.json-a---- 2020/02/04 11:15 429 browserslist-a---- 2020/02/04 11:15 1025 karma.conf.js-a---- 2020/04/07 13:58 482680 package-lock.json-a---- 2020/04/07 13:58 1480 package.json-a---- 2020/02/04 11:15 1029 README.md-a---- 2020/02/27 21:35 276 tsconfig.app.json-a---- 2020/02/27 21:35 575 tsconfig.json-a---- 2020/02/04 11:15 270 tsconfig.spec.json-a---- 2020/02/04 11:15 1953 tslint.json 中身 123456789101112131415your-app\\dist\\your-app&gt; lsMode LastWriteTime Length Name---- ------------- ------ -----a---- 2020/06/16 18:52 445686 3rdpartylicenses.txt-a---- 2020/06/16 18:52 948 favicon.ico-a---- 2020/06/16 18:53 1001 index.html-a---- 2020/06/16 18:53 3344584 main-es2015.c5b9e425026ef7fc731a.js-a---- 2020/06/16 18:53 3478180 main-es5.c5b9e425026ef7fc731a.js-a---- 2020/06/05 17:01 37074 polyfills-es2015.b94e8feb7a16d6790318.js-a---- 2020/06/05 17:01 129383 polyfills-es5.b220e907c509a1aa6f0d.js-a---- 2020/06/05 17:00 1485 runtime-es2015.c5fa8325f89fc516600b.js-a---- 2020/06/05 17:00 1485 runtime-es5.c5fa8325f89fc516600b.js-a---- 2020/06/16 18:52 64154 styles.5a9f2f959a54b18f5f2f.css S3バケットの作成Buildしたソースコードを置くバケットを作ります AWS Consoleにログイン サービスよりS3を選択 バケットを作成するを選択 一意なバケット名とリージョンを指定 バージョニング Git等でソースを管理しているのであれば、無効でOK Tags AWS運用の基本的原則として、最低限以下は付けましょう。AWSのリソースのコストはTagをつけておくことで追跡しやすくなります。 PJ: PJ名 Own: リソースの管理者 アクセス許可の設定 一先ずデフォルトでOK バケットを作成 アクセス権限を変更する際には適宜このバケットの設定を弄ってください S3にHosting（アプリを公開）S3にソースをアップロード先ほど作成したS3バケットにBuildしたAngularのソース(/dist/your-app配下)を置きます AWS Console/サービス/S3より任意のバケットのページを開く アップロードを押下 ファイルを追加 /dist/your-app配下のファイル群をドラック&amp;ドロップ or ファイルを追加で選択 アップロードを押下 以上でアップロードが始まります 静的ウェブホスティング設定S3にアップしたソースを公開します AWS Console/サービス/S3より任意のバケットを選択 右に表示されるバケット情報欄の”アクセス権限”を選択 ブロックパブリックアクセス ブロックパブリックアクセスタブの”編集”を押下 全てのブロックのチェックを外す 保存 バケットポリシーを変更 バケットポリシータブを選択 画面のエディターにポリシーを記載して保存 特に絞らず公開する場合の例 “Resource”のarnは自分のbucketのものに変更してください 123456789101112{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;PublicReadGetObject&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &quot;*&quot;, &quot;Action&quot;: &quot;s3:GetObject&quot;, &quot;Resource&quot;: &quot;arn:aws:s3:::angular-sample-bucket/*&quot; } ]} プロパティの変更/Static website hosting バケット内のプロパティタブ ⇒ Static website hostingを選択 ”このバケットを使用してウェブサイトをホストする” インデックスドキュメントに”index.html”を入力して保存 URLの確認方法 Static website hostingより確認 URL 以下のように一意に定まります1http://&lt;bucket-name&gt;.s3-website-&lt;select-region&gt;.amazonaws.com S3で公開したAPのアクセス制限 開発したAPを社内公開する際、イントラからのアクセスに絞るケースが多いと思うので解説しておきます。 バケットポリシーにIPアドレスの制限をかけることで絞れます Conditionで許可するIPを書き足すだけ1234&quot;Condition&quot; : { &quot;IpAddress&quot; : { &quot;aws:SourceIp&quot;: &quot;xxx.xxx.xxx.xxx/xx&quot; } 記載例 アクセスを許可するIPをSourceIpとして定義12345678910111213141516{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;PublicReadGetObject&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: &quot;*&quot;, &quot;Action&quot;: &quot;s3:GetObject&quot;, &quot;Resource&quot;: &quot;arn:aws:s3:::your-bucket/*&quot;, &quot;Condition&quot; : { &quot;IpAddress&quot; : { &quot;aws:SourceIp&quot;: &quot;xxx.xxx.xxx.xxx/xx&quot; } } ]} デプロイの自動化(CI/CD)の検討APを改修する度に手動でS3へデプロイするのは面倒なので自動化しましょう。やり方は沢山あり、ぱっと思いつくだけでも以下があります。 実現方法 Github Actionsを使用 Code PipelineとCode Buildを使用 ng deployに設定 JenkinsやCircleCIを使用 色々試した結果、最も使い勝手が良いのはGithub Actionsだと思います。詳細は以下の記事にまとめてあります。 CI/CD入門 Github Actionsでビルド/テスト/デプロイを自動化 何故Github Actionsが優れているか？ Githubで完結 他のツールと組み合わせる手間が無いのは大きいです 費用面 基本無料で使える 再利用性 ymlファイルで自動化するワークフローを定義するのですが、これをgitでソースと一緒に管理できます。つまり、同じようなケースでファイルをコピーするだけで使いまわすことができます。 学習コストの低さ サードパーティーの公開Action よくあるパターンのテンプレートは大体既に用意されています まさに今回やりたいS3へのデプロイの自動化を実現するActionも既にありました Tourble Shooting: 404でAPにアクセスできない 以下を確認してください bucket直下にindex.htmlが入っているか？ /dist配下のフォルダ毎まるまるupしてしまうと読み込めません /dist/your-app配下のファイル群をUpしましょう 参考関連記事 CI/CD入門 Github Actionsでビルド/テスト/デプロイを自動化 S3 AWS S3にAngularアプリをデプロイする手順 Angularで作ったWebアプリをGitHubで管理してS3に自動デプロイする AWS初心者の私がAmazon S3のStatic website hostingを利用して静的Webページをホスティングしてみました Amazon S3のStatic Web Hostingにアクセス制限をかけて使ってみる","link":"/AWS-S3-x-Angular-%E9%9D%99%E7%9A%84WEB%E3%82%B5%E3%82%A4%E3%83%88%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%A7SPA%E3%82%92%E5%85%AC%E9%96%8B-%E5%85%AC%E9%96%8B%E7%AF%84%E5%9B%B2%E3%81%AE%E9%99%90%E5%AE%9A/"},{"title":"About This Blog","text":"著者について 本サイトの目的 その他のテーマ WEB AR/ARフィルター Smart Home DTM/Music Tech 著者について 初めまして。本ページをご覧頂き有難うございます。都内の総合電機メーカーで、先端技術検証やサービスの実証を担当している若手エンジニアです。技術分野としては、Serverless, AWS, Firebase, SaaS, DevOps等に関連したPoC(Proof of Concept)に携わっています。 学生時代は早稲田大学の創造理工学部で3Dプリンターの研究をしていました。コンピューターサイエンスの基礎を学ばないまま、モダンな技術を扱うことになったので、日々悪戦苦闘しています。 ざっくりスキルマップ プラットフォーム AWS/Firebaseを活用したサービスのアーキテクチャ設計/IaCやSaaS開発のPMの経験があり、AWS Solution Architect等の資格を持っています フロントエンド よくAngularでSPAを開発しています 本サイトの目的 新人/初級者のサポート 自身の復習用のメモ アメリカ国立訓練研究所で提唱されているLearning Pyramidによれば、学習定着率を高める最善手は “Teach Others” です。最近初級者に教える機会が増えたので、先回りしてWEBにまとめておくことにしました。パブリッククラウドやAngularの基礎から順次書いていく予定です。映画鑑賞一本につき一記事執筆を目標にコツコツ書いています。 IT業界では、ベテランの優秀層に囲まれるとスキルのギャップで苦しむシーンが多いと思います。私も初期配属された頃、毎月資格を取り続けることになりましたが、太刀打ちできず苦労しました。特にモダンな技術の文献は一定の暗黙知を有するものが多く、初級者に優しくありません。公開した記事が当時の私と同様に困っている方の助けになれば嬉しいです。 その他のテーマWEB AR/ARフィルター 以下について纏める予定です AR.jsを活用したWEB APの開発方法 iPadによる3D Captureの手法 Spark ARによるARフィルターの開発方法 Smart Home現在は以下のような構成を作っています。 DTM/Music Tech DTM環境の構築手法 リモートセッション Music Tech (AI作曲ツールなど) Mail: junjunjunya108@gmail.com","link":"/About-This-Blog/"},{"title":"[AWS SDK for JavaScript] WEBアプリ→AWSへのリクエスト認証時のエラーハンドリング","text":"WEBアプリ(Angular)からAWS SDK経由でAWSにアクセスする際に、Credential(AccessKey/SecretAccessKey)の認証が必須。そこでの認証エラーを検知する仕組みを作る手法についてのメモ AgularでAWS SDKを利用する方法自体は以下に記載 Angular x AWS SDK for JavaScriptの始め方 認証エラーを検知 → アラート発信 ＆ 処理の中止 WEBアプリからAWSへの通信時のエラーハンドリングについて、AWS SDK開発者ガイドを基に以下を検討した 実現したい仕様 AWS SDK経由のリクエスト実行時にクレデンシャルエラーを検知したい クレデンシャルの認証エラーであることをユーザにエラーメッセージで教えたい Credentialの問題なのか、リクエストの問題（例えば指定したリソースが存在しない）なのか知りたい ユーザは原因を判断できないと、次のアクションが分からない クレデンシャルエラーを検知した場合に処理をストップ クレデンシャルに誤りがある場合、AWSへの複数ののリクエストを実行しても全て失敗する 一つエラーが出た時点で止めることでUXを向上させたい AWS SDKとは WEBアプリからAWSにリクエストする際に利用するもの AWS Credential(accessKeyId, secretAccessKey)が必要 今回は↑が間違っていた場合に検知したい サービスオブジェクトメソッドは呼び出されると、AWS.Response オブジェクトをコールバック関数に渡すことで返す AWS.Response オブジェクトのプロパティを通じて、レスポンスの内容にアクセス可能​ AWS.Response オブジェクトのプロパティ x 2 data プロパティ error プロパティ ここの内容でエラーの種類を見分けられそう​エラーメッセージの検証 Credentialの認証エラー時のメッセージを確認してみる 1234567891011121314151617181920// aws-sdkを変数AWSとしてimportimport * as AWS from 'aws-sdk';​region = XXXX;​// AWS SDK各サービスのオブジェクトをまとめて宣言let ec2 = new AWS.EC2({region: region});​// Ex. VPCの情報をリクエスト（describeVpcs）// AWSにリクエストを発信し、返り値(dataプロパティ ＆ errorプロパティ)に応じた処理を実行ec2.describeVpcs({}, (err, data ) =&gt; { if (err) { // Error発生時の処理 // 以下でエラーメッセージを見てみる alert(err); // AuthFailure: AWS was not able to validate the provided access credentials } else { // データを取得した際の処理 resolve(data); // 問題無くresolveしたら()の値を返す }});​ Credentialのエラーメッセージは以下が出た alert(err)の結果1AuthFailure: AWS was not able to validate the provided access credentials ​​ パターンマッチで、上記のエラーメッセージの場合に以下を実行させる エラーメッセージの表示 “AWS Credentialに誤りがあります”と表示する 処理の停止 AWSへの他のリクエストも同時に実行しようとしていた場合、全てストップする​ errはString型ではない(AWS.Responseオブジェクト型)ので、パターンマッチをするには型変換が必要123456let errorMessage = String(err);​if (errorMessage = &quot;AuthFailure: AWS was not able to validate the provided access credentials&quot;) { // credential error時の処理​} ​​実装12345678910111213141516171819202122232425262728293031323334353637383940// aws-sdkを変数AWSとしてimportimport * as AWS from 'aws-sdk';​region = XXXX;​// AWS SDK各サービスのオブジェクトをまとめて宣言let ec2 = new AWS.EC2({region: region}); // リージョンを設定let as = new AWS.AutoScaling({region: region});let iam = new AWS.IAM({apiVersion: '2010-05-08'});​​// VPCの情報をリクエストする（describeVpcs）場合​// AWSにリクエストを発信し、返り値(dataプロパティ ＆ errorプロパティ)に応じた処理を実行​ec2.describeVpcs({}, (err, data ) =&gt; { if (err) { // Error発生時の処理 let errorMessage = String(err); // credential errorの場合 if (errorMessage = &quot;AuthFailure: AWS was not able to validate the provided access credentials&quot;) { //credential error時の処理を実行する関数を呼ぶ stopRequest(errorMessage); } else { // Credential以外のエラーの場合 alert(region +&quot; describeVpcs Error&quot;); } } else { // データの取得に成功した際の処理 resolve(data); // 問題無くresolveしたら()の値を返す } });​// Credential Error時の処理 停止 エラーをfiledata-baseに返す？let stopRequest= (errorMessage) =&gt; { // エラーメッセージを表示 alert(errorMessage); // そのままアラート alert(&quot;AWS Credentialに誤りがあります&quot;); // 日本語でアラート // 処理を強制終了してエラーメッセージを返す return(&quot;Credential Error&quot;);} ​ 補足：上記のアロー関数を普通に書くと以下 Angularでは基本的に無名関数では無く、アロー関数で書いた方が良い123456function stopRequest (errorMessage) { // エラーメッセージを表示 alert(errorMessage); // AuthFailure: AWS was not able to validate the provided access credentials // 処理を強制終了 return(&quot;Credential Error&quot;);} ​参考関連記事 Angular x AWS SDK for JavaScriptの始め方 AWS SDK for JavaScriptでRegionリストを取得 [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック その他 AWS Javascript SDK レスポンスオブジェクトの使用​​​","link":"/AWS-SDK-for-JavaScript-WEB%E3%82%A2%E3%83%97%E3%83%AA%E2%86%92AWS%E3%81%B8%E3%81%AE%E3%83%AA%E3%82%AF%E3%82%A8%E3%82%B9%E3%83%88%E8%AA%8D%E8%A8%BC%E6%99%82%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/"},{"title":"AWS SDK for JavaScriptでRegionリストを取得","text":"やりたいこと フロントエンド(SPA)からAWS SDK for JSで任意のアカウントのリージョンリストを取得する SDKの導入については以下を参照 Angular x AWS SDK for JavaScriptの始め方 公式のディベロッパーガイドを参考に実装する リージョンおよびアベイラビリティーゾーンに関する情報の取得 describeRegionsメソッド 使用可能なリージョンに関する情報を取得するには、describeRegions メソッドを呼び出せばよい 戻り値 Aws::EC2::Types::DescribeRegionsResult オブジェクト DescribeRegionsResult.Regionsに配列が格納されている AWS.EC2.RegionList1234console.log(data.Regions); // dataに戻り値が格納される[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object],[object Object]console.log(data.Regions[0]);[object Object] EC2.Region.RegionName12console.log(data.Regions[0].RegionName);eu-north-1 実装例1234567891011121314151617181920// aws-sdkを変数AWSとしてimportimport * as AWS from 'aws-sdk';// RegionListを取得するメソッド getRegions() { // AWS SDKのEC2オブジェクトを宣言 let ec2 = new AWS.EC2({region: ap-northeast-1}); // Default Regionの指定が必須 // 問合せ(describeRegions)を実行 ec2.describeRegions({}, (err, data ) =&gt; { if (err) { let errorMessage = String(err); alert(errorMessage); } else { // データ取得時 // Aws::EC2::Types::DescribeRegionsResult オブジェクトが戻り値としてdataに格納される let regions = data.Regions.map((d) =&gt; d.RegionName); // ループでリージョン名を抽出した配列を生成 return(regions); } }); } 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック その他 リージョンおよびアベイラビリティーゾーンに関する情報の取得","link":"/AWS-SDK-for-JavaScript%E3%81%A7Region%E3%83%AA%E3%82%B9%E3%83%88%E3%82%92%E5%8F%96%E5%BE%97/"},{"title":"Adobe XDによるUIデザイン/プロトタイピング","text":"Adobe XDについてのメモ。XDはデザインだけでなく、プロトタイピングもでき、インタラクティブに動く(ex. 画面遷移, ポップアップ)APのモックを短時間で用意できるツールです。本確的な実装に入る前に、ステークホルダーにUXを検証してもらうことで、後の改修作業のリスク低減を見込めます。 特にデザイナー不在のPJにおいては、ExcelやpptによるUI設計を避けるために、エンジニアや営業も覚えておくと役立ちます。ハッカソンやアイデアソンにも使えそう。 ダウンロード〜インストール AdobeのサイトからXD_installer.dmgをダウンロード Adobe XD インストーラーを開く 指示に従ってインストール なければAbodeのユーザ登録が必要 インストールが完了すると以下の画面が表示されます UI Kitを導入する デザイナー以外が利用する場合は、更の状態から作らずにテンプレを使うのが一般的 以下のサイトからUI Kitを導入できる Adobe XD UI Kit AngularなどのWEBフレームワークでフロントエンド開発を行うのであれば以下を導入すると良い AngularでUI開発に用いるAngular MaterialはこのGoogle Material Designが元になっている ローカルにKitをダウンロードすると、Light ThemeとDark ThemeのXDファイルを入手できる それぞれのファイルを開くと、Adobe XDで以下の様に表示される Dark Theme Light Theme UIのプロトタイピング 新規ドキュメントを作成からデザインしたいタイプを選択してデザインを始められる ex. モバイル, Web, カスタムサイズ リンク機能 共有タブ/右のナビから、作成したデザインやプロトタイプを任意の形式で公開することができる 生成されたURLにアクセスすると以下の様に表示される 関係者にコメントを書き込んでもらうことも可能 表示設定 以下の４種から設定可能 デザインレビュー 開発 プレゼンテーション ユーザーテスト カスタム 無料アカウントでは1リンクまでしか公開できないが、作品→公開中のアイテム→完全に削除 より消せば問題なし 仕事で使用する場合は、法人アカウントを作ると良い 以下で詳しく解説されていた モバイルデバイスのプレビュー モバイルにAdobe XDのアプリを入れることでプレビューすることもできる モバイルデバイスでのプロトタイプのリアルタイムプレビュー 参考 Adobe XD Adobe XD UI Kit Adobe XD基本の使い方","link":"/Adobe-XD%E3%81%AB%E3%82%88%E3%82%8BUI%E3%83%87%E3%82%B6%E3%82%A4%E3%83%B3-%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/"},{"title":"[Angular] E2E Testの自動化","text":"E2Eテスト概要 Angularでは以下の二種のテストをngコマンドで実行可能（Protoractor/Karmaというテストを実行するためのフレームワークが標準で準備されている） E2Eテスト End to End（エンドツーエンド）テストの略 WEBブラウザー上でのテストを自動化できる 画面毎のテスト テストフレームワーク Protoractor コマンド ng e2e ユニットテスト 関数ごとのテスト テストフレームワーク Karma コマンド ng test 今回は画面毎のテストを自動化したいので、Protoractorを活用してE2Eテストを実践する E2Eテストまでの流れ 操作したい要素に識別子を付与 要素(Ex. ボタン、入力フォーム)を判別可能にする テストを定義 テストコードを書く マルブラウザ対応の設定をする テストを実行 選択する要素に識別子を付与E2EテストではAPの画面を自動操作する。その際にどこを操作するか？(特定のボタン、フォームなど)を判別するために、各Componentのhtmlファイルで各要素に識別子を付与する必要がある。 選択する要素を識別する識別子 data属性を使う 書式 以下を操作したい要素に定義していく1[attr.data-test]=&quot;'任意の識別子'&quot; ※要素を識別するために他に使用される属性として、id属性・class属性などもあるが、これらのはデザインの変更などで変更される恐れがあるため勧められていない。 一般的なログイン画面で以下の要素に識別子を与えた例 ログインIDの入力欄 パスワードの入力欄 リクエストを送信するボタン 12345678910111213141516&lt;h1&gt;login&lt;/h1&gt;&lt;form&gt; &lt;div&gt; &lt;mat-form-field&gt; &lt;input matInput placeholder=&quot;email&quot; [attr.data-test]=&quot;'email'&quot;&gt; // ← 要素①： data-*属性で一意となる識別子を振る &lt;/mat-form-field&gt; &lt;/div&gt; &lt;div&gt; &lt;mat-form-field&gt; &lt;input type=&quot;password&quot; matInput placeholder=&quot;passoword&quot; [attr.data-test]=&quot;'password'&quot;&gt; // ← 要素② &lt;/mat-form-field&gt; &lt;/div&gt;&lt;/form&gt;&lt;div class=&quot;p-button-wrapper&quot;&gt; &lt;button mat-raised-button class=&quot;p-button&quot; color=&quot;accent&quot; (click)=&quot;login()&quot; [attr.data-test]=&quot;'login-button'&quot;&gt;Login&lt;/button&gt; // ← 要素③&lt;/div&gt; この後の工程で、これらの識別子に対するアクションを定義する。上記の例であれば、IDとパスの識別子に対して入力値を与えて、ボタンの識別子に対して(click)アクションを実行させることになる。 ## テストファイル テストを定義するファイルは以下の二種類 \\angular-pj\\e2e\\src\\＊.e2e-spec.ts \\angular-pj\\e2e\\src*.po.ts Angular CLIでプロジェクトを始めると、上記のファイルが自動生成されているはず。 Page Object アプリケーションの画面単位で1オブジェクトを定義するPage Objects としてE2Eテストが作成される PageObjects アプリの画面を1つのオブジェクトとして捉えるデザインパターン PageObjectのメリット もし、テストケースに直接セレクタを記述する場合、デザイン変更がにより、セレクタを記述している全テストケースの修正が必要 Page Objectsとして、.po.tsに各画面毎の要素選択などの処理を定義することで、.e2e-spec.tsは実際のテストケースを手続き的に書いていける コードの可読性が向上 再利用性が高まる E2Eテストを実行 テストコードを書き終えたらコマンドでテストを実行する 以下をGithub ActionsやCircle CIなどで自動化するとCI/CDを実現できる E2Eテストは以下のコマンドで実行できる 1ng e2e ここで証明書エラーにハマった場合は以下を参照 [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) テストコードのより詳細な記述方法については別途まとめます 参考関連記事 [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する その他 e2e test 概要 ブラウザーを自動で操作し動作確認できる、「Angular」のe2eテスト e2e test マルチブラウザ 【Angular】これからはじめるE2Eテスト（2019）","link":"/Angular-E2E-Test%E3%81%AE%E8%87%AA%E5%8B%95%E5%8C%96/"},{"title":"[AWS WAF] CloudFrontへアクセス可能なソースIPを社内イントラに制限","text":"AWS WAFを用いて、CloudFrontへのアクセスを制御する手法を解説します。CloudFrontディストリビューションの生成やS3へのコンテンツのHostingは事前に完了している前提とします。それらの手順は以下の記事にまとめています。 参考記事 [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 S3でコンテンツを公開するまで s3 ssl化 https化(CloudFront/ACM/Route53) s3とCloudFrontを連携させるまで AWS CloudFront~S3のアクセス制御まとめ/署名付きURL S3へのアクセスをCloudFront経由に限定 前提とする構成 AWS WAF(Web Application Firewall) 手順 IP set設定 WEB ACL設定 CloudFrontディストリビューションに適応 参考 関連記事 その他 前提とする構成 S3単体であれば、バケットポリシーによるソースIP制限も可能ですが、CloudFrontを挟む場合は、アクセス元となるCloudForntがブロックされてしまいます。そこで、S3がアクセスを許可する対象をCloudFrontに絞り、CloudFront側でIP制限をかける必要があり、AWS WAFを利用することで実現可能です。 AWS WAF(Web Application Firewall) AWS WAF 名前の通り、Webアプリケーションを守るファイアウォールです 主な機能 SQL インジェクションやクロスサイトスクリプティングなどの一般的な攻撃パターンの防御 AWSにおける基本的な防御策の一つであり、CloudFrontとWAFをコンテンツ～ユーザ間に挟むのが定石です 更に守りを固めるのであればAWS Shieldも付けるイメージ 定義した特定のトラフィックパターンを除外するルールを作成して、トラフィックがアプリケーションに到達する方法を制御 今回利用するのはこちら 手順WAFで以下のトラフィックパターンを実現します 社内イントラ(複数IP)からのアクセスのみを許可 その他をブロック IP set設定まず、アクセス可能なIPアドレスをリスト化します IP Sets Create IPsetを選択 Crate IP set ip set name 今回は会社のイントラネットのIPを登録するので”intranet”に設定 IP addressesに許可したいIPアドレスを列挙 Create IP set WEB ACL設定次に設定したIP setからのアクセスのみに絞るルールを作ります WEB ACLs/Create web ACLを選択 WEB ACL設定 Resource type CloudFront distributionsを指定 他は任意の名称を設定 今回はip-limit-acl Add rules and rule groups ここでIPをルールとして設定します Add my own rules and rule groupsを選択 Add my own rules and rule groups Rule type IP setを選択 Rule 任意の名称を設定 IP Set 事前に作ったものを選択 Action Allow Add rule Default web ACL action for requests that don’t match any rules Blockに設定しておく デフォルトのブロックと任意のIP setにアクセスを許可するルールが設定されたことを確認してNext Set rule priority そのままでNext Configure metrics そのままでNext Review and create web ACL 設定に問題がなければCreate web ACL CloudFrontディストリビューションに適応 WEBACL完成後にCloudFrontに適応 Associated AWS resourcesタブ Add AWS resources 作成済みのCroudFrontディストリビューションを選択 Add 以上でOK。試しにCloudFrontのURLにアクセスすると、許可したIP以外からはブロックされます。 参考関連記事 [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 s3 ssl化 https化(CloudFront/ACM/Route53) s3とCloudFrontを連携させるまで AWS CloudFront~S3のアクセス制御まとめ/署名付きURL S3へのアクセスをCloudFront経由に限定 その他 AWS WAFを完全に理解する WAFの基礎からv2の変更点まで CloudFront + S3 での IP アドレスベースのアクセス制限設定をする CloudFrontでIP制限するためのWAFをCloudFormationで作成してみた","link":"/AWS-WAF-CroudFront%E3%81%B8%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E5%8F%AF%E8%83%BD%E3%81%AA%E3%82%BD%E3%83%BC%E3%82%B9IP%E3%82%92%E7%A4%BE%E5%86%85%E3%82%A4%E3%83%B3%E3%83%88%E3%83%A9%E3%81%AB%E5%88%B6%E9%99%90/"},{"title":"[Amazon Honeycode] NoCodeで出社管理アプリを開発してみた","text":"Amazonが最近発表したAmazon Honeycodeベータ版の使い方の解説記事。Excelやスプレッドシートによる業務運用をNoCodeでパッとアプリ化してみました。AWSの開発者ブログの記事を参考にしています。 概要Amazon Honeycodeとは？ AmazonのNoCodeサービス コーディング無しでビジネスアプリケーションを実現するツール 非エンジニアでも簡単に使えます エンジニアも開発前のプロトタイピングに利用して、仕様を精査してから本格的な開発に入ることができます モバイル対応のWeb アプリケーションを構築可能 Webブラウザ/iOS/Android 用のネイティブアプリから利用 機能主な機能は３つ Table: データの定義 Builder: アプリのUIを定義 Automations: 自動アクションの規定 Table 行列を持つデータを格納する機能 スプレッドシートと大体同じ できること データのフィルタリング データの書式設定 他のTableのデータ参照 Builder アプリのUIをカスタマイズする機能 ボタンクリック時の処理や画面遷移などを定義 Automations 自動的にアクションを実行させる機能 Trigger スケジュールされた日時やデータが追加・変更されたタイミング Actions 通知の送信やデータ操作 開発手順 今回作るアプリ シンプルな承認アプリ Excel, スプレッドシートの台帳管理で失う無駄な工数を削減します 従業員が出社や社外訪問をする際に、マネージャーへ申請するケースを想定します 開発の流れ サンプルデータ(csvファイル)を準備 Honeycodeへサンプルデータをインポート サンプルデータを元にデータモデルを作成 アプリケーションを作る (ウィザード編) アプリケーションを作る (Builder編) 承認フローを定義 1. サンプルデータ(csvファイル)を準備まずは出社申請業務に必要なデータをCSV形式で用意。データ件数は少量でも構わないが、選択式で入力を行うマスタデータ項目を網羅しておくと、後のデータモデル作成が楽になる。 CSVとは？（非エンジニア向け） comma separated valuesの略称 ,でデータを区切ったファイル形式 Excelやgoogleスプレッドシートにもcsv形式で出力という機能がついています 以下の様なサンプルデータを作成 作り方はスプレッドシートでもExcelでもメモ帳でもOK サンプルデータの形式は以下のように設定 列名 論理名 application date 申請日 applicant 申請者 work day 出社日 destination 行き先 reason 理由 manager 承認者 result 承認結果 CSVを出力 スプレッドシートの例 ここで用意した.csv形式のファイルを、後でHoneycodeに読み込ませます 2. Honeycodeへサンプルデータをインポートログイン/アカウント作成 Amazon Honeycodeにログイン 未登録であればCreate Oneから作成 確認メールが送信されます メールのConfirm Nowより承認 続けてログインを実施 初めてログインするとこんな感じ サンプルデータのインポート 右上のCreate workbook, IMportCSV fileからインポートを押下 先ほど用意したcsvファイルを選択してImportを実施 import後にTableの画面になります 3. サンプルデータを元にデータモデルを作成 Table機能を使ってデータモデルを作ります WorkbookとTable名を変更 ・・・アイコンから変更 今回は以下の様に設定 Workbook attendance management Table名 attendance 列の書式設定 日付であればDateなどのデータの型を定義することで、不正な入力を防ぐことができる データ型の変更方法 列を選択 画面上部の Formatsを押下 COLUMN FORMAT を指定 Applyで適用 今回は以下の様に設定 例えば、Date型にすると”年/月/日”の形式のデータ以外は入力できなくなります 列名 COLUMNFORMAT application date Date applicant Contact work day Date Manager Contact 日付を入力する列にDate、人名を入力する列にContactを設定しました 選択式の入力にする（マスターテーブルの作成） 残ったdestination列と result列を選択式の入力にするために、マスターテーブルを作成します。 画面上部の Wizardsを押下 表示されたペインで Create Picklistsを選択 Create picklists for: Tableを選択(今回はattendance) For unique values in: 列を選択 今回はdestination Apply ＋Add Newからresult列についても同様に設定 GOを押下 設定後は以下の様になります サンプルデータでマスタデータが網羅されていない場合は、この段階でマスターテーブルに対してデータを追加 つまり他の選択肢もある場合は追加が必要 データの追加はスプレッドシート左下の「＋」から実施 データモデルの作成は以上でOK 4. アプリ(UI)の開発 App Wizardによる自動生成次はアプリのUI（画面）を作ります UIの作り方 Amazon HoneycodeにおけるUIの作り方 Builder 真っ白な画面にデータ項目やボタンを1つずつ配置しながら画面を構成 App Wizard 自分で一から作らず、テンプレを利用 今回はウィザードで基礎を作り、詳細をBuilderで改修する流れで構築 ウィザードの利用 ウィザードを起動 画面上部の Build appを押下 Use app wizardを選択 App Wizardを開くと表示される説明ムービー App Wizaradを利用する場合の開発手順 データモデルを読み込み、そこからAP画面を自動生成 一覧画面 詳細画面 フォームを編集 Step1: Tableの選択事前に作成したデータモデルを一覧表示する画面を自動生成します 右のサイドナビのSourceを選択 今回はattendance(事前に作成したデータTable名) 以下の様にアプリの画面（データの一覧画面）が自動生成されます Step3: 画面やデータ設定を編集 一覧画面のデザイン 必要のないデータ項目を消します データ項目の削除 Xボタンで削除 データ項目の追加 ＋Add column データ順序の入れかえ データ項目左側のドットをドラッグ 設定が終わったらNext 単票画面（詳細画面）のデザイン 先ほどの行単位の話 今回は単一の申請の詳細をみる画面 一覧画面で表示されないデータ項目もすべて表示したい データ項目を変更可能にする 鉛筆アイコンをクリック 今回はマネージャーによる承認行為を行うので result を変更可能に 設定が終了後にNext フォーム画面のデザイン 申請データを登録する際の画面 今回は申請者がresultを決定する必要がないため、Xで削除 完了したらApply ここまでで基礎となるアプリケーションが完成した状態。画面右上の X からウィザードを終了。終了すると、残りはBuilderでの編集しかできないので注意（App Wizardは使えない） 5. アプリの開発 BuilderによるカスタマイズApp Wizardで作ったアプリの詳細をBuilderで編集する Builder の起動 画面左上の Builder アイコンを押下 アプリを選択 今回作ったアプリ(Attendance)を選択 Builderの立ち上げ画面 Builderの概要 Screen（アプリの画面）に各Object(部品)を配置していく Ex.) データを表示する部品, 処理の起点となるボタン チュートリアル1: Screen ここでデータの追加やアプリ画面のスタイル、レイアウトのアレンジなどを行う チュートリアル２: Properties ソース、表示、アクションなどのデータプロパティを設定する チュートリアル３: The data view ソースデータを視覚的に参照 不要な機能の除去詳細画面 今回単票画面(詳細画面)に含まれる不要な機能を除去する 編集したいアプリの画面を移動 今回弄るのは詳細画面(attendance detail) 画面左側のペイン Screens で単票画面である attendance detail を選択 画面中央のペインで Jump to item 機能を含む Block を選択 画面右側のペイン BLOCK PROPERTIES で DISPLAY タブを選択 Set visibility に =FALSE と入力 データフォームの修正申請者が申請日を編集する必要が無い（自動で決定する為）ため、機能を削除します 画面左側のペイン Screens で単票画面である attendance form を選択 画面中央のペインで application date のデータ値を入力する Data Cell を選択 画面右側のペイン DATA CELL PROPERTIES で Editable チェックを Off にする 画面右側のペインで DATA タブ、Set type で Variable を選択する Set initial value に =NOW()+9/24 と入力する Amazon Honeycode では現在時刻を示す NOW() や今日を示す TODAY() などの関数と数式を利用可能です。NOW() 関数、TODAY() 関数のいずれも UTC を基準としているため、JST への変換を行っている 申請者を記録するapplicantも修正 代理申請を除くと申請者は操作を行ったユーザーと判断できるため、以下の手順に沿って申請者の初期値にログインユーザーを設定するとともに、利用者に入力をさせない仕様とする 画面中央のペインで applicant のデータ値を入力する Data Cell を選択 画面右側のペイン DATA CELL PROPERTIES で Editable チェックを Off に変更 自動入力させる為、編集不能にする 画面右側のペインで DATA タブ、Set type で Variable を選択 Set initial value に =$[SYS_USER] と入力 自動的にユーザ名を入れる 手直しは以上で完了 6. 承認フローを定義(Automationsで機能を開発) Automationsでメール送信機能を開発する 本アプリの利用者 申請者（出社する社員） 承認者（マネージャー） 上記の間をつなぐフローに必要な以下機能を作る 今回作る機能 申請者が出社申請を登時、マネージャーへ承認依頼メールを送信 マネージャーの承認実施時、申請者へ結果通知メールを送信 Automations Automationsを起動 左のAutomationsアイコン → ＋ まずは承認依頼メールを発信する機能を作る Automationsの名称を変更 上部のスリードット 今回はapproval requestと命名 処理が発生するタイミングを指定(Row Added) Row Added or Deleted In table 申請データを格納するattendance を選択 Starts when row is added to を選択 今回のタイミング 申請者による出社申請を起点 テーブルの行が追加されるとき＝承認依頼を実施した時 処理内容を定義(Add Actions) Add actions Notify(通知機能)を選択 送信先、件名、メッセージを入力 データ項目名も指定可能 データ項目名を指定した箇所は処理対象のデータ値に置換された上でメールが送信されるため、宛先や文面を動的に構成可能 今回は”=manager”を指定 承認依頼メールを定義 線が引かれている箇所は =manager との形式でデータ項目名を指定している 表記のデータ値はあくまで一例であり、送信されるメールの文面は Automations で処理されるデータの値を用いて構成される =データ名でデータモデルから参照してくれる緑のラインが入っている箇所 変更を確定 画面右上のPublishを押下 Publish されていない、つまりは変更が加えられている状態では画面右上に Draft と表示される Notifyで以下のような警告が表示される場合がある 申請者への結果通知メール送信機能を作成 Automationを追加 画面左側の ＋ をクリックして画面を起動 automation Trigger 処理が発生するタイミングは承認者による承認結果登録を起点とする Column Changes を選択 In table 申請データを格納する attendance を選択 Starts when this column changes 承認結果データである =[result] を選択 Run automation if this formula is TRUE 承認結果の入力を示す式 =[result]&lt;&gt;&quot;&quot; を入力 結果通知メールを定義 12345678910111213141516=applicant 様以下の出社申請への承認結果をご連絡致します。申請日：=申請者：出社希望日：出社先：出社理由：承認者：承認結果：本メールは、配信専用のアドレスで配信されています。本メールに返信されても、返信内容の確認およびご返信ができません。あらかじめご了承ください。 Publishで編集を完了 ここまででアプリの開発は完了次に関係者にアプリを公開する アプリを公開Teamにユーザを招待Honeycodeで開発したアプリを使ってもらうには、事前に以下が必要 利用者にAmazon Honeycodeのアカウントを作成してもらう 同じTeamに入ってもらう 招待の手順 画面左下の Teams アイコンをクリック チーム名をクリック 画面右上の Add team member をクリック Connect AWS account 有料プランにすればAWSのアカウントとも連携可能なよう1To upgrade your team plan, connect to your AWS account. Invite to join 表示された画面でメンバーのメールアドレスを入力 役割を Admin と Member のいずれかから選択 Invite ボタンをクリック 役割の違い Admin : Workbook、アプリケーション、Automations の作成。Plan とチームメンバーの管理 Member : Workbook、アプリケーション、Automations の作成 招待を受けたユーザーには以下のようなメールが送信される Join ボタンをクリックしてもらう 事前の登録作業は以上で完了。一度Honeycodeのアカウントを登録すれば他のアプリを作っても使いまわせるが少し手間ではある印象 share作成したアプリケーションの公開は関係者に Shareする 画面左上の Amazon Honeycode アイコンをクリック Workbook とアプリケーションの一覧を表示 公開したいアプリケーション右端のスリードットの左側をカーソルでポイント Share ボタンが表示されるのでクリック 公開先のユーザアカウントを選択する ユーザー名やメールアドレスで検索 リストに追加 Update ボタンをクリック 利用可能になった旨がメールで通知される アプリを利用してみるスマホで利用 まずはアプリケーションの公開通知を受け取ったユーザーがスマートフォンから出社申請をする Amazon honeycode アプリをインストール iOS Android ログイン アカウントを持っていなければここで作成 アカウント作成時に入力したメールアドレスとパスワードでログイン 自分に公開されているアプリケーションの一覧が表示される 今回作成したアプリケーションの Attendance をタップして起動 アプリケーションが起動すると、ホーム画面の申請一覧が表示される データモデルを作成する際にインポートしたサンプルデータを削除していない場合はリストに表示される 画面右上の + Add をタップして出社申請を行う 出社申請のエントリー画面で入力可能な項目を埋めていく データモデルの作成をする際に各データ項目の formats を定めた。アプリケーションでもその結果が踏襲され、データに合わせた入力が可能 データ入力が完了したら Done ボタンをクリックし、入力を確定 申請一覧画面に遷移し、直前の操作で作成した申請が一覧に表示される 申請データの登録に合わせて Automations が実行され、マネージャーにはこのようなメールが送信される Web ブラウザで申請を承認 続いては承認依頼通知を受け取ったマネージャーが出社申請を承認する Amazon Honeycode は Webブラウザからも利用可能なため、マネージャーはブラウザから承認を行ってみる Chrome、Edge、Firefox、Safari などの Web ブラウザで Amazon Honeycode にアクセス 今回作成したアプリケーションの Attendance をクリックして起動 アプリが起動すると、ホーム画面の申請一覧が表示される 承認結果が空白のデータをクリックし、出社申請の承認を実施 出社申請の詳細画面が表示される 内容を確認して承認結果を選択 選択すると自動的にデータが保存され、申請者にはこのようなメールが送信された 無事に出社申請業務を実施できたので、これで動作確認は完了 所感 iOS や Android のアプリストアから Amazon Honeycode アプリをダウンロードしてログインするだけで、利用者に必要なアプリケーションが表示され、配布の手間が少ない点はメリット honeycodeへのアカウント登録とTeamへの加入は必要だが、以降はアプリを追加してもすぐにShareできる AWSアカウントとの連携も利用すれば、より配布の手間を削減できそう 参考その他 [UI Bakery] NoCodeでAngularのUIをプロトタイピング(コード出力も可能なツール) その他 aws builders.flash","link":"/Amazon-Honeycode-NoCode%E3%81%A7%E5%87%BA%E7%A4%BE%E7%AE%A1%E7%90%86%E3%82%A2%E3%83%97%E3%83%AA%E3%82%92%E9%96%8B%E7%99%BA%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"[Angular JavaScript] JSONファイル(複数)の読み込み","text":"Angular APにFile APIでローカル端末からファイルを読み込む機能を実装する手法を解説します WEB APはセキュリティの関係で制約が多いので、やり方が限られます 1. 基礎知識 1.1. File API 1.2. Native File System API 2. 実装手順 2.1. HTML Fileのinputを用意 2.2. Fileのデータの取得 2.3. FileのMetaDataの取得 参考 関連記事 MDNドキュメント File APIを使用 jQuery or Pythonを使用 その他 JSON JavaScriptでの扱い 1. 基礎知識1.1. File API File API HTML5で定義された、ファイル操作のためのAPI MDN説明12File インターフェイスは、ファイルについての情報を提供したり、ウェブページ内の JavaScript でその内容にアクセスできるようにしたりします。File オブジェクトは一般的に &lt;input&gt; 要素を使用してユーザがファイルを選択した結果として返された FileList オブジェクトや、ドラッグアンドドロップ操作の DataTransfer オブジェクト、 HTMLCanvasElement の mozGetAsFile() API から情報を取得します。 参考 MDN ウェブアプリケーションからのファイルの使用 できないこと ディレクトリの読み込み ファイル単位の読み込みしかできません ユーザーの許可無しの読み込み 自動的にローカルのファイル一覧をWEB AP上に表示するような仕様は実現できませんでした 1.2. Native File System API Native File System API こちらを導入することで、ディレクトリの読み込みを実現できそうです 今回は採用しませんでした ブラウザによっては動かず、APの利用に前提条件ができてしまう為です こちらを利用する場合は以下を参考にどうぞ ブラウザからドライブにファイルの書き込みができるNative File System APIとは？ 2. 実装手順 以下を構成を想定 sample.component.html sample.component.ts 2.1. HTML Fileのinputを用意htmlにinputボタンを用意します sample.component.html 1&lt;input type = &quot;file&quot; [accept]=&quot;'.json'&quot; (change)=&quot;selectFile($event)&quot; #fl multiple id ='file'&gt; ファイルタイプを限定 acceptで定義1[accept]=&quot;&quot; 複数ファイルを取得 multiple (change)でファイル読み込み時に実行するメソッドを定義 $eventに読み込んだファイルのデータが入ります 読み込んだファイルを一覧表示 読み込んだファイル名をfileNamesに格納してngForで表示する12345&lt;div&gt; &lt;ng-container *ngFor=&quot;let fileName of fileNames; let i = index&quot; &gt; &lt;li&gt; No. {{i+1}} | Name {{ fileName }} &lt;/li&gt; &lt;/ng-container&gt; &lt;/div&gt; 2.2. Fileのデータの取得 ロジック ファイル読み込み時に(change)イベントでメソッドが発火 引数$eventとしてファイルのデータをメソッドに渡す .target.filesでFileListオブジェクトを取得 ファイル数回のループを実行 ファイルを読み込むためにFileReaderオブジェクトを生成 .readAsText()でFileオブジェクトの読み込みを実行 .onloadで読み込み成功時の処理を定義 読み込んだデータ(.result)を配列に格納 ..onerrorで読み込み失敗時の処理を定義 Errorメッセージを表示 sample.component.ts 1234567891011121314151617181920212223242526272829303132333435363738394041424344export class SampleComponent implements OnInit { // 選択したファイルの中身のデータを受け取る変数を宣言 public filesData = []; // File読み込み時に発火するメソッド selectFile(evt) { // 変数データの初期化 this.filesData = []; // ファイルの中身のデータ // inputしたファイルをFilelistオブジェクトとして取得 // 複数のfileオブジェクトがselectfilesに入る let selectFiles = evt.target.files; // --------------fileを読み込む------------------------ // ファイル数 = selectFiles.length回 ループさせる for (let i = 0, num = selectFiles.length; i &lt; num; i++) { // 1. ファイルを読み込むためにFileReaderオブジェクトを生成 // １ファイルしか読み込めない為、ここもループが必要 const rdr = new FileReader(); // 2. ファイルをテキストとして読み込む rdr.readAsText(selectFiles[i]); // 3. 読み込みが成功した際のイベントを定義 loadイベントのハンドラー // TSの場合アロー関数でないと動かない rdr.onload = (e) =&gt; { // reader JSONファイルの中身のデータ // 4. 読み込んだデータを配列に格納 this.filesData = this.filesData.concat(rdr.result); // console.log(this.filesData); // 配列にファイルの中身が追加されている } // ファイルの読みこみエラー時の処理 errorイベントのハンドラー rdr.onerror = (e) =&gt; { // console.log('ファイルを読み込めません'); } }} 2.3. FileのMetaDataの取得 仮定 ファイル名を取得して、選択ファイル一覧を表示したい ファイル名はprefixに時刻データがついたものを想定1202051820143_XXXXXXX.json sample.component.ts1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950export class SampleComponent implements OnInit { // MeataDataを受け取る変数を宣言 public time = []; // 取得データのタイムスタンプ public filesNames = []; // 選択したファイルの情報表示用に名前を格納する // 選択したファイルの中身のデータを受け取る変数を宣言 public filesData = []; // File読み込み時に発火するメソッド selectFile(evt) { // 変数データの初期化 this.time = []; // 取得データのタイムスタンプ this.filesName = []; // ファイル名 this.filesData = []; // ファイルの中身のデータ // inputしたファイルをFilelistオブジェクトとして取得 // FileListオブジェクトの中に複数のfileオブジェクトが含まれる let selectFiles = evt.target.files; // データ取得ロジック // -----略------- // MetaDataを取得するロジック for (let i = 0, numFiles = selectFiles.length; i &lt; numFiles; i++) { // 1. FileListから単一のfileオブジェクトを抽出 const f = selectFiles[i]; // fileオブジェクトを格納 // 2. ファイル名から拡張子を除いた値を取得 const filename = f.name.match(/(.*)\\.json$/)[1]; // 3. ファイル名を分解して要素情報を取得 const tmp = filename.split('_'); // console.log(tmp); // [&quot;202051816143&quot;, &quot;XXXXXXX&quot;] // 4. 各要素の値を抽出 // 4.1. タイムスタンプを配列として複数取得 if (this.time !== tmp[0]) { this.time = this.time.concat(tmp[0]); } // 4.2. XXXXX部分 this.filesName = this.selectedRegions.concat(tmp[1]); } console.log(this.filesName); // HTMLにfilesNameを双方向バインディング指定していれば、画面に表示される 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONファイル(複数)の読み込み [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する MDNドキュメント MDN File MDN FileList MDN FileReader MDN Blob File APIを使用 JavaScriptでFile APIをファイル操作方法ついて解説 web.dev JavaScriptでファイルを読み込む MDN ウェブアプリケーションからのファイルの使用 JavaScriptでJSONファイルを保存する/開く方法 Angular FileAPIのonloadではアロー関数を使う jQuery or Pythonを使用 jsonファイルの読み込み纏め How To Read Local JSON Files In Angular Angular 4,5 @angular/common/httpのHttpClientとrxjs/ObservableのObservableを使う angularのassetsにファイルを置く前提であり今回とは異なった その他 ブラウザからドライブにファイルの書き込みができるNative File System APIとは？ JSON JavaScriptでの扱い JSONの扱い方を解説！PythonやJavaScript・Swiftでの基本的な使用法とは。配列取得や出力方法も紹介 Javascript|JSONでの、レコードの表現方法（配列、連想配列）→{}と[]の違い","link":"/Angular-JavaScript-JSON%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%81%BF/"},{"title":"[Angular JavaScript] JSONデータのファイル化と出力 ~取得したデータを任意の名称で保存するロジック~ (TypeScript)","text":"Angular APでローカル端末にファイルを出力する機能をWEB APに実装する手順を解説します。外部API(ex. AWS)からService経由でGETしたデータをLocal端末に保存するケースを想定しています。色々試したものの、WEB APはセキュリティ制約が多いので、やり方が限られました。 1. 基礎知識 1.1. 今回の手法(JacaScriptのdownloadを使用) 1.2. その他の手法 2. 単一ファイルを取得 2.1. get-file.component.html 2.2. get-file.component.ts 2.3. 実装例 3. 複数ファイルをダウンロード 4. 参考 関連記事 ファイルのダウンロード その他 jQuery or Pythonを使用 JSON JavaScriptでの扱い MDNドキュメント 1. 基礎知識1.1. 今回の手法(JacaScriptのdownloadを使用)詳しくは手順を参考にしてください リンクタグのDOMを取得してそこからdownload 保存するJSONファイルの名前を一意に定義 レスポンスデータをJSON形式に変換 JSON.stringify()を使用 HTMLのリンク要素を生成 link = document.createElement() リンク先にJSON形式の文字列データを置いておく link.hrel = ‘data:text/plain,’ + encodeURIComponent(data); 保存するJSONファイルの名前をリンクに設定 link.download = fileName ファイルを保存 link.click()で自動で疑似的にリンクをクリックさせる ポイント プラグインの導入や、ブラウザの制約無しという条件であれば、これ以外の手法は現状ありませんでした ファイルの保存先は指定不可 端末の”ダウンロード”に入ります セキュリティの都合上、ブラウザから直接端末のドライブに読み書きできないようになっているようです 1.2. その他の手法 Device Storage API Native File System API 保存先の指定が可能1このAPIはユーザーのデバイス上にあるファイルを読み込んだり、任意のディレクトリにファイルを書き込むことができるAPIです。途中段階のAPIですが、このAPIが提供されることでスマホアプリやデスクトップアプリのような機能をWebアプリでも提供できるようになります。 今回は採用しません ブラウザによっては動かず、APの利用に前提条件ができてしまう為 採用する場合は以下を参考にどうぞ ブラウザからドライブにファイルの書き込みができるNative File System APIとは？ 2. 単一ファイルを取得以下の構成を想定 get-file.component get-file.component.html get-file.component.ts service sample.service 2.1. get-file.component.html (click)イベントでメソッドを起動するボタンを作成 TS側に外部からデータを取得して、ファイルとして保存するロジックを書きます get-data.component.html 1&lt;button mat-raised-button (click)=&quot;submit()&quot;&gt;Get Data&lt;/button&gt; その他：フォームやチェックリスト等を作成 問い合わせ用のパラメータ設定をユーザが自由に弄れるようにするため 別記事で解説 ＆ 今回の趣旨と異なるため省略 2.2. get-file.component.ts(click)イベントで発火するメソッドをこちらで作りこみます submit() 機能 外部からJSONデータを取得 外部APIへの問い合わせを実行するServiceを呼び出す ファイル名を自動生成 時刻を自動取得＆フォームの入力値と合わせる 取得データを加工してJSONファイル化 2.3. 実装例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768submit() { // 1. 各種パラメータの取得 // ----1.1. ファイル名のprefixに付ける日時データを取得--- // Dateオブジェクトの作成 const now = new Date(); // 各日時要素を取得 const year = String(now.getFullYear()); // 年 // 1月=0と出るため+ const month = String(now.getMonth() + 1); // 月 const date = String(now.getDate()); // 日 const hour = String(now.getHours()); // 時 const min = String(now.getMinutes()); // 分 const sec = String(now.getSeconds()); // 秒 // YYYYMMDDHHMMSの形式で変数timeにまとめる const time = year + month + date + hour + min + sec; // 1.2. AWSへの問い合わせ用のパラメータを取得 // 今回はAWSから情報を取得するパターンを想定 // （認証とregionの指定、その他パラメータが必要） // 1.2.1. Credential認証 AWS.config.credentials = new AWS.Credentials(AWS_CONFIG.accessKeyId, AWS_CONFIG.secretAccessKey); // 1.2.2. チェックされたリージョンリストを取得 const REGION = this.makeRegionList(); // 1.2.3. 問い合わせ用のパラメータ(ex. sampleParameter)の取得 const parameter = this.makeSampleParameterList(); // 2. 外部APIへの問い合わせとファイル化---- // Service経由でデータを取得 // forkjoinを利用する為に返り値をobservablesに格納 let observables = REGION.map(region =&gt; { // 引数としてRegion情報を渡す return this.sampleService.getData(region, resourceType).pipe(catchError(e =&gt; observableOf({&quot;error&quot;: e}))) }); // 3. ファイル化 // リクエストの終了を待って返り値に処理を加える // 非同期処理の待ち合わせの為にforkJoinを利用 forkJoin(observables).subscribe( response =&gt; { // Observableをsubscribeして、中の値を取り出し、ファイルとして出力 // レスポンスを加工してjsonファイルとURLを作る // 3.1. 保存するJSONファイルの名前: yyyymmddhhmmss-region_name.json とする // 拡張子をfiletypeで指定 const filetype = '.json'; // file名を設定 const fileName = time + '_' + REGION + filetype; // 3.2. データをJSON形式の文字列に変換する。 const data = JSON.stringify(response); // 出力:リンクタグのDOMを取得してそこから行う // 3.3. HTMLのリンク要素を生成する const link = document.createElement('a'); // 3.4. リンク先にJSON形式の文字列データを置いておく。 link.href = 'data:text/plain,' + encodeURIComponent(data); // 3.5. 保存するJSONファイルの名前をリンクに設定 link.download = fileName; // 3.6. ファイルを保存 link.click(); }); 3. 複数ファイルをダウンロード処理を複数回実行する必要があります。問い合わせ処理とファイル化処理を特定のパラメータに応じてfor文でループさせます。 想定するシチュエーション AWSからデータを取得 指定した各region毎の情報をファイル化します 機能連携イメージ ボタンを押下 submit()メソッドが発火 各種パラメータを取得 ファイルの命名と問い合わせに必要な情報を集める 問い合わせを実行（データを持ってくる） 特定のパラメータ数回、外部からデータを取得 ⇒ 配列に格納 外部APIに問い合わせを実行するサービス(sampleService)を呼び出して処理はそちらに任せる ファイル化処理 ファイルを分けたい単位（特定のパラメータより規定） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475// データを取得 ⇒ ローカルにJSONファイルを保存するメソッドsubmit() { // 1. 各種パラメータの取得 // ----1.1. ファイル名のprefixに付ける日時データを取得--- // Dateオブジェクトの作成 const now = new Date(); // 各日時要素を取得 const year = String(now.getFullYear()); // 年 // 1月=0と出るため+ const month = String(now.getMonth() + 1); // 月 const date = String(now.getDate()); // 日 const hour = String(now.getHours()); // 時 const min = String(now.getMinutes()); // 分 const sec = String(now.getSeconds()); // 秒 // YYYYMMDDHHMMSの形式で変数timeにまとめる const time = year + month + date + hour + min + sec; // 1.2. AWSへの問い合わせ用のパラメータを取得 // 今回はAWSから情報を取得するパターンを想定 // （認証とregionの指定、その他パラメータが必要） // 1.2.1. Credential認証 AWS.config.credentials = new AWS.Credentials(AWS_CONFIG.accessKeyId, AWS_CONFIG.secretAccessKey); // 1.2.2. チェックされたリージョンリストを取得 const REGIONS = this.makeRegionList(); // 1.2.3. 問い合わせ用のパラメータ(ex. sampleParameter)の取得 const parameter = this.makeSampleParameterList(); // 2. 外部APIへの問い合わせとファイル化---- // 以降の処理をsampleParameter毎にループさせる for (let a = 0, numSampleParameter = sampleParameter.length ; a &lt; numSampleParameter; a++) { // ------2.1. region数回 AWSへの問い合わせを実行--------- // forkjoinを利用する為に返り値をobservablesに格納 const observables = REGIONS.map(region =&gt; { // 引数としてRegionを渡す return this.sampleService.getData(region).pipe(catchError(e =&gt; observableOf({&quot;error&quot;: e}))) }); // ------2.2. ファイル化処理をregion数回ループさせる------- for (let i = 0, numRegions = REGIONS.length ; i &lt; numRegions; i++) { // リクエスト(非同期処理)の終了をforkjoinで待ち合わせる forkJoin(observables[i]).subscribe( response =&gt; { // Observableをsubscribeして、中の値を取り出し、変数データの内容を変数responseとして扱う // 2.2.1. レスポンスを加工してjsonファイルとURLを作る // 保存するJSONファイルの名前: yyyymmddhhmmss-region_name.json とする // 拡張子をfiletypeに指定 const filetype = '.json'; // file名を設定 const fileName = time + '_' + REGIONS[i] + filetype; // 2.2.2. データをJSON形式の文字列に変換 const data = JSON.stringify(response); // 出力:リンクタグのDOMを取得してそこから行う // 2.2.3. HTMLのリンク要素を生成する。 const link = document.createElement('a'); // 2.2.4. リンク先にJSON形式の文字列データを置いておく link.href = 'data:text/plain,' + encodeURIComponent(data); // 2.2.5. 保存するJSONファイルの名前をリンクに設定 link.download = fileName; // 2.2.6. ファイルを保存 link.click(); }); } // -------ファイル生成ループ終了-------- } service側の処理や受け渡す変数、ファイル名はシチュエーションに合わせて補完してください 4. 参考関連記事 [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック ファイルのダウンロード JSでダウンロードを実装した話 JavaScriptでローカルにファイルを保存する方法（その1） JavaScriptでダウンロードされるファイルの保存場所を指定する [Angular] CSV ファイルを出力したときにやったこと JavaScriptでJSONファイルを保存する/開く方法 JavaScriptでFile APIをファイル操作方法ついて解説 web.dev JavaScriptでファイルを読み込む MDN ウェブアプリケーションからのファイルの使用 その他 JavaScriptで現在の日付、時刻を取得する - JavaScript プログラミング Dateオブジェクト ブラウザからドライブにファイルの書き込みができるNative File System APIとは？ jQuery or Pythonを使用 jsonファイルの読み込み纏め How To Read Local JSON Files In Angular JSON JavaScriptでの扱い JSONの扱い方を解説！PythonやJavaScript・Swiftでの基本的な使用法とは。配列取得や出力方法も紹介 MDNドキュメント MDN File MDN FileList MDN FileReader MDN Blob","link":"/Angular-JSON%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E5%8C%96%E3%81%A8%E5%87%BA%E5%8A%9B-%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%81%8B%E3%82%89%E5%8F%96%E5%BE%97%E3%81%97%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E4%BB%BB%E6%84%8F%E3%81%AE%E5%90%8D%E7%A7%B0%E3%81%A7%E4%BF%9D%E5%AD%98%E3%81%99%E3%82%8B/"},{"title":"[Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける","text":"やりたいこと バリデーションで引っかかった内容毎にエラーメッセージを出し分けて、何を直すべきか？をユーザにリアルタイムで教えたい 入力値に不備がある状態で、ユーザにリクエストをさせない、できない仕組みを作る 同一のフォームで複数のバリデーションルール毎にエラーメッセージを切り替えるには、テンプレート駆動フォームではなく”リアクティブフォーム”の利用が必要​ Angularのフォーム テンプレート駆動/Reactive（モデル駆動） フォームの種類 テンプレート駆動フォーム フォームの検証ルールをテンプレートとなるhtmlファイルに記載 入力コントロール(Ex. &lt;input&gt;)に属性を付けると、それに対応したFormControlオブジェクトやFormGroupオブジェクトが生成される バリデーション 属性で指定(Ex. required)することで、該当するオブジェクトに適応される 仕組み コンポ―ネントから、オブジェクトにアクセス Reactive（モデル駆動）フォーム テンプレート側で ts側に記載 メリット 柔軟なバリデーション、入力されたデータの複雑な制御を実現可能 デメリット コードが冗長になりがち 使いどころ 同一のフォーム内で複数のバリデーションルール毎にエラーメッセージを切り替えたいケース Ex. 未入力 or 文字数の不足 or 禁止された入力値の型(大文字禁止なのか等)をユーザにリアルタイムで伝えることでUXの向上を図れる 仕組み コンポーネントにあらかじめFormControlオブジェクトやFormGroupオブジェクトを作っておく テンプレートの入力コントロール(Ex. &lt;input&gt; 要素)からそれらのオブジェクトを参照 ​ 実装手順 sampleというコンポーネントがあるものとする​ sample.component.html sample.component.ts​モジュールの有効化​ app.component.module.tsでReactiveFormsモジュールをimport1234567891011// Reactive formimport { ReactiveFormsModule } from '@angular/forms'// テンプレート駆動型と同様にFormsModuleも必要​~略~​ importts：[​ FormsModule, ReactiveFormsModule // 追加 ] ​ 対象のコンポーネントでも必要なモジュールをimport sample.component.ts1import { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms' FormBuilder 必須ではないが、これを利用すると短く楽に記述できる​実装例 Formbuilderを利用する事で完結に記述した例 ID x Password型のシンプルなフォームは基本以下でよさそう 時間を作れればSchematicsで自動生成できるようにしておきます​#### sample.component.ts Formbuilderをconstructorで注入123456789101112131415161718192021222324252627282930313233343536// 1. import moduleimport { FormGroup, FormControl, FormBuilder, Validators } from '@angular/forms'​export class SampleComponent implements OnInit{​ // 2.1. FormGroup参照用の変数を宣言 credentialForm:FormGroup;​ // 2.2. FormControl参照用の変数を宣言 id = new FormControl(&quot;&quot;, [ Validators.required, Validators.minLength(20) ]); pass = new FormControl(&quot;&quot;, [ Validators.required, Validators.minLength(40) ]);​ // 3. Formbuilderの注入 FormBuilderオブジェクトを生成 constructor(private fb: FormBuilder) { // 4. FormBuilderオブジェクトを使ってFormGroupとFormControlを作成 this.credentialForm = this.fb.group({ // formControlと初期値、バリデート条件を列挙 id: this.id, pass: this.pass }) } // リクエスト実行時に入力値を参照するサンプル submit(){ // 入力値の参照 id = this.id.value.id; pass = this.pass.value.pass; this.sampleService(id, pass); // 認証機能を持つServiceに送る }} ​ 入力値の参照 this.formControlname.valueで取得可能になっている12this.id.value;this.pass.value; ​sample.component.html 入力コントロールとfonrControlオブジェクトの連携、バリデーションに応じたエラーメッセージの表示 maxlengthはhtml側に設定すべき ts側でも検知はできたが、規定した時数以上入力を不可にすることはできなかった為12345678910111213141516171819202122232425262728293031323334353637383940414243&lt;!-- 1. formGroupの設定 --&gt;&lt;form [FormGroup] = &quot;credentialForm&quot;&gt;​ &lt;mat-form-field&gt; &lt;mat-label&gt;accessKeyId&lt;/mat-label&gt;​ &lt;!-- 2. FormControlの結びつけ --&gt; &lt;input matInput formControlName=&quot;id&quot; placeholder=&quot;Ex. XXXXX...&quot; maxlength=&quot;20&quot;&gt;​ &lt;!--&amp;&amp;条件を付けないとエラー解消後もメッセージが残ってしまう為注意--&gt; &lt;!-- 3.1. エラーメッセージ 空欄,未入力時 --&gt; &lt;mat-error *ngIf=&quot;id.invalid &amp;&amp; id.invalid.required&quot;&gt;入力必須&lt;/mat-error&gt; &lt;!-- 3.2. エラーメッセージ 文字数不足時 --&gt; &lt;materror *ngIf=&quot;id.invalid &amp;&amp; id.errors.minlength&quot;&gt;字数不足&lt;/mat-error&gt;​ &lt;!-- 3. FormControlの結びつけ --&gt; &lt;mat-form-field&gt; &lt;mat-label&gt;Password&lt;/mat-label&gt; &lt;input matInput formControlName=&quot;pass&quot; placeholder=&quot;Ex. FdOI0...&quot; maxlength=&quot;40&quot; [type]=&quot;hide ? 'password' : 'text'&quot; &gt; &lt;!---pattern=&quot;[a-zA-Z0-9!-/:-@¥[-`{-~]*&quot;---&gt; &lt;!--目のアイコンの押下で入力値の表示を切り替え---&gt; &lt;button mat-icon-button matSuffix (click)=&quot;hide = !hide&quot; [attr.aria-label]=&quot;'Hide password'&quot; [attr.aria-pressed]=&quot;hide&quot; &gt; &lt;mat-icon&gt;{{hide ? 'visibility_off' : 'visibility'}}&lt;/mat-icon&gt; &lt;/button&gt; &lt;mat-error *ngIf=&quot;pass.errors.required&quot;&gt;入力必須&lt;/mat-error&gt; &lt;mat-error *ngIf=&quot;pass.errors.minlength&quot;&gt;字数不足&lt;/mat-error&gt; &lt;/mat-form-field&gt;​&lt;/form&gt;​ ​ 送信ボタンの無効化 一つでもバリデーションエラーがあればdisabledで無効化 formGroup名.invalid フォームグループ内で一つでもバリデーションエラーがあればtrue1234&lt;button (click)=&quot;submit()&quot; [disabled]=&quot;credentialForm.invalid&quot;&gt;送信&lt;/button&gt; 他のフォームのバリデーションチェックも条件に加える場合 ||でor条件を利用する1234&lt;button mat-raised-button (click)=&quot;submit()&quot; [disabled]=&quot;credentialForm.invalid || checkValidation&quot;&gt;Get Data&lt;/button&gt; 備考 より厳しくバリデーションを設定する場合は、patternと正規表現で大文字のみ、小文字英数、記号を一つ以上含めるといった指定も可能 正規表現を可視化してまとめたチートシート フォームコントロールのデータモデルの特定部分を更新 setValue()メソッド 値を更新 patchValue()メソッド 値を置き換える​​​ 振り返り：詳細なバリデーションチェックを実装することで、以下の効果がある UXの向上 送信ボタンを押して画面遷移を行う前に、リアルタイムで入力値の誤りに気づける エラーハンドリングの実装の簡略化 誤った入力値によるリクエストを未然に防ぐことで、エラーのパターンが減る セキュリティの向上 不正な入力を防げる​​参考関連記事 [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) その他 ★Angular日本語ドキュメント/リアクティブフォーム 正規表現を可視化してまとめたチートシート","link":"/Angular-ReactiveForm-x-mat-input-%E4%B8%80%E3%81%A4%E3%81%AE%E5%85%A5%E5%8A%9B%E6%AC%84%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E5%87%BA%E3%81%97%E5%88%86%E3%81%91%E3%82%8B/"},{"title":"[Angular/TypeScript(JavaScript)] 非同期処理/待ち合わせ処理のまとめ (Observable/subscribe/forkJoin/Promise/async/await/then)","text":"Angular等のTypeScriptベースのフレームワークでフロントエンドを開発する際には、待ち合わせ処理が度々問題となる 外部通信が基本的に非同期処理であるため、返り値を加工するにはひと手間加える必要がある 前提知識同期/非同期/待ち合わせ処理とは？プログラムを書く前にどれが最適化か？を判断する必要がある（書き方が変わってくる） 非同期処理 実行完了を待たずに次の処理を並列で開始する メリット 処理の高速化を図れる。 一部の処理でエラーが出ても、他の処理は問題無く動く 処理完了までユーザーを待たせない デメリット 返り値を使って次の処理を行いたい時に問題が発生する(返り値無しの状態で次の処理を実行してしまう) 同期処理 処理完了まで他の処理をストップする メリット 処理を順に実行できるため、プログラムを書きやすい デメリット 処理完了までユーザーを待たせる事になる 待ち合わせ処理 ある条件が満たされるまで処理を待たせる ex. 返り値が戻ってくるまである処理の開始を待たせる 同期処理とイコールではない 複数の処理群としてみると非同期でOKだが、個々の処理は待ち合わせて順番に実行させたいケースがある ユーザーが処理の完了を待つ必要がない → 非同期でOK データ取得後に加工したい → 待ち合わせ処理が必要 TypeScript(JavaScript)においては、以下のような処理が非同期で実行されることを考慮する必要がある API通信 データベース通信 その他の重い処理全般 TypeScript(JS)の待ち合わせ処理問題とは上述の非同期で動く特性から、初級者は以下の問題でハマることが多い TypeScript(JS)では、プログラムが書かれた順に動くとは限らない 基本的に非同期処理で動く 非同期処理は重い処理の終了を待たずに、次の処理を進められるので、高速化という意味では有効だが、困るシーンもある よくあるケース 外部APIと通信してデータを取得する場合、その戻り値が帰ってくる前に次の処理に進んでしまう。そのため、以降の処理がデータ無しで行われてしまう 正しく外部にリクエストできている筈が、データ＝undefinedと出力されてしまう この辺りはChromeの開発モードで出力順を見ると理解し易い 回避策: 待ち受け処理/同期処理を実現する（返り値が来た後に次の処理を実行させるように書き換える） 書き方は色々ある Observable, subscibeを活用して待ち合わせ処理を実現する Observable, forkJoin()を活用して待ち合わせ処理を実現する aync/awaitを利用して同期処理化する Promise, then()を活用して同期処理化する Observable型を使って待ち合わせ処理を実現するパターン Angularでは適したケースであれば、基本的にPromiseよりもObservableが推奨されている Observable と 他の技術の比較 service側の返り値をobservable型に定義、component側で.subscribe()で受け取り、その中に処理を書き込む ポイント Observableでも待ち合わせ処理は実現できるが、同期処理はできない 同期処理についてはPromiseを使う ストリームを扱える 1. Observable &amp; subscribe() Service側 返り値をObservable型で定義 Component側 .subscribe()で返り値を受け取る sample.service.ts Observable型で返り値を返す123456getmethod(){ return observable = new Observable&lt;number&gt;(observer =&gt; { // 外部APIとの通信処理 });} sample.component.ts 書式：observable.subscribe() 123456this.sampleService.getMethod().subscribe(value =&gt; { // 返り値を利用する処理をここに書く}); 2. Observable &amp; forkJoin() forkJoin()を活用すると、Observableの全ての処理の完了を待って次の処理を実行できる ユースケース 複数回外部APIにリクエストを実行して、全てのデータが帰ってきてから加工 書式 123456789// 複数の外部リクエストを実行してobservable型で受けとる// 配列hogehogeの中身を一つずつ引数として渡して実行する例const observable = hogehoge.map(hoge =&gt; { return this.sampleService.getData(hoge).pipe(catchError(e =&gt; observableOf({&quot;error&quot;: e})))});// 待ち合わせ処理forkJoin(observables).subscribe( response =&gt; { // 以降に処理を記載 活用例は以下の記事に記載した [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) Promise型を使って同期処理化するパターン3. async/awaitを活用する asyncをつけた関数の返り値はPromise型となる asyncをつけた関数はawaitで待てる await Promiseの値が取り出されるまで待つ async awaitキーワードを使っている関数の頭に付ける必要がある import必要？ ポイント 同期処理化したい関数の宣言時：頭にasyncを付ける 同期処理化したい関数の実行時：awaitを付ける awaitはasyncを付けた関数内でしか実行できない Serviceで外部API通信を実行 ⇒ Component側の変数に受け取る例 sample.component.ts awaitを付けた関数の処理を待つ123456let result; // 返り値を受け取る変数 async ngOnInit() { // Service経由で外部APIからデータを受け取る this.result = await this.sampleService.getMethod() console.log(this.getData); } sample.service.ts 関数の頭にasyncを付ける12async getMethod(){} 複数の関数を順に実行する例12345678910111213// プログラムの大筋async function main() { const x = await getX() const y = await getY() console.log(x + y)}async function getX() { return 1}async function getY() { return 2}main() アロー関数の場合はasyncをつける箇所が異なる Angularの場合は基本的にアロー関数が推奨されているのでこの書き方も覚えた方が良い 12345678// functionによる関数宣言async function sampleFunc() { // 処理内容}// アロー関数による関数宣言const sampleFunc = async() =&gt; { // 処理内容} 4. Promise, .then()を活用する awaitではなくthen()を使っても良い 基本的にawaitの方がすっきり描けるので推奨はしない async付きの関数の返り値はPromise型となる Promise型であればthen()関数を利用して同期処理化できるhttps://tech.playground.style/javascript/asynchronous-processing/ sample.service.ts Promise型で宣言1234// initiate executionlet promise = new Promise&lt;number&gt;((resolve, reject) =&gt; { // Executer fn...}); sample.component.ts Promise型の123promise.then(value =&gt; { // handle result here}); 具体的な実装例は以下を参照ください [Angular x AWS SDK for JavaScript] SPAからAWSのデータを取得する際の待ち合わせ処理(非同期処理) 参考関連記事 [Angular x AWS SDK for JavaScript] SPAからAWSのデータを取得する際の待ち合わせ処理(非同期処理) [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する 非同期処理参考 Angular 日本語ドキュメント/Observable と 他の技術の比較 ここのチートシートが役立つ 【JavaScript】非同期処理の完了をpromiseとasync/awaitで待つ方法 Promiseの使い方、それに代わるasync/awaitの使い方 JavaScript 非同期処理 Promise/awaitの詳細について 仕事ですぐに使える TypeScript p128の”Promise の分岐と待ち合わせの制御”が参考になる ★TypeScriptで複数の非同期処理を制御する方法 ページ終盤にAngularベースのソースあり","link":"/Angular-TypeScript-JavaScript-%E9%9D%9E%E5%90%8C%E6%9C%9F%E5%87%A6%E7%90%86-%E5%BE%85%E3%81%A1%E5%90%88%E3%82%8F%E3%81%9B%E5%87%A6%E7%90%86%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81-Observable-Promise-async-await/"},{"title":"[Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する","text":"今回はAngular開発におけるComponentの自動生成手法について解説します。アプリの基本的な画面はこの手法を用いれば、コードを書くまでもなく高速で開発できます。サービスとしての独自性の無い単純作業は極力自動化しましょう。 Angular Schematicsとは？ 準備 Angular PJを生成 Schematicsをinstall 画面表示用のComponentを生成 ナビゲーションを自動生成 画面に反映 1. top componentに埋め込む 2. topをルーティングで指定 3. Localhostで画面への反映を確認 自動生成されるコードの解説 参考 Angular Schematicsとは？ Schematicsの機能 カスタマイズされたComponentをコマンドで自動生成 ありがちなUIは大抵これで自動生成できます 今回は例として画面のサイズに応じて自動的に開閉するサイドナビとツールバーでできたナビゲーションを自動生成します モジュールの追加 設定の変更 例えば、Angular CLIの以下のコマンドの処理はSchematicsで定義されています ng generate ng add @angular/cdkと@angular/materialに含まれています Angular CLIのng generateやng add といったコマンドの処理はAngular Schematicsによって定義されている 自分で作ることもできます 既存のSchematicsを拡張することも可能 実行コマンド 1ng generate @angular/material:&lt;schematics-name&gt; &lt;component-name&gt; 自作可能 ありがちな構成を用意しておけば、サービスを高速で量産できます わざわざ手順書を残すよりも遥かに効率的です 準備Angular PJを生成生成済みであればここはスルーしてください APの雛形を作成1ng new 'sample-ap' Angular PJの初期画面はこんな感じです1ng serve --open Angularの初期画面をまっさらにします src/app/app.component.html をrouter-outletだけを残して削除1&lt;router-outlet&gt;&lt;/router-outlet&gt; Schematicsをinstall ng addコマンドで npm installを使って入れると設定ファイルを弄る必要が出たりします まずはAngular Materialを入れます1ng add @angular/material 出力 好きなthemeを選択 ひとまずIndigo/Pinkにします 他も基本yesでOKです123456789101112/firebase-sample (master) $ ng add @angular/materialInstalling packages for tooling via npm.Installed packages for tooling via npm.? Choose a prebuilt theme name, or &quot;custom&quot; for a custom theme: ❯ Indigo/Pink [ Preview: https://material.angular.io?theme=indigo-pink ] Deep Purple/Amber [ Preview: https://material.angular.io?theme=deeppurple-amber ] Pink/Blue Grey [ Preview: https://material.angular.io?theme=pink-bluegrey ] Purple/Green [ Preview: https://material.angular.io?theme=purple-green ] Custom ? Set up HammerJS for gesture recognition? Yes? Set up browser animations for Angular Material? YesUPDATE package.json (1437 bytes) cdkをinstall1ng add @angular/cdk 出力 packege.jsonの中身を自動で改修してくれます12Skipping installation: Package already installedUPDATE package.json (1437 bytes) 画面表示用のComponentを生成 top1\\src\\app&gt; ng g component top ナビゲーションを自動生成 実行 1\\src\\app&gt; ng g @angular/material:navigation 出力 123456$ ng generate @angular/material:navigation main-navCREATE src/app/navi/navi.component.scss (193 bytes)CREATE src/app/navi/navi.component.html (938 bytes)CREATE src/app/navi/navi.component.spec.ts (1234 bytes)CREATE src/app/navi/navi.component.ts (583 bytes)UPDATE src/app/app.module.ts (1126 bytes) src/appの配下にmain-navコンポーネントが自動生成されています 12345678src\\app\\main-nav&gt; lsMode LastWriteTime Length Name---- ------------- ------ -----a---- 2020/04/23 14:59 936 main-nav.component.html-a---- 2020/04/23 14:59 193 main-nav.component.scss-a---- 2020/04/23 14:59 1256 main-nav.component.spec.ts-a---- 2020/04/23 14:59 598 main-nav.component.ts 画面に反映1. top componentに埋め込む src\\app\\top\\top.component.html app-component_nameで要素を作るだけで入れ子にできます 1&lt;app-main-nav&gt;&lt;/app-main-nav&gt; &lt;!--main-naviコンポーネントを参照--&gt; 2. topをルーティングで指定 画面起動時にtopコンポーネントが表示されるように設定 src\\app\\app-routing.module.ts 123456//routeを定めるコンポーネントをimportimport { TopComponent } from './top/top.component';const routes: Routes = [ {path: '', redirectTo: '/top', pathMatch: 'full'}, //デフォルトのパス。AP起動時 {path: 'top', component: TopComponent }, // top画面のパスを定義 3. Localhostで画面への反映を確認 APを起動 1ng serve --open 以下のようにナビが表示されます ツールバーには自動的にAngular-PJ名が入ります サイドナビの表示は画面サイズに応じて変化 大 デフォルトで表示 小 デフォルトでは非表示/バーガーアイコンの押下で開閉 Windowを狭めてみる バーガーアイコンを押下 Menuが表示されます あとは各画面を生成してサイドナビのMenuから飛べるようにすれば、アプリの雛形ができます この程度の画面はSchematicsを使って3分で実装しましょう 初級者が自力で書くと、ここまででもだいぶ工数を食います 自動生成されるコードの解説 Schematicsで自動生成したデフォルト main-nav.component.html angular materialのmat-toolberやmat-sidenaviが使われています WEBアプリだと毎回書きがちなパターン1234567891011121314151617181920212223242526272829303132&lt;mat-sidenav-container class=&quot;sidenav-container&quot;&gt; &lt;!--サイドナビ--&gt; &lt;mat-sidenav #drawer class=&quot;sidenav&quot; fixedInViewport [attr.role]=&quot;(isHandset$ | async) ? 'dialog' : 'navigation'&quot; [mode]=&quot;(isHandset$ | async) ? 'over' : 'side'&quot; [opened]=&quot;(isHandset$ | async) === false&quot;&gt; &lt;mat-toolbar&gt;Menu&lt;/mat-toolbar&gt; &lt;mat-nav-list&gt; &lt;!--ここをrouterLink=&quot;/pass-name&quot;で各画面に飛べるように改修--&gt; &lt;a mat-list-item href=&quot;#&quot;&gt;Link 1&lt;/a&gt; &lt;a mat-list-item href=&quot;#&quot;&gt;Link 2&lt;/a&gt; &lt;a mat-list-item href=&quot;#&quot;&gt;Link 3&lt;/a&gt; &lt;/mat-nav-list&gt; &lt;/mat-sidenav&gt; &lt;!--ヘッダー--&gt; &lt;mat-sidenav-content&gt; &lt;mat-toolbar color=&quot;primary&quot;&gt; &lt;!--sidenavの開閉用ボタン--&gt; &lt;button type=&quot;button&quot; aria-label=&quot;Toggle sidenav&quot; mat-icon-button (click)=&quot;drawer.toggle()&quot; *ngIf=&quot;isHandset$ | async&quot;&gt; &lt;mat-icon aria-label=&quot;Side nav toggle icon&quot;&gt;menu&lt;/mat-icon&gt; &lt;/button&gt; &lt;span&gt;scrab-for-aws&lt;/span&gt; &lt;/mat-toolbar&gt; &lt;!-- Add Content Here --&gt; &lt;/mat-sidenav-content&gt;&lt;/mat-sidenav-container&gt; Tips ヘッダーに複数の要素を表示して、画面サイズに応じて配置を変化させたい場合 要素の間に以下を挟めばレスポンシブな余白ができます1&lt;span style=&quot;flex:auto;&quot;&gt;&lt;/span&gt;&lt;!----余白--&gt; この後の作業イメージ（画面遷移の実装） 各画面用のコンポーネントを生成1ng g component &lt;component-name&gt; app-routing.module.tsでパスを設定 main-nav.component.htmlを改修 各ボタンのrouterLinkに各Componentのパスを設定 参考 公式 Schematics Schematicsの作り方 Advent Calender 2018 Schematicsを作ってみよう Angular CLI 6.0.0のng addとSchematicsを使ってAngularMaterialを簡単セットアップ","link":"/Angular-Schematics-%E9%96%8B%E9%96%89%E5%8F%AF%E8%83%BD%E3%81%AA%E3%82%B5%E3%82%A4%E3%83%89%E3%83%8A%E3%83%93%EF%BC%86%E3%83%84%E3%83%BC%E3%83%AB%E3%83%90%E3%83%BC%E3%82%923%E5%88%86%E3%81%A7%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B/"},{"title":"[Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする","text":"Angularでは基本的にComponent単位で開発を行いますが、複数のComponentで使い回す機能については”Service”という形で切り出すのが一般的です。初めは各Componentのtsファイルに機能をそのまま書いてしまうと思います。そこから切り出す過程と注入(Injection)の手順や、Serviceについて解説します。 AngularにおけるServiceという概念 ロジックのサービス分割手順 日時取得機能の例 想定する状況 Serviceを作成 Serviceの実装 Serviceの注入(DI) ComponentからServiceの関数を使用する 参考 関連記事 AngularにおけるServiceという概念 機能をサービスクラス(tsファイル)として切り出し、複数のComponentから使用させることが可能 Serviceから各Componentに”依存性注入(Dependency Injection, DI)”とを行うことでServiceの中の関数を使用できる 一般的なAngularの開発 Component側にはビュー（見栄え）に関するロジックのみを書く アプリ固有のビジネスロジックはService側に全て切り出し、Componentはそれを呼ぶだけ こうすることで、各ファイルがコンパクトになり可読性が大きく向上する ロジックのサービス分割手順 日時取得機能の例想定する状況 Componentのtsファイルに、以下の様な日時を取得してフォーマットを整形するロジックを書いていたとする 他のComponentでもこの機能を使い回せるように、Serviceとして切り出す 1234567891011121314// --日時データを取得-- // Dateオブジェクトの作成 const now = new Date(); // 各日時要素を取得 const year = String(now.getFullYear()); // 年 // 1月=0と出るため+ const month = String( (&quot;00&quot; + (now.getMonth() + 1)).slice(-2)); // 月 const date = String( (&quot;00&quot; + now.getDate()).slice(-2)); // 日 const hour = String( (&quot;00&quot; + now.getHours()).slice(-2)); // 時 const min = String( (&quot;00&quot; + now.getMinutes()).slice(-2)); // 分 const sec = String( (&quot;00&quot; + now.getSeconds()).slice(-2)); // 秒 // YYYYMMDDHHMMSS形式にまとめる const time = year + month + date + hour + min + sec; return time; まずは関数として切り出してみる Component内で関数として切り出せる機能＝Service内の関数として切り出し可能 以下のgetTime()がServiceからの関数呼び出しに変わるイメージ 12345678910111213141516171819cost t = getTime();...中略... getTime() { // ----ファイル名のprefixに付ける日時データを取得--- // Dateオブジェクトの作成 const now = new Date(); // 各日時要素を取得 const year = String(now.getFullYear()); // 年 // 1月=0と出るため+ const month = String( (&quot;00&quot; + (now.getMonth() + 1)).slice(-2)); // 月 const date = String( (&quot;00&quot; + now.getDate()).slice(-2)); // 日 const hour = String( (&quot;00&quot; + now.getHours()).slice(-2)); // 時 const min = String( (&quot;00&quot; + now.getMinutes()).slice(-2)); // 分 const sec = String( (&quot;00&quot; + now.getSeconds()).slice(-2)); // 秒 // まとめる YYYYMMDDHHMMSS const time = year + month + date + hour + min + sec; return time; } Serviceを作成 ng gコマンドで雛形を自動生成可能 ~~.spec.tsはテスト用のファイルなので一旦スルーしてOK123\\src\\app\\service&gt; ng g service &quot;get-time&quot;CREATE src/app/service/get-time.service.spec.ts (339 bytes)CREATE src/app/service/get-time.service.ts (136 bytes) Serviceの実装 先ほどの関数をService側に転記 Component側のgetTime()関数は消す get-time.service.ts 1234567891011121314151617181920212223import { Injectable } from '@angular/core';@Injectable({ providedIn: 'root'})export class GetTimeService { constructor() { } // 日時を取得整形する関数 getTime() { // Dateオブジェクトの作成 const now = new Date(); // 各日時要素を取得 const year = String(now.getFullYear()); // 年 // 1月=0と出るため+ const month = String( (&quot;00&quot; + (now.getMonth() + 1)).slice(-2)); // 月 const date = String( (&quot;00&quot; + now.getDate()).slice(-2)); // 日 const hour = String( (&quot;00&quot; + now.getHours()).slice(-2)); // 時 const min = String( (&quot;00&quot; + now.getMinutes()).slice(-2)); // 分 const sec = String( (&quot;00&quot; + now.getSeconds()).slice(-2)); // 秒 // まとめる YYYYMMDDHHMMSS const time = year + month + date + hour + min + sec; return time; }} Serviceの注入(DI)Component側でServiceの関数を利用可能にする。以下はcomponentのtsファイルの話 serviceをimport1import { GetTimeService } from '../../service/get-time.service'; // get time logic 依存性注入 ここで宣言したtimeServiceという変数にServiceの中身が入るイメージ ”timeService.使いたい関数名”でService内の関数を呼び出せる123constructor( private timeService: GetTimeService,) { ComponentからServiceの関数を使用する constructreで宣言したservice名.関数名で実行1234// 日時取得＆整形ロジックの利用const time = this.timeService.getTime();// 結果を確認alart(time); 参考関連記事 [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages)","link":"/Angular-Service%E5%85%A5%E9%96%80-%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF%E3%82%92%E5%88%87%E3%82%8A%E5%87%BA%E3%81%97%E3%80%81%E8%A4%87%E6%95%B0Component%E3%81%A7%E5%86%8D%E5%88%A9%E7%94%A8%E5%8F%AF%E8%83%BD%E3%81%AB%E3%81%99%E3%82%8B/"},{"title":"[Angular mat-input] passwordの表示/非表示(*)を切り替えるアイコンを実装","text":"やりたいこと： パスワードのマスク(***と出る)を目アイコンでON/OFF type=passwordで入力値が**で表示される 覗き見を防止するための基本的な仕様だが、入力値の確認も可能にしたい​ やり方 html側 type=変数 条件分岐で ‘password’ : ‘text’に切り替わる 変数の初期値はpassword 入力欄に目アイコンのボタンを追加 mat-iconのvisibility、visibility_offを使用 matSuffixでbuttonを入力欄の右端に 押下時に入力値が見えるようにする ts側 条件分岐用に変数を定義1hide = true; ​‐ Angularにおける変数の条件分岐の書き方 以下は変数hideの値がtrueかfalseかで、?以降の:で区切られた値が採用されるという意味1[type]=&quot;hide ? 'password' : 'text'&quot; ​実装例 htmlの実装 input内のtype属性 変数hideの値による条件分岐でpassword or textに切り替わる つまり、表示/非表示(*)が切り替わる buttonを作成 mat-iconで目のアイコン(visibility, visibility_off)に mat-suffixで右端に (click)時にhideの値を変更 (click)=”hide = !hide”1234567891011121314151617181920212223242526272829 &lt;mat-form-field class=&quot;mat-input-margin2&quot;&gt; &lt;mat-label&gt;secretAccessKey&lt;/mat-label&gt; &lt;input matInput id=&quot;secretAccessKey&quot; skey=&quot;secretAccessKey&quot; [(ngModel)]=&quot;skey&quot; minlength=&quot;40&quot; maxlength=&quot;40&quot; pattern=&quot;[a-zA-Z0-9!-/:-@¥[-`{-~]*&quot; placeholder=&quot;Ex. FdOI0...&quot;​ [type]=&quot;hide ? 'password' : 'text'&quot; required #secretAccessKey=&quot;ngModel&quot; &gt; &lt;!--目のアイコンの押下で入力値の表示を切り替え---&gt; &lt;button mat-icon-button matSuffix (click)=&quot;hide = !hide&quot; [attr.aria-label]=&quot;'Hide password'&quot; [attr.aria-pressed]=&quot;hide&quot; &gt; &lt;mat-icon&gt;{{hide ? 'visibility_off' : 'visibility'}}&lt;/mat-icon&gt; &lt;/button&gt;​ &lt;mat-error&gt;入力必須&lt;/mat-error&gt;​ &lt;/mat-form-field&gt; ​ 公式のコードサンプル(stackblitz) 参考​関連記事 [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック Angular x AWS SDK for JavaScriptの始め方 [AWS SDK for JavaScript] WEBアプリ→AWSへのリクエスト認証時のエラーハンドリング その他 Angular Material Form field​","link":"/Angular-mat-input-password%E3%81%AE%E8%A1%A8%E7%A4%BA-%E9%9D%9E%E8%A1%A8%E7%A4%BA-%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B%E3%82%A2%E3%82%A4%E3%82%B3%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85/"},{"title":"[Angular] map() & filter() & mat-checkboxを使って選択値を配列に格納するロジック","text":"複数のチェックボックスの中で選択項目を判別して、それぞれの固有値を配列に格納するロジックの作り方を解説します。 以下のSample画面で言うと、チェックされたJapanの値を配列に格納します 使いどころ checkした項目に応じて外部サービスに対するリクエストに含めるパラメータを変化させる 基礎知識 Angularにおけるデータ加工ロジック map filter 実装 データ構造の定義 状態判別ロジック 配列データを引数としてリクエストを送る際の例 tsに定めたdataに応じてチェックボックスのリストを表示するHTML 基礎知識 記載例 画面で確認 おまけ: for文で書く場合 基礎知識 すぐに実装に取り掛かりたい方は飛ばしてOK Angularにおけるデータ加工ロジック 基本的にmapやfilterを利用する アンチパターン 何でもfor,if文 何故か? mapは並列処理 for文と比較して処理が高速 書式がシンプル 開発期間短縮 可読性向上 リファクタリングの簡略化 map map() 処理 引数として与えられた配列の各要素に対して、一つづつ関数を実行 カウンタが不要な配列向けのfor文というイメージでOKです 返り値 実行結果から新たな配列を生成 filter filter() 処理 引数として与えられたテスト関数を各配列要素に対して実行 配列向けのif文というイメージでOKです 返り値 テスト関数の条件に合格した要素からなる新しい配列を生成 利用イメージ 12345678// 配列を宣言const array = ['AA', 'BB', 'CC', 'DDD', 'EEEE', 'FFFFF'];// 配列arrayを引数として、条件式3文字以上の要素を抽出して、配列として返すconst result = array.filter(array =&gt; array.length &gt;= 3);console.log(result);// output: Array [&quot;DDD&quot;, &quot;EEEE&quot;, &quot;FFFFF&quot;] 構文は以下 value: 配列の要素 index: インデックス array: 操作中の配列本体1var newArray = arr.filter(callback(element[, index[, array]])[, thisArg]) 他の利用例は以下を参考にどうぞ MDNをご覧ください その名の通りのfilter()で絞り込み。（配列とかおれおれAdvent Calendar2018 – 12日目） 実装ざっくりイメージは以下 tsファイル 役割 データ構造の定義 判別ロジック (click)イベントで発火 html 役割 checkboxの表示 tsファイルで指定したデータの参照 (click)イベントの指定 データ構造の定義 配列dataに以下のようにデータ構造を定義します valueを読み替えて使用してください sample.component.ts1234567// dataにcheckboxの値とチェック状態の初期値：selectedを定義data = [ { value: 'Japan', selected: false}, // 初期値 true { value: 'America', selected: false}, { value: 'China', selected: false}, { value: 'England', selected: false},] 状態判別ロジック 状態を判別するmethodを宣言します ざっくりイメージ filter() data全体からチェック済みのもの(Selected=true)に絞る map() 残ったdataのvalueで配列を生成 Listに格納 sample.component.ts12345678910makeList() { // 格納先の配列を宣言 let countryList = []; // selectedからチェック状態を確認して、配列にを格納していく countryList = this.data .filter((d) =&gt; d.selected) // checkされているものに絞る .map((d) =&gt; d.value); // valueを取得 return countryList; //} 配列データを引数としてリクエストを送る際の例 選択値を使って外部サービスへリクエストを行うケースを想定 service側で受け取った変数に応じた分岐処理を用意しておくイメージです sample.component.ts1234567submit(){ // 選択値を受け取る const selectedCountries = this.makeList(); // 任意のServiceのメソッドを実行 getService.requesrMethod(selectedCountries)} tsに定めたdataに応じてチェックボックスのリストを表示するHTML基礎知識 ngFor 指定した配列をループ表示させる構造ディレクティブ べた書きするよりもすっきり書けます 今回は以下のように配列:dataをループさせています ngForのループの中でdataを変数itemとして使うという意味1*ngFor= &quot;let item of data; index as i&quot; ng-container x *ngFor 組み合わせると、ng-containerの中の要素全てを一まとまりでループさせることが可能です mat-checkbox 通常のcheckboxはイケてないのでAngular Materialを使います 通常のcheckboxを使う場合は”mat-checkbox”を”input”に読み替えてください Angularのフォーム 二種類あります テンプレート駆動型 書式がシンプルで手軽に実装可能であるため採用 #myForm=”ngForm” と設定することでこちらになる モデル駆動型 (Reactive駆動型) コードは冗長になりがち より柔軟に複雑な要件を満たせる記載例 sample.component.html 1234567891011121314151617181920&lt;div&gt;Choose Country&lt;/div&gt;&lt;!---formで選択したリージョンの情報を纏めてからリクエスト------&gt;&lt;form #myForm=&quot;ngForm&quot; (ngSubmit)=&quot;submit()&quot;&gt; &lt;!---定義した配列dataをngForでループ表示 要素をiでカウント----&gt; &lt;ng-container *ngFor= &quot;let item of data; index as i&quot; &gt; &lt;!---inputで通常のCheckboxに変えてもOK---&gt; &lt;mat-checkbox type=&quot;checkbox&quot; name = &quot;country{{i}}&quot; [(ngModel)]=&quot;data[i].selected&quot; [value]=&quot;item.value&quot; (change)=&quot;checkCountry(i)&quot; &gt;{{data[i].value}}&lt;/mat-checkbox&gt; &lt;/ng-container&gt; &lt;!---チェックボックスから得たデータを纏めてリクエストするボタン---&gt; &lt;button mat-raised-button color=&quot;primary&quot;&gt;Get Data&lt;/button&gt; &lt;!--(ngSubmit)=で設定されたsubmit()が実行される--&gt;&lt;/form&gt; 画面で確認 以下のように表示されます おまけ: for文で書く場合 for文でも判別ロジック書いたので参考までにどうぞ だいぶ冗長になってしまいます 12345678910111213141516// 格納先を宣言let regionList = [];// for文で書く場合var num=0;for ( let c = 0; c &lt;= this.data.length - 1 ; c++) { if (this.data[c].selected) { // Checkされているか判定 trueなら実行 // 配列に要素を追加 .push() countryList.push(this.data[c].value); // リージョン名を格納 console.log(countryList[num] + ' checked'); // デバッグ用 num++; } else { console.log('Not Check'); // デバッグ用 }}console.log(countryList);","link":"/Angular-map-fileter-mat-checkbox%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E9%81%B8%E6%8A%9E%E5%80%A4%E3%82%92%E9%85%8D%E5%88%97%E3%81%AB%E6%A0%BC%E7%B4%8D%E3%81%99%E3%82%8B%E3%83%AD%E3%82%B8%E3%83%83%E3%82%AF/"},{"title":"[Angular mat-input] バリデーションまとめ","text":"Anuglarのフォームにおけるバリデーションチェックについてのまとめ Angular Material(mat-input)を用いて、フォームを用意するまでは以前の記事で解説しています [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) バリデーションチェックとは？ 最近のWEBサービスでよく見受けられる、リアルタイムで入力値をチェックして問題があればエラーを表示してくれる機能などのこと レガシーなWEBサービスでは、半角、全角が間違っていても申請ボタンを押して更新するまで気づくことができず、ユーザがストレスを受けてしまうケースが多くありました 活用例 未入力の項目があれば、申請ボタンを無効化。該当箇所を赤くマーキング 利用可能な型（Ex. 全角、半角、英数）を規定して制限 文字数を制限 悪意を持った攻撃を防ぐ効果があります passwordを＊＊＊でマスク typeを規定 emailの@や郵便番号や電話番号のーが挟まる形式など こういったバリデーションを用意に実装できるのがAngularの強みの一つ Angularのmat-inputにおけるバリデーションAngularにおいては、input要素に様々な属性値を与えることで、バリデーションチェックを行い、〜〜.valid/~~.invalidといった状態値で確認できる。以下に主なバリデーションパターンと解説を示す。 文字数制限 文字数を強制 minlength=”” 指定した文字数以下の場合、入力欄がエラー状態になる(赤くなる) maxlength=”” 指定した文字数までしか入力できない 必須入力 requiredをつけるだけ typeの指定 type=で設定可能1&lt;input type=&quot;email&quot;... パターンチェック [PatternValidator]というディレクティブを利用することで、正規表現で詳細な条件を定める事ができる 記法：pattern=”条件” 以下は英字(小大)に限定している1&lt;input name=&quot;XXX&quot; ngModel pattern=&quot;[a-zA-Z ]*&quot;&gt; 英大文字＋数字 1&lt;input pattern=&quot;[A-Z0-9]*&quot;&gt; 英(小,大)＋数字(int)＋記号 1&lt;input pattern=&quot;[a-zA-Z0-9!-/:-@¥[-`{-~]*&quot;&gt; ★正規表現を可視化してまとめたチートシート エラーメッセージの表示 エラーメッセージの表示 mat-errorを使用1&lt;mat-error *ngIf=&quot;条件&quot; ngIfで定める条件（バリデーションチェックに合格しているか？）は次項目を使うことが多い。 バリデーション状態の取得 テキストボックス(input)に#~~で名前を付ける事で以下の値を条件式で利用可能になる バリデーション成功時：~~.valid バリデーション失敗時：~~.invalid エラーメッセージや最終的な送信ボタンにngIF=”~~.valid”を条件付けすることで、入力値に問題がある状態でのリクエストを未然に防ぎ、UXを向上させることができる 条件が成り立たない時に無効化 ngIFではなく[disabled]=条件式を利用する1&lt;button [disabled]=&quot;~~.invalid&quot;&gt;ラベル&lt;/button&gt; 複数のバリデーションが通っている場合のみ有効化 論理和演算子記号”||”で”または”とする1&lt;button [disabled]=&quot;aaa.invalid||bbb.invalid&quot;&gt; 上記では各テキストボックスをひとつずつ条件付けしているが、form要素自体に以下のようにフォーム名を定めれば、全体のバリデータの状態をチェックできる(フォーム名.valid, フォーム名.invalid) 項目が多い場合にはこちらの方が有効1&lt;form #フォーム名=&quot;ngForm&quot;&gt; 実装例IDとパスワードを入力して送信ボタンの押下で認証を行う、基本的なフォームの例を以下に示す。 今回のサンプルにおける条件詳細 Id詳細 未入力禁止 required 最低文字数 minlength=”20” 最大文字数 maxlength=”20” 例の表示 placeholder patternチェック 英大文字＋数字1pattern=&quot;[A-Z0-9]*&quot; エラーメッセージの表示 mat-error要素を使用 Password詳細 未入力禁止 required 最低文字数 minlength=”40” 最大文字数 maxlength=”40” 例の表示 placeholder type passwordで情報を秘匿 patternチェック 英小大文字＋数字＋記号1pattern=&quot;[a-zA-Z0-9!-/:-@¥[-`{-~]*&quot; エラーメッセージの表示 mat-error要素を使用 Submitボタン 各バリデートの中でエラーが一つでもあればボタンを無効化1[disabled]=&quot;Id.invalid || passKey.invalid&quot; 実装123456789101112131415161718192021222324252627282930313233343536373839404142&lt;!--フォームとバリデーション--&gt; &lt;mat-form-field class=&quot;mat-input-margin1&quot;&gt; &lt;mat-label&gt;ID&lt;/mat-label&gt; &lt;input matInput id=&quot;Id&quot; akey=&quot;Id&quot; [(ngModel)]=&quot;akey&quot; minlength=&quot;20&quot; maxlength=&quot;20&quot; pattern=&quot;[A-Z0-9]*&quot; placeholder=&quot;Ex. BSCJJSH7333...&quot; required #Id=&quot;ngModel&quot; &gt; &lt;!--全バリデーションチェック成功時にId.validが成り立つ---&gt; &lt;mat-error&gt;入力必須&lt;/mat-error&gt; &lt;/mat-form-field&gt; &lt;mat-form-field class=&quot;mat-input-margin2&quot;&gt; &lt;mat-label&gt;Password&lt;/mat-label&gt; &lt;input matInput id=&quot;passKey&quot; skey=&quot;passKey&quot; [(ngModel)]=&quot;skey&quot; minlength=&quot;40&quot; maxlength=&quot;40&quot; pattern=&quot;[a-zA-Z0-9!-/:-@¥[-`{-~]*&quot; placeholder=&quot;Ex. Hy2D3...&quot; type=&quot;password&quot; required #passKey=&quot;ngModel&quot; &gt; &lt;mat-error&gt;入力必須&lt;/mat-error&gt; &lt;/mat-form-field&gt;&lt;!--上記のフォームの入力値のバリデーションチェック成功時に有効化される送信ボタン--&gt; &lt;button mat-raised-button (click)=&quot;submit()&quot; [disabled]=&quot;Id.invalid || passKey.invalid&quot; &gt;Submit&lt;/button&gt; その他のAngular Materialについては以下にまとめています。 参考関連記事 [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック その他 angular material angular material components Angular Materialについて Angular Materialのインストールから使い始めまで Angularで「フォーム」の入力値をコンポーネントと同期するには？（双方向バインディング） Angularで文字列を大文字／小文字に変換するには？（lowercase／uppercase） angularjsはテキストボックスに大文字を強制します AngularのReactiveFormとAngularMaterialを組み合わせる Angular Formの実装 Angular mat-input","link":"/Angular-mat-input-%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%BE%E3%81%A8%E3%82%81/"},{"title":"[Angular] mat-selection-list & ngForでcheckboxをリスト表示～選択値を配列として取得","text":"Angular Materialを用いたUIの実装について、初級者向けに以下を解説します チェックボックス型の選択項目をリスト表示 選択値を配列にまとめて格納するロジック 使いどころ 外部サービスやDBに対するリクエストに含めるパラメータを選択値に応じて変化させる 設定ページに良く使います 1. 基礎知識 1.1. Angular Material 2. 実装 2.1. sample-component.html 2.1.1. mat-selection-listとmat-list-optionについて 2.1.2. *ngFor=”let item of regionsData; index as i” 2.1.3. index as i 2.2. sample-component.ts 2.2.1. データソースの準備 2.2.2. 双方向バインドによる状態値(selected)の変更 2.2.3. 選択値の取得 2.2.4. 選択値を用いた外部へのリクエスト 後書き 関連記事 1. 基礎知識1.1. Angular Material Angular Material メニューやツールバー、ボタン、チェックボックスなどの良く使う部品を提供してくれるAngular公式のUIフレームワーク 基本的に画面は0から作らずにMaterialを組み合わせて作ります まだ導入していなれけば以下を実行すると使えるようになります 聞かれることは全部Yesで問題ないです1ng add @angular/material mat-selection-list checkbox付きのリストを表示するMaterial 今回はこれを使います (詳細は後述) 2. 実装 コンポーネント(sample-component)を例に解説します sample-component.html Angular Materialを活用したUI sample-component.ts データの宣言、データ加工機能 2.1. sample-component.html まずAngular Materialを使って画面を作ります 実装例 mat-selection-list要素の中にmat-list-option要素を並べます 後でそれぞれ丁寧に解説します1234567891011121314&lt;!--選択リスト--&gt;&lt;mat-selection-list *ngFor=&quot;let item of Data; index as i&quot;&gt; &lt;ng-container&gt; &lt;mat-list-option [(selected)]=&quot;item.selected&quot; [value]=&quot;item.value&quot;&gt;&lt;!--こっちに書いても発火しない(selectionChange)=&quot;checkRegion(i)&quot;---&gt; {{item.value}}&lt;!--{{item[i].value}}---&gt; &lt;/mat-list-option&gt; &lt;/ng-container&gt;&lt;/mat-selection-list&gt;&lt;br&gt;&lt;!--外へリクエストを送るボタン--&gt;&lt;button mat-raised-button (click)=&quot;submit()&quot;&gt;Submit&lt;/button&gt; 2.1.1. mat-selection-listとmat-list-optionについて 書式 mat-list-optionが選択肢の単位123456789&lt;mat-selection-list&gt; &lt;mat-list-option [(selected)]=&quot;item.selected&quot; [value]=&quot;item.value&quot;&gt;&lt;!--こっちに書いても発火しない(selectionChange)=&quot;checkRegion(i)&quot;---&gt; {{item.value}}&lt;!--{{item[i].value}}---&gt; &lt;/mat-list-option&gt;&lt;/mat-selection-list&gt; mat-list-optionの属性値 selected checkboxの状態を示す true or false value 要素が持つ値123&lt;mat-list-option [(selected)]=&quot;item.selected&quot; [value]=&quot;item.value&quot;&gt; {{item.value}}&lt;/mat-list-option&gt; mat-selection-listの属性値 (selectionChange)イベント checkされた際に発火するイベント 以下の例では何かが選択される度に”checkRegion()”というメソッドが実行される1&lt;mat-selection-list (selectionChange)=&quot;checkRegion()&quot;&gt; mat-list-option側に書いても動かないので注意 2.1.2. *ngFor=”let item of regionsData; index as i” ngFor 構造型ディレクティブと呼ばれるもの ある配列型のデータを元に、ngForを属性値として設定した要素で挟まれた部分をループ表示する 以下をイメージしてください123&lt;div *ngFor=&quot;..&lt;参照するデータを定義(ループの中で使用する)&gt;..&quot;&gt; &lt;!--ここに書かれた内容をループ表示---&gt;&lt;/div&gt; HTMLで何行も大量にべた書きする必要がある様な項目を 参照したデータ配列を元に、取り出した変数を変えながら楽に表示できる。すっきりかけるというのがポイント let item of Data; 書式 1let &lt;ループ内での変数名&gt; of &lt;参照するデータ配列&gt;; 意味 Data配列をループの中ではitemという名称で扱います 配列から一要素づつ抜き出して、ループ内での変数itemとして使います 使用イメージ tsでデータを定義1Data =[Apple, Orange, Pinapple] html123&lt;div *ngFor=&quot;let item of Data&quot;&gt; {{item}} &lt;!--Dataの中身(Apple, Orange, Pinapple)を順に表示--&gt;&lt;/div&gt; 参照するデータ 上の例で分かるようにts側(sample-component.ts)で配列を定義する必要があります 後で解説します ts側で定義するので外部から取得した動的なデータを元にすることも可能 *ngFor=”let item of Data; index as i” Dataに含まれる配列を変数itemとして一つづつ取り出しながらループで表示する 配列のカウントをiで行う ng-container これで囲んだ要素はセットでngForでループする対象にできる 複数の要素を纏めてループする場合にはよく使います123456&lt;div *ngFor=&quot;..&lt;参照するデータを定義(ループの中で使用する)&gt;..&quot;&gt; &lt;ng-container&gt; &lt;div&gt; XXXX &lt;/div&gt; &lt;div&gt; XXXX &lt;/div&gt; &lt;/ng-container&gt;&lt;/div&gt; 2.1.3. index as i ループが何週目か？をiで定義可能 ”0から始まる”ので注意 使用イメージ 実装123&lt;div *ngFor=&quot;let item of Data&quot;&gt; {{i+1}}番目: {{item}} &lt;/div&gt; 表示1231番目: Apple2番目: Orange3番目: Pinapple 2.2. sample-component.ts ts側には以下を書きます ngForで使うデータソース 選択値を取得するロジック 2.2.1. データソースの準備 ngForで参照するデータを以下のように定義します 123456789101112131415161718192021// 選択肢として表示するregionデータをハッシュで管理 Data = [ // 個々のselectedプロパティでチェック状態を保持 { value: 'us-east-1', selected: false}, { value: 'us-east-2', selected: false}, { value: 'us-west-1', selected: false}, { value: 'us-west-2', selected: false}, { value: 'ca-central-1', selected: false}, { value: 'eu-central-1', selected: false}, { value: 'eu-west-1', selected: false}, { value: 'eu-west-2', selected: false}, { value: 'eu-west-3', selected: false}, { value: 'eu-north-1', selected: false}, { value: 'ap-northeast-1', selected: true}, // 初めからcheck=true { value: 'ap-northeast-2', selected: false}, { value: 'ap-northeast-3', selected: false}, { value: 'ap-southeast-1', selected: false}, { value: 'ap-southeast-2', selected: false}, { value: 'ap-south-1', selected: false}, { value: 'me-south-1', selected: false}, { value: 'sa-east-1', selected: false}, ]; 使い方 ngForでこの配列から一つづつ呼び出す単位は以下です1{ value: 'us-east-1', selected: false} つまりそのループの中で us-east-1 を示すには以下のように書きます123&lt;div *ngFor=&quot;let item of Data&quot;&gt; {{item.value}}&lt;/div&gt; 2.2.2. 双方向バインドによる状態値(selected)の変更 これを用いるとパラメータの変化を伝えることができます Angularにおける双方向バインド 片方の変数の変化を1[(変数)]=変数 今回の使い方 ユーザがcheckした際にselectedの値が変わります item.selected＝tsで定義したハッシュの該当箇所の選択値が変更されます 後はts側でitem.selectedの値を使って機能を書けます12&lt;mat-list-option [(selected)]=&quot;item.selected&quot; 2.2.3. 選択値の取得 メソッドを用意して任意のタイミングで呼び出します ハッシュ値全体からfilter()とmap()を使って選択値を取り出します123456789// チェックされたリージョンを判別して配列を作成して返すmakeCheckList() { let checkList = []; // selectedからチェック状態を確認→配列に選択値を格納 return checkList = this.Data // Data＝ハッシュ値 .filter((d) =&gt; d.selected) // checkされているものに絞る .map((d) =&gt; d.value); // checkされているリージョン名を取得} 2.2.4. 選択値を用いた外部へのリクエスト 外部と通信する機能はServiceに書きましょう Serviceを呼び出す際に、 機能連携イメージ ボタンの(click)イベント (click)=”submit()”と定めていた、submit()メソッドが発火 選択値を取得 外部連携Serviceを呼び出す この際に引数として、取得した選択値を渡す Service内での外部リクエスト この際に引数として渡した選択値を使う 12345678submit() { // チェックされたリージョンリストを取得 const REGIONS = this.makeCheckList(); // 外部へリクエストするサービスの呼び出し let responseData = this.getService(REGIONS);} 後書き今回は以上です。このようなロジックを作るシーンは結構あると思います。短時間でぱっと作って機能面にかける時間を増やしましょう。 関連記事 [Angular入門] mat-inputで生成したフォームから入力値を取得～双方向データバインディング [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック 普通のcheckboxを使う場合はこっち [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得","link":"/Angular-mat-selection-list%E3%81%A7checkbox%E3%82%92%E8%A1%A8%E7%A4%BA%EF%BD%9E%E9%81%B8%E6%8A%9E%E5%80%A4%E3%82%92%E9%85%8D%E5%88%97%E3%81%A8%E3%81%97%E3%81%A6%E5%8F%96%E5%BE%97/"},{"title":"[Angular mat-tree] treeの全展開機能機能の実装","text":"概要 実装したい機能 複数のtreeを一括で展開/折り畳みする機能 実現方法 mat-treeにはデフォルトで全展開に利用可能なメソッドが用意されているため、それらを利用する 全展開 expandAll() メソッド 全閉 collapseAll() メソッド 全展開機能の書式 1tree.treeControl.expandAll(); 全展開/全閉ボタンの実装12345&lt;button (click)=&quot;tree.treeControl.collapseAll()&quot;&gt;collapse All&lt;/button&gt;&lt;button (click)=&quot;tree.treeControl.expandAll()&quot;&gt;expand All&lt;/button&gt;&lt;mat-tree #tree [dataSource]=&quot;dataSource&quot; [treeControl]=&quot;treeControl&quot;&gt; ...&lt;mat-tree&gt; mat-iconを利用した例12&lt;button mat-icon-button (click)=&quot;treeControl.expandAll()&quot;&gt;&lt;mat-icon&gt;unfold_more&lt;/mat-icon&gt;&lt;/button&gt;&lt;!--全展開ボタン--&gt;&lt;button mat-icon-button (click)=&quot;treeControl.collapseAll()&quot;&gt;&lt;mat-icon&gt;unfold_less&lt;/mat-icon&gt;&lt;/button&gt;&lt;!--全閉ボタン--&gt; 参考関連記事 [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック その他 Angular Material 6.0.1ツリーがデフォルトで開かれ、すべて展開/折りたたみます","link":"/Angular-mat-tree-tree%E3%81%AE%E5%85%A8%E5%B1%95%E9%96%8B%E6%A9%9F%E8%83%BD%E6%A9%9F%E8%83%BD%E3%81%AE%E5%AE%9F%E8%A3%85/"},{"title":"[Angular] (mouseover)/(mouseout)イベントで各ボタンの説明を表示","text":"Angularにおけるマウスオーバーイベントについてのメモ 概要Angularでは(click)イベントと同様に、要素に(mouseover)イベントを定めることで、マウスオーバー時に実行するメソッドを容易に指定できる 書式1&lt;div (mouseover)=&quot;sampleMethod()&quot;&gt; 実装例各ボタンの説明をマウスオーバー時のみ表示する 実現方法 説明を表示したい要素に以下のイベントを設定 (mouseover) (mouseout) イベント発生時に状態値を変更 ngIfで状態値に応じて説明を表示 実装例 [Angular mat-tree] treeの全展開機能機能の実装で実装したボタンのホバー時に説明を表示するように改修 (mouseover)時に状態値：showExpandExplanationの値を変更 → ngIfを設定した要素が表示される 12345&lt;button mat-icon-button (click)=&quot;treeControl.expandAll()&quot; (mouseover)=&quot;showExpandExplanation=true&quot; (mouseout)=&quot;showExpandExplanation=false&quot;&gt;&lt;mat-icon&gt;unfold_more&lt;/mat-icon&gt;&lt;/button&gt;&lt;!--全展開ボタン--&gt;&lt;div *ngIf=&quot;showExpandExplanation&quot;&gt;全展開ボタン&lt;/div&gt;&lt;button mat-icon-button (click)=&quot;treeControl.collapseAll()&quot; (mouseover)=&quot;showCollapseExplanation=true&quot; (mouseout)=&quot;showCollapseExplanation=false&quot;&gt;&lt;mat-icon&gt;unfold_less&lt;/mat-icon&gt;&lt;/button&gt;&lt;!--全閉ボタン--&gt;&lt;div *ngIf=&quot;showCollapseExplanation&quot;&gt;折り畳みボタン&lt;/div&gt; 参考関連記事 [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック","link":"/Angular-mouseover-mouseout-%E3%82%A4%E3%83%99%E3%83%B3%E3%83%88%E3%81%A7%E5%90%84%E3%83%9C%E3%82%BF%E3%83%B3%E3%81%AE%E8%AA%AC%E6%98%8E%E3%82%92%E8%A1%A8%E7%A4%BA/"},{"title":"Angular x AWS SDK for JavaScriptの始め方","text":"Angularで開発していたアプリケーションにaws-sdkを導入する際の備忘録 AWS SDKを入れることで、アプリケーションからAWSのリソースを操作可能になります ex.) S3やDynamoDBへのデータの格納、Cognitoによる認証、Lambdaの実行… SDK: Software Development Kit 特定のソフトウェアを開発する際に必要なツールのセット Angularの場合、公式の開発者ガイド通りにやると鬼のようにエラーが出るので共有しておきます。ひと手間必要でした。 1. aws sdk for javascriptのinstall angular PJ直下で実行1npm install aws-sdk --save-dev この時点でAPを確認すると、以下のエラーが大量に出ます APの画面もブラウザに表示されなくなります 123&gt;ng serve --openERROR in node_modules/aws-sdk/clients/acm.d.ts:141:37 - error TS2591: Cannot find name 'Buffer'. Do you need to install type definitions for node? Try `npm i @types/node` and then add `node` to the types field in your tsconfig. 2. @types/nodeをinstallする Angular PJ直下で以下を実行12345npm install --save @types/node+ @types/node@8.9.5updated 1 package and audited 19123 packages in 41.418sfound 0 vulnerabilities 3. tsconfig.json ファイルに以下を追記 Angular PJ直下にあります 123&quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;node&quot;]} 場所は以下 1&gt; code .\\tsconfig.json tsconfig.app.json にも、同じく追記 Angular PJ直下にあります123&quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;node&quot;] } エラーの解消を確認 ng serve時に正しくAPの画面が表示される ここまででAngular APからAWSのリソースとAPI連携する下準備が整いました 以下についても後日UP予定です AWSの各リソースの利用方法、実装方法 Ampliyfy(BaaS)でAWSと連携させる手法 参考関連記事 [AWS SDK for JavaScript] WEBアプリ→AWSへのリクエスト認証時のエラーハンドリング [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック","link":"/Angular-x-AWS-SDK-for-JavaScript%E3%81%AE%E5%A7%8B%E3%82%81%E6%96%B9/"},{"title":"[Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate))","text":"AnglarのE2Eテストを会社の開発環境で試みたところ、証明書エラーでハマってしまった際のメモ E2Eテスト自体の概要は以下にまとめています [Angular] E2E Testの自動化 Error詳細 E2Eテストの実行時に以下の様なエラーが出る 123456789101112131415161718\\angular-pj&gt; ng e2e[21:20:51] I/config_source - curl -oD:\\angular-pj\\node_modules\\protractor\\node_modules\\webdriver-manager\\selenium\\chrome-response.xml https://chromedriver.storage.googleapis.com/events.js:174 throw er; // Unhandled 'error' event ^Error: unable to get local issuer certificate at TLSSocket.onConnectSecure (_tls_wrap.js:1058:34) at TLSSocket.emit (events.js:198:13) at TLSSocket._finishInit (_tls_wrap.js:636:8)Emitted 'error' event at: at Request.onRequestError (D:\\angular-pj\\node_modules\\request\\request.js:877:8) at ClientRequest.emit (events.js:198:13) at TLSSocket.socketErrorListener (_http_client.js:392:9) at TLSSocket.emit (events.js:198:13) at emitErrorNT (internal/streams/destroy.js:91:8) at emitErrorAndCloseNT (internal/streams/destroy.js:59:3) at process._tickCallback (internal/process/next_tick.js:63:19) webdrive-managerのアップデートにより解決した事例を真似てupdateを試みたものの、同様のエラーで進めない状況 Error: unable to get local issuer certificate123456789101112131415161718192021PS D:\\angular-pj&gt; webdriver-manager update --version.chrome=86.0.4240.75webdriver-manager: using global installed version 12.1.7[21:24:30] I/config_source - curl -oD:\\Users\\XXXXXXXXX\\AppData\\Roaming\\npm\\node_modules\\webdriver-manager\\selenium\\standalone-response.xml https://selenium-release.storage.googleapis.com/[21:24:30] I/config_source - curl -oD:\\Users\\XXXXXXXXX\\AppData\\Roaming\\npm\\node_modules\\webdriver-manager\\selenium\\chrome-response.xml https://chromedriver.storage.googleapis.com/[21:24:30] I/config_source - curl -oD:\\Users\\XXXXXXXXX\\AppData\\Roaming\\npm\\node_modules\\webdriver-manager\\selenium\\gecko-response.json https://api.github.com/repos/mozilla/geckodriver/releasesevents.js:174 throw er; // Unhandled 'error' event ^Error: unable to get local issuer certificate at TLSSocket.onConnectSecure (_tls_wrap.js:1058:34) at TLSSocket.emit (events.js:198:13) at TLSSocket._finishInit (_tls_wrap.js:636:8)Emitted 'error' event at: at Request.onRequestError (D:\\Users\\XXXXXXXXX\\AppData\\Roaming\\npm\\node_modules\\webdriver-manager\\node_modules\\request\\request.js:877:8) at ClientRequest.emit (events.js:198:13) at TLSSocket.socketErrorListener (_http_client.js:392:9) at TLSSocket.emit (events.js:198:13) at emitErrorNT (internal/streams/destroy.js:91:8) at emitErrorAndCloseNT (internal/streams/destroy.js:59:3) at process._tickCallback (internal/process/next_tick.js:63:19) Protoractor/ng e2eについて基礎知識 Protoractorは内部的にSelenium WebDriverというライブラリを利用しており、入力やボタン操作などの操作の仕組みを標準で備えている Protoractor(Webdriver)は単体では直接ブラウザーを操作できない 内部的には、中計サーバーであるSelenium Serverを介して対象にアクセスする directConnect 有効化した場合、ChromeとFirefoxはSeleniumServerを立ち上げずにアクセスできる angular-pj\\node_modules\\selenium-webdriver&gt; pj配下にseleniumは元から入っているように見受けられる 証明書エラー解決策: 証明書検証の回避 オプションにより証明書の検証を回避できる –ignore_ssl12angular-pj&gt; .\\node_modules\\.bin\\webdriver-manager update --proxy=XXXX --ignore_sslangular-pj&gt; ng e2e --no-webdriver-update 環境情報 package.json 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253{ &quot;name&quot;: &quot;XXXXXXXXX&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;scripts&quot;: { &quot;ng&quot;: &quot;ng&quot;, &quot;start&quot;: &quot;ng serve&quot;, &quot;build&quot;: &quot;ng build&quot;, &quot;test&quot;: &quot;ng test&quot;, &quot;lint&quot;: &quot;ng lint&quot;, &quot;e2e&quot;: &quot;ng e2e&quot; }, &quot;private&quot;: true, &quot;dependencies&quot;: { &quot;@angular/animations&quot;: &quot;~8.2.13&quot;, &quot;@angular/cdk&quot;: &quot;~8.2.3&quot;, &quot;@angular/common&quot;: &quot;~8.2.13&quot;, &quot;@angular/compiler&quot;: &quot;~8.2.13&quot;, &quot;@angular/core&quot;: &quot;~8.2.13&quot;, &quot;@angular/forms&quot;: &quot;~8.2.13&quot;, &quot;@angular/material&quot;: &quot;^8.2.3&quot;, &quot;@angular/platform-browser&quot;: &quot;~8.2.13&quot;, &quot;@angular/platform-browser-dynamic&quot;: &quot;~8.2.13&quot;, &quot;@angular/router&quot;: &quot;~8.2.13&quot;, &quot;hammerjs&quot;: &quot;^2.0.8&quot;, &quot;jquery&quot;: &quot;^3.4.1&quot;, &quot;ng-material-treetable&quot;: &quot;^0.5.5&quot;, &quot;rxjs&quot;: &quot;~6.4.0&quot;, &quot;tslib&quot;: &quot;^1.14.0&quot;, &quot;zone.js&quot;: &quot;~0.9.1&quot; }, &quot;devDependencies&quot;: { &quot;@angular-devkit/build-angular&quot;: &quot;^0.803.29&quot;, &quot;@angular/cli&quot;: &quot;^8.3.29&quot;, &quot;@angular/compiler-cli&quot;: &quot;~8.2.13&quot;, &quot;@angular/language-service&quot;: &quot;~8.2.13&quot;, &quot;@types/jasmine&quot;: &quot;~3.3.8&quot;, &quot;@types/jasminewd2&quot;: &quot;~2.0.3&quot;, &quot;@types/node&quot;: &quot;^8.10.64&quot;, &quot;aws-sdk&quot;: &quot;^2.768.0&quot;, &quot;codelyzer&quot;: &quot;^5.2.2&quot;, &quot;jasmine-core&quot;: &quot;~3.4.0&quot;, &quot;jasmine-spec-reporter&quot;: &quot;~4.2.1&quot;, &quot;karma&quot;: &quot;~4.1.0&quot;, &quot;karma-chrome-launcher&quot;: &quot;~2.2.0&quot;, &quot;karma-coverage-istanbul-reporter&quot;: &quot;~2.0.1&quot;, &quot;karma-jasmine&quot;: &quot;~2.0.1&quot;, &quot;karma-jasmine-html-reporter&quot;: &quot;^1.5.4&quot;, &quot;protractor&quot;: &quot;^5.4.4&quot;, &quot;ts-node&quot;: &quot;~7.0.0&quot;, &quot;tslint&quot;: &quot;~5.15.0&quot;, &quot;typescript&quot;: &quot;~3.5.3&quot; }} 123456789101112131415161718192021222324252627282930313233343536373839ng --version&gt; ng --version _ _ ____ _ ___ / \\ _ __ __ _ _ _| | __ _ _ __ / ___| | |_ _| / △ \\ | '_ \\ / _` | | | | |/ _` | '__| | | | | | | / ___ \\| | | | (_| | |_| | | (_| | | | |___| |___ | | /_/ \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_| \\____|_____|___| |___/ Angular CLI: 8.3.29Node: 10.16.3OS: win32 x64Angular: 8.2.14... animations, common, compiler, compiler-cli, core, forms... language-service, platform-browser, platform-browser-dynamic... routerPackage Version-----------------------------------------------------------@angular-devkit/architect 0.803.29@angular-devkit/build-angular 0.803.29@angular-devkit/build-optimizer 0.803.29@angular-devkit/build-webpack 0.803.29@angular-devkit/core 8.3.29@angular-devkit/schematics 8.3.29@angular/cdk 8.2.3@angular/cli 8.3.29@angular/material 8.2.3@ngtools/webpack 8.3.29@schematics/angular 8.3.29@schematics/update 0.803.29rxjs 6.4.0typescript 3.5.3webpack 4.39.2npmnpm -v6.9.0 その他 Angularに関するトラブルシューティングはコミュニティ(ng japan)に質問すると解決できることが多いです https://angular-japan.discourse.group/ 参考関連記事 [Angular] E2E Testの自動化 [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する その他 ng japan user group ng e2e実行時のエラー(Error: unable to get local issuer certificate) 証明書の登録方法について","link":"/Angular-ng-e2e-Test-%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%A8%E3%83%A9%E3%83%BC%E3%81%A7%E3%83%8F%E3%83%9E%E3%81%A3%E3%81%9F%E9%9A%9B%E3%81%AE%E5%9B%9E%E9%81%BF%E7%AD%96/"},{"title":"[Angular x AWS SDK for JavaScript] SPAからAWSのデータを取得する際の待ち合わせ処理(非同期処理)","text":"SPAのプラットフォームにAWSを採用した際によく書くロジックについてのメモ ex. クライアントからs3 bucketのobjectを取得して画面に表示 AWS SDKでデータを取得するまではディベロッパーガイドを見れば容易だが、待ち合わせ処理の書き方が少し面倒 AWS SDKを導入するまでは以下を参照 Angular x AWS SDK for JavaScriptの始め方 前提知識 SPAであれば、基本的に以下の様な設計になる 外部API(今回はAWS)へリクエストするロジックはServiceとして外だし 各ComponentからServiceを呼び出し、返り値を受け取る TypeScript(JavaScript)で書いたプログラムは基本的に非同期処理で動く Component側で返り値を扱うには待ち合わせ処理にする必要がある 待ち合わせ処理に用いるオブジェクトや構文についての詳細は以下にまとめた [Angular/TypeScript(JavaScript)] 非同期処理/待ち合わせ処理のまとめ (Observable/subscribe/forkJoin/Promise/async/await/then) 実装例 想定する状況 Angularのコンポーネント生成時(画面遷移時)に自動でAWS(S3)から情報を取得して画面に表示する AWSからデータを取得して値を取り出すまでを待ち合わせ処理にする例 ComponentからServiceのロジックを呼び出す Service内でAWSからデータを取得 変数 = new Promise() の形式で、AWSへ問い合わせるロジックを書く resolve(data)で変数に返り値を格納 各関数間の待ち合わせ処理は async/await で実現する Promise型の返り値をComponentへ返す Component側で forkJoin().subscribe を使って受け取る.then()で受け取ってもOK (Angularでは基本subscribeが推奨されている) 書き方は他にもあるかも AWS SDKを導入するまで 以下を参照 Angular x AWS SDK for JavaScriptの始め方 sampleの構成 request.service.ts AWSとの通信用のService sample.component.ts Serviceを呼び出し、返り値を受け取るComponent sample.component.html 取得したデータを表示する AWSへリクエストするService以下の様に書かないと、データが帰ってくる前にcomponentにundefinedを返してしまう AWSへのリクエストからの待ち合わせで返り値を取り出す方法 Promiseの中でリクエストする GETしたデータをresolve()で返す resolveで返された値をreturn async/await でService内の各関数間の待ち合わせ処理を実現する 詳細は別記事を参照 Service記載例 (request.service.ts) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546import { Injectable } from '@angular/core';// aws-sdkを変数AWSとしてimportする必要があるimport * as AWS from 'aws-sdk' @Injectable({ providedIn: 'root'})export class requestService { constructor() { } // 1. Componentから呼び出される関数 async getAwsData() { return await this.requestData(); } // 2. AWSに対してリクエストする関数 async requestData() { // 変数requestに返り値を格納 待ち合わせのためにPromiseを用いる const request = new Promise((resolve, reject) =&gt; { // AWS SDKサービスのオブジェクトを宣言 let bucket = new AWS.S3(({params: {Bucket: 'myBucket'}}); // リクエストを実行 基本的に以下の様にdataに返り値が入る bucket.listObject(({}, (err, data ) =&gt; { if (err) { let errorMessage = String(err); alert(errorMessage); } else { // resolveでPromiseの処理を終了させる resolve(data); // データ加工が必要であれば、ここで関数を呼び出す } }); }); // エラーハンドリング request.catch((error) =&gt; {alert(error); } ); // リクエスト結果を返す return request; }} s3のデータの扱い方についてはディベロッパーガイドを参照。ここではあくまで共通した待ち合わせ処理の記法のみ データを受け取るComponent側 Component側の受け取り方は２パターンある .then() .subscribe() Component側の実装例(sample.component.ts) serviceを呼び、データを受け取る 1234567891011121314151617181920212223242526//rxjs 待ち合わせ処理に必要import { forkJoin } from 'rxjs';let awsData; //データ受取用の変数を宣言 // 起動時に取得 → ngOnInitから呼び出す ngOnInit() { getData(); } getData() { // Credential認証 Service側でもいいかも AWS.config.credentials = new AWS.Credentials(&quot;&lt;access key&gt;&quot;,&quot;&lt;secret key&gt;&quot;) // thenで受け取る例 this.requestService.getAwsData().then(response =&gt;{ console.log(response); this.awsData = response; // 取得データを代入 }); // subscribeで受け取る例 Promise型のため、forkJoinが必要 forkJoin(this.grequestService.getAwsData()).subscribe(result =&gt; { this.awsData = result[0]; // 取得データを代入 }); } sample.compoent.html 取得したデータを画面に表示1{{getAwsData}} 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular/TypeScript(JavaScript)] 非同期処理/待ち合わせ処理のまとめ (Observable/subscribe/forkJoin/Promise/async/await/then) [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する その他 AWS SDK for JavaScript Viewing photos in an Amazon S3 bucket from a browser s3から取得した画像を表示する","link":"/Angular-x-AWS-SDK-for-JavaScript-SPA%E3%81%8B%E3%82%89AWS%E3%81%AE%E3%83%87%E3%83%BC%E3%82%BF%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AE%E5%BE%85%E3%81%A1%E5%90%88%E3%82%8F%E3%81%9B%E5%87%A6%E7%90%86/"},{"title":"Angular コンポーネント間の連携手法まとめ(Service/＠ViewChildで親から子のメソッドを呼出し)","text":"初級者向けに説明した際の備忘録です。 概要 ① Serviceを活用する場合の手順 Serviceを作成して機能を取り出す Serviceをimport Serviceを注入 Serviceのメソッドを実行 ② @ViewChildを活用する場合の手順 @ViewChildと対象の子Componentをimport @ViewChildデコレータを設定 子のメソッドを実行 概要 AngularにおけるComponent間連携 別々のComponent間ではそのままデータを受け渡したり、メソッドを呼び出すことができません Material等を用いた画面の作り方を覚えて、機能開発を始めたレベルの初級者が最初にハマるポイントだと思います 連携手法 Serviceとして機能を外に取り出し、複数のComponent側から参照 基本的にこちらが推奨 親子構造のコンポーネント間で直接参照する @ViewChildデコレータというものを使えば手軽にできます 上記の連携手法x2について解説します。 ① Serviceを活用する場合の手順 Serviceに機能を取り出して参照する場合の手順を以下に示します 親子間で連携させたい場合は飛ばしてください Serviceを作成して機能を取り出す 作成1ng g service 'service-name' service-name.service.tsを編集 共有したい機能は基本的にここに書く Component側に書くのはUI関係に絞る Serviceをimport 以降はServiceを取り込むComponentのtsファイルを編集します1import { ServiceNameService } from '../service-name.service'; Serviceを注入 constructorにserviceを注入することで、Service内のメソッドを参照可能になります private “このComponent内でServiceを扱う名称”: “Serviceのクラス名”123456export class TestComponent implements OnInit { // Serviceを注入インスタンス化 constructor(private TestService: ServiceNameService) { console.log('サービスを注入'); } Serviceのメソッドを実行 上記で定めたTestService.”メソッド名” で実行できます1this.TestService.functionA(); ② @ViewChildを活用する場合の手順 親子間でメソッドを呼ぶ際の手順を示します @ViewChildと対象の子Componentをimport ※対象が複数の場合はViewChildrenを用いる1234// 親子間の連携にはViewChildが必要import { Component, ViewChild } from '@angular/core';// 子のComponentをimportimport { ChildComponent } from '../child/child.component'; @ViewChildデコレータを設定 ※Angular8以上は@ViewChildの引数が二つ {static: false}を第二引数に指定すればOK 1234export class ParentComponent { // 子コンポーネントをプロパティ:childとして設定 @ViewChild( ChildComponent, {static: false} ) private child: ChildComponent; 子のメソッドを実行1child.functionA(); 今回の解説は以上です Angularを扱う際は、なるべく細かいComponentに分けて疎結合な設計にしましょう","link":"/Angular-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%AE%E9%80%A3%E6%90%BA%E6%89%8B%E6%B3%95%E3%81%BE%E3%81%A8%E3%82%81-Service-%EF%BC%A0ViewChild%E3%81%A7%E8%A6%AA%E3%81%8B%E3%82%89%E5%AD%90%E3%81%AE%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%82%92%E5%91%BC%E5%87%BA%E3%81%97/"},{"title":"[Angular] データをファイルで切り出しimportする","text":"Angular公式のCoding Guideを読む中で知ったのですが、データをComponentのtsファイル内で宣言するのはアンチパターンで、極力ファイルとして外だしするのがベストプラクティスだそうです。データファイルをComponent側から参照するまでのメモです 想定する状況 元データ componentのtsファイル内でハッシュを宣言しているが、他のcomponentからも参照できるようにファイルとして外だしする 以下はcheckbox一覧として使用するデータの例 1234567891011121314151617181920regionsData = [ // 個々のselectedプロパティでチェック状態を保持 { value: 'us-east-1', selected: false}, { value: 'us-east-2', selected: false}, { value: 'us-west-1', selected: false}, { value: 'us-west-2', selected: false}, { value: 'ca-central-1', selected: false}, { value: 'eu-central-1', selected: false}, { value: 'eu-west-1', selected: false}, { value: 'eu-west-2', selected: false}, { value: 'eu-west-3', selected: false}, { value: 'eu-north-1', selected: false}, { value: 'ap-northeast-1', selected: false}, { value: 'ap-northeast-2', selected: false}, { value: 'ap-northeast-3', selected: false}, { value: 'ap-southeast-1', selected: false}, { value: 'ap-southeast-2', selected: false}, { value: 'ap-south-1', selected: false}, { value: 'me-south-1', selected: false}, { value: 'sa-east-1', selected: false},]; ファイルにデータを切り出す ファイルを作成 componentと同様のディレクトリに格納 regions-data.ts exportで他のcomponentからもアクセス可能な変数として宣言1234567891011121314151617181920export const regionsData = [ { value: 'us-east-1', selected: false}, { value: 'us-east-2', selected: false}, { value: 'us-west-1', selected: false}, { value: 'us-west-2', selected: false}, { value: 'ca-central-1', selected: false}, { value: 'eu-central-1', selected: false}, { value: 'eu-west-1', selected: false}, { value: 'eu-west-2', selected: false}, { value: 'eu-west-3', selected: false}, { value: 'eu-north-1', selected: false}, { value: 'ap-northeast-1', selected: false}, { value: 'ap-northeast-2', selected: false}, { value: 'ap-northeast-3', selected: false}, { value: 'ap-southeast-1', selected: false}, { value: 'ap-southeast-2', selected: false}, { value: 'ap-south-1', selected: false}, { value: 'me-south-1', selected: false}, { value: 'sa-east-1', selected: false},]; Componentからファイルをimport sample.component.ts ファイルからimport12345// ファイルをimportimport { regionsData } from './regions-data';export class SampleComponent implements OnInit { // component内で扱う変数にimportしたデータを格納 regionsData = regionsData; 参考関連記事 [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages)","link":"/Angular-%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A7%E5%88%87%E3%82%8A%E5%87%BA%E3%81%97import%E3%81%99%E3%82%8B/"},{"title":"[Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション","text":"AngularでWEB APの画面を作る際に、複数のチェックボックスをユーザに選択させることがよくあると思います。その際にcheckboxの未チェックをリアルタイムで検知する仕組みを作ることで、ユーザに余計な画面遷移やストレスを課さずに済み、不正なリクエストも防げます。 バリデーションとは？ 入力内容や記述内容が要件を満たしているか、妥当性を確認すること 例えば、本人の契約意志をchecboxを確認するまで、次へボタンを無効化される仕組みをよく見かけます。必須項目をチェックせずに進んでもエラーが出るだけで、無駄な手間とストレスを生んでしまうためです エラーが起きてからどうこうではなく、そもそもエラーを起こせない仕組みを実現するものというイメージ 参考 入力欄(mat-input)のバリデーションについては以下にまとめています [Angular mat-input] バリデーションまとめ mat-checkboxを実装し、チェックした項目の値を取得するまでは以下にまとめています [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 Angularにおけるcheckboxのバリデーション方法A(単一のcheckbox向け） XX.invalidの利用 checkbox要素に以下の変更を加える 属性値にrequiredを追加 チェックを必須とするバリデーションチェックが行われる #で名前を付ける ”#で付けた名称.invalid”でバリデーションエラーを検知可能になります つまり、checkをしていなければ、以下のように状態値を確認できます1XXX,invalid=true 送信button 属性値 [disabled]= || XX.invalidで条件を追加する XX.invalid=trueの時＝チェックしていない時に、ボタンがdisabled=無効化される 単一のチェックボックスのチェックを必須化するケースはこれで問題無さそう Ex. 契約事項の確認画面 B（複数のチェックボックス向け） checkした項目を取得する配列が空か確認 checkboxの値を取得する配列が空であれば、ボタンをdisabledにする 上記では”一つ以上にチェック”の検知が難しい ngForでループで複数のチェックボックスを表示している場合、全てが必須になってしまう 状態値の取り方以外はAと同様 今回は”複数のチェックボックスから最低一つ以上にチェックすること”を強制するため、Bの実装例を以下に示す 実装例前提 checkboxとチェックした項目の値を取得する仕組みは実装済み 未実装であれば、以下を参考にどうぞ [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 実装 tsファイル側で先にbool値用の変数を宣言 check無しの時: true check一つ以上の時: false sample.component.ts 1checkValidation = true; 一つ以上のチェックがあれば、上記の値をfalseに変更する仕組みが必要 buttonの無効化条件に追加 一つでもtrueがあればdisabled（ボタンが無効化される状態）になる sample.component.html 12345678910111213141516171819&lt;!--バリデーション状態によって無効化されるボタン--&gt;&lt;button mat-raised-button[disabled]=&quot;Id.invalid || passKey.invalid || this.checkValidation&quot;&gt;&lt;!--ついでにエラーメッセージも用意--&gt;&lt;mat-error *ngIf=&quot;checkValidation&quot;&gt;最低一項目のチェックが必須&lt;/mat-error&gt;&lt;!--チェック時にtodoLeafItemSelectionToggle(node)という関数が発火する、チェックボックスをループ表示するサンプル--&gt; &lt;ngFor... &lt;ng-container&gt; &lt;mat-checkbox [checked]=&quot;checklistSelection.isSelected(node)&quot; (change)= &quot;todoLeafItemSelectionToggle(node)&quot; &gt;{{node.name}}&lt;!--dashboardにnode.nameの値を渡す (click)=&quot;onclickResource(node.name)&quot;--&gt; &lt;!--click時にnode.nameを選択値として取得 マーキング---&gt; &lt;/mat-checkbox&gt; &lt;/ng-container&gt; ... 今回は配列(this.checklistSelection.selected)にチェックした値が入るように機能を作っている ”this.checklistSelection.selected.length = 0”の時、つまり一つもチェックしていない時に、buttonを無効化すれば良い 0をboolean値として扱ってくれるか試したがダメ 0ならtrueにする関数が必要 check時にその関数を呼び出して値を変更したい 初期値falseの変数を定義して、check時にtrueに変えるだけでOK checkboxのソース check時に値を取るメソッドを呼び出している (change)= “todoLeafItemSelectionToggle(node)”123456 &lt;mat-checkbox [checked]=&quot;checklistSelection.isSelected(node)&quot; (change)= &quot;todoLeafItemSelectionToggle(node)&quot;&gt;{{node.name}}&lt;!--dashboardにnode.nameの値を渡す (click)=&quot;onclickResource(node.name)&quot;--&gt; &lt;!--click時にnode.nameを選択値として取得 マーキング---&gt;&lt;/mat-checkbox&gt; check時にチェック数に応じてbool値を変更する関数を定義 checkする度にchangeCheckboxValidation()を呼び出す 1234567891011121314151617/** Toggle a leaf to-do item selection. Check all the parents to see if they changed */todoLeafItemSelectionToggle(node: FlatTreeNode): void { this.checklistSelection.toggle(node); this.checkAllParentsSelection(node); // バリデーション用のbool値を取得する this.changeCheckboxValidation();}// チェックボックスが一つでもチェックされていれば、bool値をfalseに変更するメソッドchangeCheckboxValidation(){ // check数が0出なければ、checkboxバリデーション用のbool値を変更 if (this.checklistSelection.selected.length != 0) { this.checkValidation = false; } else { // check数が0になったらtrueに this.checkValidation = true; }} 以上で”最低一つにチェック”というバリデーションを実現できた 参考Angular Mateerial関連記事 [Angular mat-input] バリデーションまとめ [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する","link":"/Angular-%E8%A4%87%E6%95%B0%E3%81%AEcheckbox%E3%81%A7%E4%B8%80%E3%81%A4%E4%BB%A5%E4%B8%8A%E3%81%AE%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%92%E5%BF%85%E9%A0%88%E3%81%A8%E3%81%99%E3%82%8B%E3%83%90%E3%83%AA%E3%83%87%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/"},{"title":"[Angular]親子コンポーネント間でデータを共有(@Input/@Output/EventEmitter)","text":"Angularのコンポーネント間ではデータをそのまま共有することはできません。初級者が躓くポイントの一つだと思うので、解説をまとめておきます。 基礎知識 1. 親⇒子 (@Inputを使用) 1.1. 親側 parent.component.ts parent.component.html 1.2. 子側 child.component.ts child.component.html 2. 子⇒親 (@Output/EventEmitterを使用) 2.1. 子側 child.component.ts child.component.html 2.2. 親側 parent.component.html parent.component.ts 基礎知識 Angularで親子間のデータを伝播させるにはデコレーターを利用します デコレーター 構成情報を付与する仕組み 対象 クラス/プロパティ/メソッド/引数 構文 @name ex.) @NgModule データの流れ 使用するデコレーター 親 ⇒ 子 @Inputデコレーター 子 ⇒ 親 @Outputデコレーター 例えば、子A ⇒ 親 ⇒ 子B の順にデータを共有することも可能です ※関係性の遠いコンポーネント間のデータ共有にはServiceを介しましょう それぞれ解説していきます。 1. 親⇒子 (@Inputを使用) Component構成は以下の入れ子構造を想定 親 parent.component 子 child.component 1.1. 親側 選択肢を表示parent.component.ts 選択値を 1234567891011121314// 選択値を保存する変数selected: string;// データを定義data = [ {name = &quot;選択肢A&quot;} {name = &quot;選択肢B&quot;} {name = &quot;選択肢C&quot;}]// click時に選択値をselectedに格納&quot;onClick(select_name){ this.selected = select_name;} parent.component.html 定義したデータ型からbuttonを繰り返し表示 click時に選択値を引数としてonClick()を実行 123456&lt;div *ngFor=&quot;let d of data&quot;&gt; &lt;button (click)=&quot;onClick(d.name)&quot;&gt;{{d.name}}&lt;/button&gt;&lt;/div&gt;&lt;!--childコンポ―ネントを入れ子で表示---&gt;&lt;app-child [item]=&quot;selected&quot;&gt;&lt;/app-child&gt; 1.2. 子側child.component.ts @Inputでitemを受け取ります childから渡した選択値が入ります1234567// Inputが必要import {Component , Input} form '@angular/core'// @Inputでexport class ChildComponent{ @Input() item: string;} child.component.html 受け取った値を表示1234&lt;!--ngIfでデータが空じゃなければ表示--&gt;&lt;div *ngIf=&quot;item&quot;&gt; &lt;li&gt;{{item}}を選択しました&lt;/li&gt;&lt;/div&gt; 2. 子⇒親 (@Output/EventEmitterを使用) Component構成は以下の入れ子構造を想定 子 child.component 選択肢をbuttonで表示 親 parent.component 選択値によって変化 @Outputでデコレーターを活用して、子コンポーネントで発生したイベントを親に通知 2.1. 子側child.component.ts import @Outputで受け渡すイベントを定義 (click)でイベントを発生させるメソッドを定義 共有したいデータを引数として受け渡す emitメソッド イベントをここで発生させる 構文 event: イベント名 data: $eventオブジェクトとして渡すデータ1this.event.emit(data) 記載例 12345678910111213141516// 1. OutputとEventEmitterを利用するためにimportimport { Component, Output, EventEmitter } from '@angular/core';export class ResourceTreeComponent { // 2. イベントを宣言 発生時に$eventオブジェクトとして&lt;&gt;で定義した型のデータを親へ受け渡す @Output() selected = new EventEmitter&lt;string&gt;(); // 3. (click)で共有したいデータを引数としてイベントを発生させる onclick(data) { // 選択したリソースタイプをselectedへ格納 this.selected.emit(data); } child.component.html 想定する状況 事前に定義したデータ：nodeをtreeとbuttonで選択肢を表示 選択値: node.nameを親に渡したい (click)でonclickを発火させる 1234567&lt;!--mat-treeで階層型の選択肢を表示---&gt;&lt;mat-tree-node *matTreeNodeDef=&quot;let node&quot; matTreeNodeToggle matTreeNodePadding&gt; &lt;!--click時にnode.nameを選択値として取得---&gt; &lt;button mat-button (click)=&quot;onclick(node.name)&quot;&gt; {{node.name}} &lt;/button&gt; 2.2. 親側parent.component.html 子から受け取ったdataを変数selectに入れて表示 (selected)=”onSelect($event)” childでselectedイベントが発生したタイミングでonSlect()メソッドを実行 $eventオブジェクト emitメソッド経由で渡されるdata123&lt;div&gt;{{select}}&lt;/div&gt;&lt;!--子コンポーネントの要素にイベントバインディングを設定---&gt;&lt;app-child (selected)=&quot;onSelect($event)&quot;&gt;&lt;/app-child&gt; parent.component.ts12345678910export class ParentComponent implements OnInit { // データを受け取る変数を宣言 select: string; // resourcce-treeからデータを受け取る onSelect($event) { this.select = $event; return this.select; } 解説は以上です。","link":"/Angular-%E8%A6%AA%E5%AD%90%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E9%96%93%E3%81%A7%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E5%85%B1%E6%9C%89-Input-Output-EventEmitter/"},{"title":"Angular8:”global is not defined”の回避策","text":"概要 Angular8で以下のエラーにハマった際の解消法を解説します 1”global is not defined” 上記のエラーについて Angularでグローバルオブジェクトを参照する外部ライブラリを利用している環境で発生する事象 今回はAngularとAWS間のAPI連携機能を実装した際に発生 環境の詳細 12345678910111213141516171819202122232425Angular CLI: 8.3.24Node: 10.16.3OS: win32 x64Angular: 8.2.14... animations, common, compiler, compiler-cli, core, forms... language-service, platform-browser, platform-browser-dynamic... routerPackage Version-----------------------------------------------------------@angular-devkit/architect 0.803.24@angular-devkit/build-angular 0.803.24@angular-devkit/build-optimizer 0.803.24@angular-devkit/build-webpack 0.803.24@angular-devkit/core 8.3.24@angular-devkit/schematics 8.3.24@angular/cdk 8.2.3@angular/cli 8.3.24@angular/material 8.2.3@ngtools/webpack 8.3.24@schematics/angular 8.3.24@schematics/update 0.803.24rxjs 6.4.0typescript 3.5.3webpack 4.39.2 解決策 pollyfills.tsに設定が必要 所在 “pj-name”\\srcの配下 以下を追記すると解決します// &quot;global is not defined&quot;の対応 (window as any).global = window; 解説 polyfillとは JavaScriptのversion間の互換性を補うもの 利用したい機能に未対応のブラウザでも使えるように、同等の機能をJavaScriptで供給できる pollyfills.ts Angularにおけるpolyfillの設定ファイル 例えば、Angularで開発したAPをIEでも動かしたい時には設定が必要 Angularは”デフォルトではIEに未対応”です","link":"/Angular8-global-is-not-defined%E3%81%AE%E8%A7%A3%E6%B6%88%E6%B3%95/"},{"title":"Angularアプリの開発支援ツールAugury(Chrome拡張機能)","text":"今回はAngularでWEBアプリを開発する際に簡単に利用できるツールを紹介します Auguryと は？ できること 導入方法 利用方法 備考 Auguryと は？ Angularの開発支援ツール Google Chromeの拡張機能 Chromeをメインブラウザとして利用しているデベロッパーには必須とも言えるツール できること 標準のデベロッパーツールに以下の機能を追加できます Componentの階層構造やプロパティ値の図示 ルーティング情報のグラフ化 import済みモジュール構成のリスト表示 導入方法 Chrome Webstoreにアクセス “Chromeに追加”をClick ブラウザの右上にAuguryの丸いアイコンが追加されます 利用方法 Angular APの起動 まずは以下のコマンドでAPの画面をChromeに表示しましょう1ng serve --open F12キーで開発者ツールを起動 ブラウザの右側に表示される開発者ツールに追加されているAuguryタブを選択 “Component Tree”タブのInjection Graph コンポーネントとサービスの依存関係をグラフ表示 個人的に一番利用する機能です “Router Tree”タブ ルート構造をツリー表示 “NgModule”タブ import済みのモジュール構成を確認可能 備考 以下も便利そうでした。APの構成管理やドキュメント作成の手間は極力自動化していきましょう。 compodocでAngularプロジェクトのビジュアルなドキュメントを自動生成する","link":"/Angular%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E9%96%8B%E7%99%BA%E6%94%AF%E6%8F%B4%E3%83%84%E3%83%BC%E3%83%ABAugury-Chrome%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD/"},{"title":"Angularで階層構造の表を開発(Treetable)","text":"こんにちは。今回は表題の内容を解説します。Angular MaterialのMat-tableとMat-treeを組み合わせれば実現可能ですが、初級者には難しく、コードが複雑になります。そこで、簡単に階層型の表を生成可能なOSS:Treetableを利用します。 Treetableの導入手順 1. install 2. app.module.tsでModuleをimport 3. Component側で使用 3.1. HTML 3.2. TS 4. Optionを設定 Eventの設定 サンプルソースの解説 自分でサンプルを開発した際のメモ サンプルデータで表を出す Treetableの導入手順1. install 以下を実行 1npm i ng-material-treetable --save Angular Materialパッケージがinstallされていることを確認 既に入れていればスルー1npm i @angular/material @angular/cdk @angular/animations --save 2. app.module.tsでModuleをimport src/app/app.module.tsを改修 TreetableModuleをimport1234567891011import { TreetableModule } from 'ng-material-treetable'; @NgModule({ ... imports: [ ... TreetableModule ], ...})export class AppModule { } 3. Component側で使用3.1. HTML sample.component.htmlを改修 treetable要素を加えるだけでOKです1&lt;treetable [tree]=&quot;yourTreeDataStructure&quot;&gt;&lt;/treetable&gt; 3.2. TS sample.component.ts データソースとinterface（データの型）を規定します GET等で外部APIからデータを持ってくる場合は、べた書きしているデータ部分を返り値に差し替えてください データ構造は自由です。無くてもOK 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import { Component, OnInit } from '@angular/core';// 追加import { Node, Options } from 'ng-material-treetable';@Component({ selector: 'app-tree-table', templateUrl: './tree-table.component.html', styleUrls: ['./tree-table.component.scss']})export class TreeTableComponent implements OnInit { // データソースを定義 // 省略部分はJSONデータ 表２のデータソース class内の先頭に必要であった arrayOfNodesTree: Node&lt;Task&gt;[] = [ { value: { name: 'Tasks for Sprint 1', completed: true, owner: 'Marco' }, children: [ { value: { name: 'Complete feature #123', completed: true, owner: 'Marco' }, children: [] }, { value: { name: 'Update documentation', completed: true, owner: 'Jane' }, children: [ { value: { name: 'Proofread documentation', completed: true, owner: 'Bob' }, children: [] } ] } ] }, { value: { name: 'Tasks for Sprint 2', completed: false, owner: 'Erika', }, children: [ { value: { name: 'Fix bug #567', completed: false, owner: 'Marco' }, children: [] }, { value: { name: 'Speak with clients', completed: true, owner: 'James' }, children: [] } ] } ]; constructor() { } ngOnInit() { }}// 表のデータ構造の定義export interface Task { name: string; completed: boolean; owner: string;} 4. Optionを設定 sample.component.tsの改修12// 追加の必要有import { Node, Options } from 'ng-material-treetable'; sample.component.htmlの改修 [options]による指定で適用できます1234&lt;treetable [tree]=&quot;yourTreeDataStructure&quot; [options]=&quot;yourOptions&quot;&gt;&lt;/treetable&gt; Eventの設定 sample.component.html12345&lt;treetable [tree]=&quot;yourTreeDataStructure&quot; (nodeClicked)=&quot;logToggledNode($event)&quot;&gt; &lt;!--Clickで開閉--&gt;&lt;/treetable&gt; sample.component.ts nodeClickedで動くメソッドを定義123logToggledNode(node: Node&lt;SomeNodeType&gt;): void { console.log(node);} 以上で階層型の表が完成しました。後は、データソースを直接編集するか、外部から取得したデータに差し替えるだけです。手順の解説は以上です。WEB AP開発の初級者は台帳APでも試しに作ってみると良いかもしれません。(Excelはやめましょう)おまけとして、StackBlitzに挙がっていたサンプルソースの解説も置いておきます。 サンプルソースの解説 StackBlitz 以下の書き方で今回の要件は満たせそう1arrayOfNodesTree: Node&lt;Task&gt;[] = 外部からGETしてきたデータ app.component.ts 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263import { Component } from '@angular/core';// 追加の必要有import { Node, Options } from 'ng-material-treetable';@Component({ selector: 'my-app', templateUrl: './app.component.html', styleUrls: ['./app.component.css']})export class AppComponent { // 表１のOption treeOptions: Options&lt;Report&gt; = { capitalisedHeader: true, customColumnOrder: [// 列名を定義？ 'owner', 'name', 'backup', 'protected' ] };// 省略部分はJSONデータ 表１のデータソース singleRootTree: Node&lt;Report&gt; = { value: { name: 'Reports', owner: 'Eric', protected: true, backup: true }, children: [ { 中略 } ] };// 省略部分はJSONデータ 表２のデータソース arrayOfNodesTree: Node&lt;Task&gt;[] = [ {中略 } ] logNode(node: Node&lt;Report&gt;) { console.log(node); }}// 表のデータ型 列の要素を定義// 表1export interface Report { name: string; owner: string; protected: boolean; backup: boolean;}// 表２export interface Task { name: string; completed: boolean; owner: string;} 次にHTML側を確認 かなりシンプルに書ける treetable要素の中にデータソースとして定義したものを指定するだけ12345&lt;treetable [tree]=&quot;TS側で定めたデータソース名&quot; (nodeClicked)=&quot;logNode($event)&quot;&gt; // Clickで開閉&gt;&lt;/treetable&gt; 1234567891011121314// 表１&lt;h2&gt;Tree as Single Root Node&lt;/h2&gt;&lt;treetable [tree]=&quot;singleRootTree&quot; [options]=&quot;treeOptions&quot; (nodeClicked)=&quot;logNode($event)&quot;&gt;&lt;/treetable&gt;// 表２&lt;h2&gt;Tree as Array of Nodes&lt;/h2&gt;&lt;treetable [tree]=&quot;arrayOfNodesTree&quot; // tsでデータソースを定めたやつ (nodeClicked)=&quot;logNode($event)&quot;&gt; &lt;/treetable&gt; 自分でサンプルを開発した際のメモ tree-table Componentを新たに生成 1\\src\\app&gt; ng g component tree-table 上の階層のComponentでtree-tableを参照するように変更 serveで画面への反映を確認。問題無し123456789&lt;/mat-card-header&gt;&lt;mat-card-content&gt; &lt;div&gt; &lt;app-tree-table&gt;&lt;/app-tree-table&gt; &lt;!--tree tableコンポーネントを挿入----&gt; &lt;/div&gt;&lt;/mat-card-content&gt; サンプルデータで表を出す tree-tableコンポーネントを改修 HTMLの改修 1234&lt;treetable [tree]=&quot;arrayOfNodesTree&quot; (nodeClicked)=&quot;logNode($event)&quot;&gt;&lt;/treetable&gt; tsの改修 import, データソース, interfaceを定義 列を減らしてみる 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677import { Node, Options } from 'ng-material-treetable'; // 省略部分はJSONデータ 表２のデータソース arrayOfNodesTree: Node&lt;Task&gt;[] = [ { value: { name: 'Tasks for Sprint 1', completed: true, owner: 'Marco' }, children: [ { value: { name: 'Complete feature #123', completed: true, owner: 'Marco' }, children: [] }, { value: { name: 'Update documentation', completed: true, owner: 'Jane' }, children: [ { value: { name: 'Proofread documentation', completed: true, owner: 'Bob' }, children: [] } ] } ] }, { value: { name: 'Tasks for Sprint 2', completed: false, owner: 'Erika', }, children: [ { value: { name: 'Fix bug #567', completed: false, owner: 'Marco' }, children: [] }, { value: { name: 'Speak with clients', completed: true, owner: 'James' }, children: [] } ] } ] logNode(node: Node&lt;Report&gt;) { console.log(node); }}// 表のデータ構造を決定export interface Task { name: string; completed: boolean; owner: string;} AP画面への反映を確認1ng serve --open 以下のように表示された エラーが発生 class内で初めにデータの定義が必要 順番を入れ替えればOK 最終的なtsファイル 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990import { Component, OnInit } from '@angular/core';// 追加import { Node, Options } from 'ng-material-treetable';@Component({ selector: 'app-tree-table', templateUrl: './tree-table.component.html', styleUrls: ['./tree-table.component.scss']})export class TreeTableComponent implements OnInit { // データソースを定義 // 省略部分はJSONデータ 表２のデータソース class内の先頭に必要であった arrayOfNodesTree: Node&lt;Task&gt;[] = [ { value: { name: 'Tasks for Sprint 1', completed: true, owner: 'Marco' }, children: [ { value: { name: 'Complete feature #123', completed: true, owner: 'Marco' }, children: [] }, { value: { name: 'Update documentation', completed: true, owner: 'Jane' }, children: [ { value: { name: 'Proofread documentation', completed: true, owner: 'Bob' }, children: [] } ] } ] }, { value: { name: 'Tasks for Sprint 2', completed: false, owner: 'Erika', }, children: [ { value: { name: 'Fix bug #567', completed: false, owner: 'Marco' }, children: [] }, { value: { name: 'Speak with clients', completed: true, owner: 'James' }, children: [] } ] } ]; constructor() { } ngOnInit() { }}// 表のデータ構造の定義export interface Task { name: string; completed: boolean; owner: string;} 参考ページ Angular Material TreeTable Component TreeTable Component画面 Mat-treeとMat-tableを組み合わせて開発する場合の参考 任意のネスト、キー名をTreeで表示するコードサンプル","link":"/Angular%E3%81%A7%E9%9A%8E%E5%B1%A4%E6%A7%8B%E9%80%A0%E3%81%AE%E8%A1%A8%E3%82%92%E9%96%8B%E7%99%BA-Treetable/"},{"title":"[Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング)","text":"Angular初級者向けに、簡単なフォームを生成して入力値を取得するまでを解説します。 基礎知識前提となる超基本なので分かっている部分は飛ばしてください。 Angular Projectの初め方 Angular Project Angularにおけるアプリの雛形/単位のことです Angular PJを生成1ng new &quot;ap-name&quot; Componentを生成 APはコンポーネントと呼ばれる一塊で開発していきます1ng g component &quot;component-name&quot; コンポーネントは以下のファイルのセットです HTML/Typescript/Scss/karma HTMLが画面、Typescriptが機能、Scssがデザイン、karmaがテスト用ファイルというイメージです Angular Material Angular Material Googleが提唱しているMaterial DesignというCSSフレームワークを使うためのツール Google/twitter/Microsoft等は、AngularでWEB APを開発しているので、それらのデザインに使われています 要するにAPの画面の部品を、デザイナーでなくとも簡単に作れるようになるツールです 様々なMaterialを組み合わせてパズルのようにUI(画面のこと)を開発していくのがAngular開発の基本です 使用例 mat button/mat checkbox mat toolbarとside-navでよくある開閉するメニューを作れます 上記を自動生成するSchematicsというツールの解説記事も書いたので、理解が進んだら学習してみてください [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する mat input (datepicker) mat table 設定を覚えれば、上記の様なmaterialをhtmlに1行書くだけで表示できます つまり、これらを順にマスターしていけば、APの画面を自在に作れます mat-input Angular Material mat Input 今風のフォーム（入力欄のこと）を作れます HTMLに&lt;input mat-input&gt;&lt;/input&gt;と一行書くだけで、インターネット黎明期のようなフォームにならずに済みます 他にも色々と便利な機能があります オートコンプリート機能 入力途中で予測表示してくれる機能 AngularもGoogleが作っているだけあって、ブラウザの記憶機能も使えます プレイスホルダー機能 入力欄に未記入の状態のみ、うっすら案内を表示してくれる機能 記入例をこれで表示するとイケてるAPっぽく見えます バリデーション機能 typeの指定 例えば mail にすれば自動的にmailの英数で@を挟む形式以外入力できなくなります 電話番号や郵便番号であれば、自動的に-を補完してくれたりもします 読み込みを挟まないエラー表示 条件を定めると、入力中にリアルタイムでエラー表示等できます 全入力して送信を押すまでエラーが出ないWEBページでイライラしたことありませんか？こういったUX(ユーザ体験)に配慮することでモダンなAPを開発しましょう。例えば、大文字小文字は自動で変換するか先に警告しましょう。 双方向データバインディング 双方向データバインディング html側とts側で変数を自動的に同期することが可能です 記法1[(ngModel)]=&quot;variable-name&quot; 実装Angular Materialのinstall 以下のコマンド一発で利用の準備が整います1$your-angular-pj&gt; ng add @angular/material 質問に対しては全てYesでOK 途中でアプリケーションの主要カラーとサブカラーを聞かれます 左が主要カラー/右がサブカラーです html 実装例を以下に示します input要素にmatInputを属性として書くだけでangular material仕様のフォームになります [(ngModel)]=”key” 双方向データバインディングで、ts側と変数keyを共有しています。入力値が自動的に変数keyに代入されます NaNで変数の値を表示できます 12345&lt;mat-form-field&gt; &lt;mat-label&gt;KeyId&lt;/mat-label&gt; &lt;input matInput id=&quot;KeyId&quot; key=&quot;KeyId&quot; [(ngModel)]=&quot;key&quot; min=&quot;1&quot; placeholder=&quot;Ex. abc...&quot; &gt;&lt;/mat-form-field&gt;{{key}} ts 変数を宣言するだけでOK12// 入力値を格納する変数を宣言key; mat-inputにバリデーションを実装する 次に今回作ったフォームに”バリデーションチェック”を実装しましょう [Angular mat-input] バリデーションまとめ バリデーションチェックとは？ 最近のWEBサービスでよく見受けられる、リアルタイムで入力値をチェックして問題があればエラーを表示してくれる機能などのこと レガシーなサービスでは、半角全角が間違っていても申請ボタンを押して更新するまで気づくことができず、ユーザがストレスを受けて利用を諦めてしまうことも 活用例 未入力の項目があれば、申請ボタンを無効化。該当箇所を赤くマーキング 利用可能な型（Ex. 全角、半角、英数）を規定して制限 文字数を制限 悪意を持った攻撃を防ぐ効果があります passwordを＊＊＊でマスク typeを規定 emailの@や郵便番号や電話番号のーが挟まる形式など おまけ：未入力の場合のみ初期値を表示するロジックを開発する ts側に以下の様な判別ロジックを書きます 入力値の有無をif(this.key === undefined)で判断しています1234567// 入力値を格納する変数を宣言key; // 判別ロジック if ( this.key === undefined ) { this.key = '初期値'; } 以上です。Angular APのUI(画面)開発はAngular Materialのページで必要そうなMaterialを探して、使い方をググりながら進めていくというイメージを持てればある程度自走できるようになると思います。Angular Materialについて、公式ドキュメントだけでは難しいものは記事に解説をまとめているので、参考にどうぞ。 参考関連記事 [Angular mat-input] バリデーションまとめ [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック その他 angular material angular material components Angular Materialについて Angular Materialのインストールから使い始めまで Angularで「フォーム」の入力値をコンポーネントと同期するには？（双方向バインディング）","link":"/Angular%E5%85%A5%E9%96%80-mat-input%E3%81%A7%E7%94%9F%E6%88%90%E3%81%97%E3%81%9F%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0%E3%81%8B%E3%82%89%E5%85%A5%E5%8A%9B%E5%80%A4%E3%82%92%E5%8F%96%E5%BE%97-%E5%8F%8C%E6%96%B9%E5%90%91%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/"},{"title":"[Angular入門] AngularCLI環境構築~PJの開始,コンポーネントの生成,初めての関数開発","text":"未経験からモダンなWebアプリ開発を学びたい方向けに、Angularというフレームワークを用いた開発の初歩を解説します。Angularは公式ドキュメントが豊富なのですが、基本的にWeb開発の経験者を想定して書かれています。極力丸めた表現で書いたので、この記事で「自分にもアプリ開発できそうだ」と一歩踏み出せれば幸いです。こういった記事や実戦経験で概要を掴んで、詳細は書籍で学習するという進め方がおすすめです。 前提条件 Node.jsのインストール Angularで開発するにはNode.jsが必要です JavaScriptを動かすための土台のようなもの CLIのインストール angular cliをインストール angularのコマンドを使うためのツールを使えるようにする1npm install -g @angular/cli ngコマンド ngはAngularの略 例えば、ng generate ~~でファイルのセットを自動生成できる ngコマンドのバージョンを見てみる 1ng version 以下が表示されれば、問題なく入っている 123456789101112131415161718192021222324 _ _ ____ _ ___ / \\ _ __ __ _ _ _| | __ _ _ __ / ___| | |_ _| / △ \\ | '_ \\ / _` | | | | |/ _` | '__| | | | | | | / ___ \\| | | | (_| | |_| | | (_| | | | |___| |___ | | /_/ \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_| \\____|_____|___| |___/ Angular CLI: 10.0.5Node: 14.7.0OS: darwin x64Angular: ... Ivy Workspace: Package Version------------------------------------------------------@angular-devkit/architect 0.1000.5@angular-devkit/core 10.0.5@angular-devkit/schematics 10.0.5@schematics/angular 10.0.5@schematics/update 0.1000.5rxjs 6.5.5 プロジェクトを作成 プロジェクト Angularにおけるアプリの単位 ng newコマンドでプロジェクトを作成 1ng new &quot;ap-name&quot; 上記を実行するといくつか質問をうける routing routingとは画面遷移（APの画面の移動）のこと Angularのデフォルトの機能を使うと楽に実装できる yでOK routingの設定ふぁいるが自動生成される。あとでいじる1? Would you like to add Angular routing? Yes stylesheetは何を使う？ cssは聞いたことがあるひとも多いと思うが、文字の色などのデザイン面を定義するファイルのこと AngularではScssを利用するのが基本 scssはcssの拡張版 12? Which stylesheet format would you like to use? SCSS [ https://sass-lang.com/documentation/syntax#scss 上記の質問に答えるとAngular PJの自動生成を開始する 以下のようにAngularに必要なファイルのセットがここでできている123456789101112131415161718192021222324252627282930313233CREATE ap-name/README.md (1024 bytes)CREATE ap-name/.editorconfig (274 bytes)CREATE ap-name/.gitignore (631 bytes)CREATE ap-name/angular.json (3662 bytes)CREATE ap-name/package.json (1250 bytes)CREATE ap-name/tsconfig.base.json (458 bytes)CREATE ap-name/tsconfig.json (426 bytes)CREATE ap-name/tslint.json (3184 bytes)CREATE ap-name/.browserslistrc (853 bytes)CREATE ap-name/karma.conf.js (1019 bytes)CREATE ap-name/tsconfig.app.json (292 bytes)CREATE ap-name/tsconfig.spec.json (338 bytes)CREATE ap-name/src/favicon.ico (948 bytes)CREATE ap-name/src/index.html (292 bytes)CREATE ap-name/src/main.ts (372 bytes)CREATE ap-name/src/polyfills.ts (2835 bytes)CREATE ap-name/src/styles.scss (80 bytes)CREATE ap-name/src/test.ts (753 bytes)CREATE ap-name/src/assets/.gitkeep (0 bytes)CREATE ap-name/src/environments/environment.prod.ts (51 bytes)CREATE ap-name/src/environments/environment.ts (662 bytes)CREATE ap-name/src/app/app-routing.module.ts (245 bytes)CREATE ap-name/src/app/app.module.ts (393 bytes)CREATE ap-name/src/app/app.component.scss (0 bytes)CREATE ap-name/src/app/app.component.html (25757 bytes)CREATE ap-name/src/app/app.component.spec.ts (1062 bytes)CREATE ap-name/src/app/app.component.ts (212 bytes)CREATE ap-name/e2e/protractor.conf.js (869 bytes)CREATE ap-name/e2e/tsconfig.json (299 bytes)CREATE ap-name/e2e/src/app.e2e-spec.ts (640 bytes)CREATE ap-name/e2e/src/app.po.ts (301 bytes)✔ Packages installed successfully. Successfully initialized git. 生成されたアプリを見てみる ng newで指定した名前のディレクトリができている123lsap-name 中身を見てみる Angularの基本セットが入っている 一個ずつ使い方を理解していけばOK12345cd ap-nameap-name % lsREADME.md karma.conf.js package.json tsconfig.base.json tslint.jsonangular.json node_modules src tsconfig.jsone2e package-lock.json tsconfig.app.json tsconfig.spec.json ng newで自動生成したAngular Projectの構成 基本的にいじるのは app-name/src/appの中身 見てみるとapp componentのセットが入っている app componentは最も大きいコンポーネント12345ap-name % cd src/app app % lsapp-routing.module.ts app.component.scss app.component.tsapp.component.html app.component.spec.ts app.module.ts APを起動してみる serveでAngularで作ったアプリを起動できる –openでブラウザ（EX. Chrome）1ng serve --open 起動したアプリの画面が表示される ng newで生成したアプリの初期画面 コンポーネントの追加やファイルの編集のあとも同様にして、変化を確認するのが開発の流れ エディタにCloud Shellなどを利用している場合の注意 -p 8080と書いてserve12345678910111213141516171819 ng serve -p 8080 ``` - 画面右上のアイコンを押下”ポート8080でプレビュー”を選択すれば起動したアプリをブラウザで確認できる - 詳細は以下の記事にまとめてある - [Cloud Shellのプレビュー表示における注意点](https://j-xaas.github.io/Google-cloud-shell-x-Hexo-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89-%E8%A8%98%E4%BA%8B%E7%B7%A8%E9%9B%86/#%E8%A8%98%E4%BA%8B%E3%81%AE%E3%83%97%E3%83%AC%E3%83%93%E3%83%A5%E3%83%BC%E8%A1%A8%E7%A4%BA%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E6%B3%A8%E6%84%8F%E7%82%B9) - 解説 - portというものの指定が必要 - デフォルトではhttp://localhost:4200/ - 端末のport 4200でAPが起動している - Cloud Shellはクラウド上のサーバで動いている - serveで実行したアプリもクラウド上のサーバで動いている - 確認ためにはCloudShellのプレビュー機能が必要 - プレビュー機能がポート8080にしか対応していない。そのため、serveの実行時にportの指定を行っている- serveは Ctrl＋Cで止められる### ファイルを編集して画面の変化を見てみる- app.component.htmlを開く - 何やら大量に書いてある :host { font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\"; font-size: 14px; color: #333; box-sizing: border-box; -webkit-font-smoothing: antialiased; -moz-osx-font-smoothing: grayscale; } 123 - 先ほど見た初期画面がここで定義されている- 全て消して、適当に書いてみる。Command+Sなどで保存 初めてのAngular スイッチ 1- serveで変化を確認してみる ng serve --open 123456789101112131415161718192021222324252627282930- 表示されている![Angular preview](https://user-images.githubusercontent.com/68212997/89632870-e637a580-d8dd-11ea-92de-b49dacf68059.png)ここまでで、ファイルを編集してserveで確認していくイメージが湧くはず### コンポーネントを生成- コンポーネントとは？ - 画面の中の塊の単位だと考えれば良い - Angularではコンポーネントを入れ子構造にして、画面を作っていく - コンポーネント毎に以下のファイルの郡のセットが自動生成され、それらをいじっていく - ~~component.html - 表示される画面 - 先ほどいじったのは、appコンポーネントのhtml - ~~component.scss - デザインを担当 - Ex. サイズや色など - ~~component.ts - 機能を担当 - tsはTypescriptの略 - typescriptはJavaScriptの拡張版 - 主にここを開発していく - ~~somponent.spec.ts - テスト用のファイル- コンポーネントを自動生成する - 以下を実行すると上記のセットが生成される - 実行する場所はsrc/app配下 ng g component \"component-name\" 1- 以下のようにファイルが生成される app % ng g component \"component-name\" CREATE src/app/component-name/component-name.component.scss (0 bytes) CREATE src/app/component-name/component-name.component.html (29 bytes) CREATE src/app/component-name/component-name.component.spec.ts (678 bytes) CREATE src/app/component-name/component-name.component.ts (307 bytes) UPDATE src/app/app.module.ts (505 bytes) 12- lsで確認 - component-nameというディレクトリを確認できる app % ls app-routing.module.ts app.component.scss app.component.ts component-name app.component.html app.component.spec.ts app.module.ts 123- 生成されたコンポーネントの中身を見てみる - コンポーネントのファイル郡ができている app % cd component-name omponent-name % ls component-name.component.html component-name.component.spec.ts component-name.component.scss component-name.component.ts 12- component.htmlの中身 - 初期状態で以下のように書かれている component-name works! 123456- serveをしてもこのコンポーネントはまだ表示されない- このコンポーネントをappコンポーネントの中に入れ子構造で配置することでAPの画面に現れる- コンポーネントの挿入方法 - 親となるコンポーネントのhtmlに以下のように要素（&lt;&gt;でhtmlに書くもの）を記述する 12- app.component.htmlを開き以下のように記述 初めてのAngular スイッチ 12- serveで確認 ng serve --open 12345678910- 入れ子構造にしたcomponent-nameコンポーネントの中身が表示されていることがわかる![Angular preview 2](https://user-images.githubusercontent.com/68212997/89634461-665f0a80-d8e0-11ea-90f3-3384ab6fba3e.png)### Typescriptで機能を書いてみる- app.component.tsを開く - 初期状態で以下のように書かれている import { Component } from '@angular/core'; @Component({ selector: ‘app-root’, templateUrl: ‘./app.component.html’, styleUrls: [‘./app.component.scss’]})export class AppComponent { title = ‘ap-name’;} 12- 以下のようにアラートを出す関数（機能）を書く import { Component } from ‘@angular/core’; @Component({ selector: ‘app-root’, templateUrl: ‘./app.component.html’, styleUrls: [‘./app.component.scss’]})export class AppComponent { title = ‘ap-name’; firstMethod(){ alert(“初めての関数”); }} 12345このままではこの関数は実行されない。トリガーを指定しなければならない- htmlにclickイベントを指定 - 以下のように記述 &lt;button (click)=”firstMethod()”&gt;スイッチ 1234- 解説 - (click)=&quot;&quot;でクリックされた際に＝で指定した関数を実行すると定義できる- serveして確認 ng serve –open ![firstMethod](https://user-images.githubusercontent.com/68212997/89635960-c8207400-d8e2-11ea-86ae-0f0753bfd165.png) - 次にAngular Materialを使ってモダンなUIを開発しする手法と入力値の取得方法を学びましょう - [[Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング)](/Angular入門-mat-inputで生成したフォームから入力値を取得-双方向データバインディング/) 本記事では極力丸めた表現をしているので、細かい用語などは[書籍](https://amzn.to/2XAs0Py)での学習がおすすめです。 ## 参考記事 - [[Angular入門] 環境構築～PJの開始/基本コマンド](Angular入門-環境構築～PJの開始-基本コマンド/) - [[Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング)](/Angular入門-mat-inputで生成したフォームから入力値を取得-双方向データバインディング/) - [[Google cloud shell x Hexo] 環境構築&amp;記事編集](https://j-xaas.github.io/Google-cloud-shell-x-Hexo-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89-%E8%A8%98%E4%BA%8B%E7%B7%A8%E9%9B%86/) - [[Angular入門] 環境構築～PJの開始/基本コマンド](/Angular入門-環境構築～PJの開始-基本コマンド/) - [Angular x AWS SDK for JavaScriptの始め方](/Angular-x-AWS-SDK-for-JavaScriptの始め方/) - [[Angular JavaScript] JSONデータのファイル化と出力 ~取得したデータを任意の名称で保存するロジック~ (TypeScript)](/Angular-JSONデータのファイル化と出力-クラウドから取得したデータを任意の名称で保存する/) - [[Angular JavaScript] JSONファイル(複数)の読み込み](/Angular-JavaScript-JSONファイルの読み込み/) - [静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages)](/静的ホスティングサービスまとめ-Netlify-S3-Firebase-Hosting-Github-Pages/) - [[Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける](/Angular-ReactiveForm-x-mat-input-一つの入力欄のエラーメッセージを出し分ける/) - [[Angular mat-input] バリデーションまとめ](/Angular-mat-input-バリデーションまとめ/) - [[Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション](/Angular-複数のcheckboxで一つ以上のチェックを必須とするバリデーション/) - [[Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング)](/Angular入門-mat-inputで生成したフォームから入力値を取得-双方向データバインディング/) - [[Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得](/Angular-mat-selection-listでcheckboxを表示～選択値を配列として取得/) - [[Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する](/Angular-Schematics-開閉可能なサイドナビ＆ツールバーを3分で自動生成する/) - [[Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック](/Angular-map-fileter-mat-checkboxを使って選択値を配列に格納するロジック/) ß∑ ## Angular関連のTips - VSCode拡張機能 - [おすすめ](https://marketplace.visualstudio.com/items?itemName=johnpapa.angular-essentials) - その他にも沢山あるので随時導入してください - [Angular公式のチュートリアル](https://angular.jp/start) - [Angularよく使うコマンド](https://qiita.com/AsatoSa/items/ce7b416dc83522965d72)","link":"/Angular%E5%85%A5%E9%96%80-AngularCLI%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89-PJ%E3%81%AE%E9%96%8B%E5%A7%8B-%E3%82%B3%E3%83%B3%E3%83%9D%E3%83%BC%E3%83%8D%E3%83%B3%E3%83%88%E3%81%AE%E7%94%9F%E6%88%90-%E5%88%9D%E3%82%81%E3%81%A6%E3%81%AE%E9%96%A2%E6%95%B0%E9%96%8B%E7%99%BA/"},{"title":"[Angular入門] 環境構築～PJの開始/基本コマンド","text":"WEBアプリケーション開発に用いるフレームワークである、Angularの環境構築～アプリの雛形の生成までを解説します。Angularを使えば、Single Page Applicationと呼ばれるモダンなアプリを高速で開発することができます。例えば、GoogleやTwitter等のWEBアプリはこれで作られています。 1. Angular動作環境の準備手順 1.1. Node.jsのインストール 1.2. Angular CLIのインストール 2. Angularプロジェクトの作成~実行手順 2.1. Angularプロジェクトの作成 2.2. ビルドと実行 3. Angular関連のTips 関連記事 1. Angular動作環境の準備手順1.1. Node.jsのインストール インストール済みであれば飛ばしてください Node.jsとは JavaScriptが動くために必要な土台のようなものです Angularで開発する際には、TypeScriptというJavaScriptの拡張版の言語でコードを書きます TypeScriptは最終的にJavaScriptに変換されて動くので、Node.jsが必須となります Node.js Download こちらから自身のOSに合ったものをダウンロードしてください ダウンロードしたnode-vX.XX.X-xXX.msiをダブルクリックして、インストールを開始します。下記画面が表示されるので、表示される内容に従いインストールを進めてください。 1.2. Angular CLIのインストール インストール 1npm i -g @angular/cli 正常にインストールされれば、ngコマンドを使用可能になります(ngはAngularの略称) ngコマンドを使うことで、一からコードを書かずにAPの一部を自動生成できます このように開発工数を短縮する為に使う便利な道具がフレームワークだと思ってください 2. Angularプロジェクトの作成~実行手順2.1. Angularプロジェクトの作成 以下のコマンドでアプリの雛形が生成されます12ng new &lt;sample-ap-name&gt;cd &lt;sample-ap-name&gt; Angualr APのディレクトリ構成 以下のセットが自動生成されます 2.2. ビルドと実行 次のserveコマンドで先の手順で生成したAP（の雛形）が起動します。 1ng serve --open 上記コマンドの機能詳細 開発用のWEBサーバが起動し、作成したAPを起動 TypeScriptコンパイラを、監視モードに ソースコードが変更される度に、ブラウザを更新 –openはブラウザも同時に起動するオプション 以下のようにAngular PJの初期画面がブラウザに表示されれば成功です ここまででWEB AP開発のスタートラインに立てました。続いて生成されたファイルを弄ってUI(画面のこと)や簡単な機能を開発してみましょう。 [Angular入門] AngularCLI環境構築~PJの開始,コンポーネントの生成,初めての関数開発 [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) 3. Angular関連のTips VSCode拡張機能 おすすめ その他にも沢山あるので随時導入してください Angular公式のチュートリアル Angularよく使うコマンド 関連記事 [Angular入門] AngularCLI環境構築~PJの開始,コンポーネントの生成,初めての関数開発 [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング)","link":"/Angular%E5%85%A5%E9%96%80-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89%EF%BD%9EPJ%E3%81%AE%E9%96%8B%E5%A7%8B-%E5%9F%BA%E6%9C%AC%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89/"},{"title":"Avatarify 手軽なディープフェイクの作り方　〜画像の顔をフェイストラッキングで操る〜","text":"最近流行りのディープフェイクを体験できるiOSアプリです。（PC版もあります）一時期これを利用して、有名人や友人になりきってWEB会議する遊びが流行りました。 概要 Deepfakeとは Deep Learningを用いて作り出される偽の動画や画像 ネット上では250枚ほどの写真をアップロードすると、2日程度でディープフェイク動画を作成するオンラインサービスもあり、1本あたり2.99ドル（約300円）ほどの低価格で取引されているらしい 活用シーン 最近では映画で特殊メイクの代わりに用いられることがあります。一方でポルノに勝手に有名人の顔を合成されて問題にもなっています。 Avatarify 機能 静止画の顔をリアルタイムで操作 リアルタイムで、手軽なのがこれまでのディープフェイクツールとの差分 フェイストラッキングで自分の顔に合わせて動く 動作環境 iPhone/iPad App Storeからインストール PC版はPythonが必要 gitからインストールする 使い方iOS版 事前に動かしたい静止画を用意 実際の人物でも絵や動物でも動きますが、目/口がはっきりしていないとむりでした 画像を登録 ここで設定した目/口の箇所が動きます インカメで自分の顔を認識させて操作 以下の動画で解説しています ZoomなどのWEB会議で利用する場合は、背景にこれを表示するだけです。 PC版(github) github avatarify 上記にソースが公開されています 使用方法はRead.meを参照 公式のPC版デモ その他：DeepFaceLab 動画の加工にはこっちが主に利用されているようです PC版の使い方もそのうちまとめます。Pythonやgitが動く環境を構築済みの人ならすぐできそう。 関連記事 らくがきARの使い方 [AR.js x A-Frame] WebAR入門～マーカーベースで3Dオブジェクトを表示するAPを開発する～ Github DeepFaceLab 【超簡単！誰でも使える！】有名人になりきってZOOM飲み会が出来るAvatarifyが凄すぎるので、使用方法をまとめてみた。 ZoomやSkypeでリアルタイムに他人になりすませるオープンソースのディープフェイクツール「Avatarify」","link":"/Avatarify-%E9%9D%99%E6%AD%A2%E7%94%BB%E3%81%AE%E9%A1%94%E3%82%92%E3%83%95%E3%82%A7%E3%82%A4%E3%82%B9%E3%83%88%E3%83%A9%E3%83%83%E3%82%AD%E3%83%B3%E3%82%B0%E3%81%A7%E6%93%8D%E3%82%8B%E3%82%A2%E3%83%97%E3%83%AA/"},{"title":"[Cloud9 x Angular] cloud9でng serveを実行してAPの画面を確認するまで","text":"Angularの開発であれば、小まめにWEB APの画面を確認しながら進めるのが一般的だと思います。ただ、開発環境にcloud9を採用する場合は、ng serveを実行する際に一手間必要になります。初級者が必ずと言っていいほどハマるポイントなので解説をおいておきます cloud9上でのserve 1. previewの表示 2. angular.jsonファイルを書き換えてポートを変更 3. ng serveの実行（オプション指定） cloud9上でのserve Localとcloud9の比較 開発環境 ng serveでAPが動作する場所 Local端末 localhost(ローカルの端末上) cloud9 実態はAWSのEC2インスタンス(仮想サーバー) cloud9上でserveを実行しても、EC2インスタンス上でAPが動きます いつものようにlocalhostを見ても、WEB APを確認できるはずが無いわけです そこでCloud9のAPの画面を見るにはPreviewという機能を使用します Preview トップの画像の様にcloud9の画面の一枠にweb APの画面を表示できます cloud9でpreviewにAPの画面を表示する為に必要なこと portの指定(8080) ホストの指定 PreviewのURLを指定します disableHostCheck 1. previewの表示 上部タブから”Preview”を選択後”Preview Runnig Application”を選択するとCloud9上に表示できます PreviewのURL欄を控えてください 2. angular.jsonファイルを書き換えてポートを変更 cloud9の場合はportを8080に設定する必要があります 設定せずとも”–port 8080”を毎回オプションとして付ける手もあります123456&quot;serve&quot;: { &quot;builder&quot;: &quot;@angular-devkit/build-angular:dev-server&quot;, &quot;options&quot;: { &quot;browserTarget&quot;: &quot;NgTororo:build&quot;, &quot;port&quot;: 8080 //ここを追加 } 3. ng serveの実行（オプション指定）1ng serve --disableHostCheck --public-host &lt;cloud9のPreviewのURL&gt; 以上です。このようなつまらないポイントで”半日失いました”は可哀そうなので、cloud9のビギナーを見かけたら教えてあげてください。","link":"/Cloud9-x-Angular-cloud9%E3%81%A7ng-serve%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%97%E3%81%A6AP%E3%81%AE%E7%94%BB%E9%9D%A2%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/"},{"title":"[CI/CD入門] Github Actionsでビルド/テスト/デプロイを自動化","text":"Github Actionsというサービスを活用して、開発フローの一部を自動化する手法を勉強したので、まとめておきます。今後のデファクトになりそうな便利ツールなので覚えて損はないと思います。 CI/CDとは Github Actions解説 概要 公開アクションの利用方法 料金 注意点 実行環境 ワークフローの定義 ワークフロー(YAMLファイル)の構造 Job Step 開発フローの検討 例：S3(AWS)でAPをHostngしているケースの作業 Github Actionsを利用した開発フロー 実装 使い方 Githubブラウザ側で設定 Loacalリポジトリで作業する場合 Workflowテンプレートの開発 Triggerを指定 実行環境を設定 actionの設定 checkout 環境設定 build 処理実行後にpush Github Actionsのステータス 所感 参考 関連記事 (本番環境へのデプロイまで) Github Actions S3 CI/CDとは開発の効率化を目的とした、以下の思想を指します CI (継続的インテグレーション) テスト, ビルド等を自動化して小まめに行う CD (継続的デリバリー) 本番環境へのデプロイを自動化して小まめに行う 上記を実現するために様々なツール(ex. jenkins, Circle CI…)があり、Githubと連携させて利用するのが一般的です。2020にGithubが自ら打ち出した新たなサービスがGithub Actionsです。 Github Actions解説概要 Github Actions Githubが提供している機能の一つ 機能：ワークフローの自動化 pushやmergeを起点に自動で何らかのアクションを実行 ex. テストの自動化、Buildの自動化、本番環境へのデプロイの自動化 ymlファイル形式でワークフローを定義して使う 魅力 工数削減 従来のようにGitと他のツールを連携させる手間が無くなる。学習コストや設定にあける工数を削減可能 再利用性 作成したWrokflowをGitでそのまま管理して、使いまわせる 公開アクションが充実しており、よくあるフローは大抵用意されている 公開アクションの利用方法 Marketplaceから検索することで利用可能 試しにAngularで検索してみると以下が表示された Github Actions Marketplace Angular S3/Firebase/Github Pages等のHostingサービスへの自動デプロイやテストを実行するActionを一般ユーザが作って公開してくれている ソースを更新してGitにPushしただけで、瞬時に本番環境も更新できるスピーディーな運用をパッと実現できそうです 本番環境(Hostingサービス)への初回のデプロイまでは以下の記事で解説しています [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 料金 Publicリポジトリ 無料 Privateリポジトリ 従量課金性 大規模開発でなければ、無料で使えそう 注意点 Github Enterpeise Cloudには対応済みだが、Github Enterprise Serverは未対応(2020\\06時点) Github社に問い合わせたところ、2020後半に対応予定とのこと 契約プラン レガシープランユーザの場合利用できないらしいので、会社で利用している方は要確認。リポジトリにActionタブが無い場合はレガシープランかもしれません。 公式説明1Github Actionsはレガシープランユーザはご利用できません。 実行環境 裏側でVM（仮想サーバー）が立ち上がり、そこで処理を実行してくれます OS Linux/Windows/macOSから選んで利用可能 これもテンプレートで設定します LinuxやWindowsについては、MicorosoftがGithubを買収した経緯もあり、Azure上で動くようです ワークフローの定義 定義方法 リポジトリにworkflowディレクトリを作成1.github/workflows/ YAMLファイルを配置 ここにワークフローを定義 ファイルがワークフローの単位となる ファイルは複数可、並列で実行される ワークフロー(YAMLファイル)の構造12345ワークフロー（YAMLファイル） └ jobs: └ ジョブ(名前は任意) └ steps: └ アクション Job 各ジョブは仮想環境の新しいインスタンスで実行される。 ジョブ間で環境変数やファイル、セットアップ処理の結果などは共有されない。 ジョブ間の依存を定義して待ち合わせることができる。 データの受け渡しが必要ならアーティファクト経由 Step Jobが実行する処理の集合。 同じJobのStepは同じ仮想環境で実行されるのでファイルやセットアップ処理は共有できる。しかし各ステップは別プロセスなのでステップ内で定義した 環境変数は共有できない。 jobs..envで定義した環境変数は全Step で利用できる 開発フローの検討分散開発におけるGit flowを検討しました 例：S3(AWS)でAPをHostngしているケースの作業 APを改修して、本番環境に変更を反映するまでに必要な作業 開発 gitへpush PullRequest レビュー ⇒ Master Merge Build 本番環境へデプロイ Masterが更新される度に、Buildしてデプロイする単純作業(4 &amp; 5)を自動化したい やり方は２通りありそう Github Actionsでbuildとdeployを実行 GithubからはWebhookのみ、AWS上でCode Builderを起動させてBuild、Code Deployでdeployを実行 Github Actionsを利用した開発フロー 個人で担当箇所を開発 Gitの個人Branchにpush Pull Request レビューを実施 Masterへmerge Github Actionsが起動 Buildを実行 (KarmaによるE2Eテストを実行) テストについての解説は今回は省略します 本番環境(etc. S3/Firebase…)へデプロイ Slack or Teamsに通知(ここはWebhookやNotificationを使ってもOK) 実装使い方 workflowを定義したymlファイルを作ります 以下のように配置したymlファイルが読み込まれます1your-repository\\.github\\workflows\\sample.yml workflowの生成方法（以下のどちらか） Githubのブラウザ(Actionタブ)から設定 Local Repositoryでディレクトリ毎生成してpush Githubブラウザ側で設定 Githubの任意のリポジトリのActionタブで設定を行う Github Enterpriseを利用中でActionタブが無い場合 レガシープランユーザーの可能性があるので、契約の確認が必要 公式説明1GitHub Actionsはレガシープランユーザーではご利用できません。 ブラウザでそのままディレクトリとwrokflowファイルを生成できます set up a workflow yourselfを押下すると以下の様画面に飛びます Actionsタブを確認 先ほど生成されたworkflowが実行されていることが分かります New workflowを押下してworkflowを追加していけます Loacalリポジトリで作業する場合 ディレクトリを作成 1your-repository&gt; mkdir .github/workflows/ YAMLファイルを作成 名称の規則は無し1your-repository.github/workflows/&gt; touch sample.yml そのままymlファイルを編集してGitにpushすれば、Github Actionsが動くようになります Workflowテンプレートの開発 AngularアプリをBuildして、AWSのS3にデプロイするワークフローの例 解説は後述します12345678910111213141516171819202122232425262728293031323334353637383940414243name: Angular CI/CD ## workflow名を設定on: ## workflowのTriggerを定義 push: ## push時に発火 他例) pull request branches: ## 条件でmaster branchへのpushに限定 - masterjobs: ## ここで実行するジョブを指定 build: ## buildという名目のジョブを定義 ## 実行環境 Github Actions提供の仮想サーバー runs-on: ubuntu-latest ## Ubuntsの最新版環境を指定 strategy: matrix: node-version: [12.x] steps: ## 以降に実行する処理/コマンドを定義 ## github actionsの環境にリポジトリのソースを持ってくる - uses: actions/checkout@v2 ## 環境構築 - name: Angular Github Actions # 公開アクションでangular動作環境を構築 uses: mayurrawte/github-angular-actions@latest ## CI: Build - name: Build ## アクション名 ## 実行するコマンド run: ng build --prod ## CD: S3にデプロイ - name: S3 site action uses: erangeles/s3-site-action@v1.0 ## Github Actions環境で処理後のソースをGitに返す # Runs a single command using the runners - name: change directory name &amp; return for git run: | git config user.name &quot;&lt;git-user-name&gt;&quot; git config user.email &quot;&lt;git-user-e-mail&gt;&quot; git remote set-url origin https://:${{ secrets.GITHUB_PASS }}@github.com/XXXXXXXX/XXXXXXXX.github.io git add * git commit -m &quot;Generate &amp; Change directory name!&quot; git push origin master Triggerを指定 on: でworkflowが発火するタイミングを指定できます 以下はmaster mergeの実行時を指定1234on: ## workflowのTriggerを定義 push: ## push時に発火 他例) pull request branches: ## 条件でmaster branchへのpushに限定 - master 実行環境を設定 Github Actionsは裏側でVM(仮想サーバー)が動きます 今回はLinux (Ubunts)を設定 WindowsやMacOS等、一通り揃っています 12345## 実行環境 Github Actions提供の仮想サーバーruns-on: ubuntu-latest ## Ubuntsの最新版環境を指定strategy: matrix: node-version: [12.x] actionの設定 ワークフローの最小単位 ２種類ある run コマンドを実行 uses Githubやサードパーティの公開actionを利用 設定の流れ まず公開のアクションがないか探してみる なければ実行したいコマンドをrunで設定 checkout まずはgithub actionsで利用する仮想サーバーにリポジトリのソースコードを持ってくる必要があります Githubが事前に公開アクション（actions/checkout@v2）を用紙してくれているので、そちらを使います 12## github actionsの環境にリポジトリのソースを持ってくる- uses: actions/checkout@v2 環境設定 Angularのコマンドを実行するためにNode.jsやAngular CLIをinstallする必要があります 今回は公開アクションで両方終わらせていますが、それぞれ設定する際の例を以下に示します 効果アクションはバージョンによって動かなくなるリスクもあるので念のため 参考 Using Node.js with GitHub Actions Nodejs動作環境を公開アクションで構築 12- name: Setup Node.js environment uses: actions/setup-node@v1.4.2 angular CLIをrunでinstall 123## 環境構築が必要- name: install run: npm install -g @angular/cli build runでbuildコマンドを実行12345## -----CI(継続的インテグレーション)----## Buildするアクション- name: Build ## アクション名 ## 実行するコマンド run: ng build --prod 処理実行後にpush Github Actions環境(仮想サーバー)で処理したため、リポジトリへpushで反映する必要がある12345678910## Github Actions環境で処理後のソースをGitに返す# Runs a single command using the runners- name: change directory name &amp; return for git run: | git config user.name &quot;&lt;git-user-name&gt;&quot; git config user.email &quot;&lt;git-user-e-mail&gt;&quot; git remote set-url origin https://:${{ secrets.GITHUB_PASS }}@github.com/XXXXXXXX/XXXXXXXX.github.io git add * git commit -m &quot;Generate &amp; Change directory name!&quot; git push origin master Github Actionsのステータス Actionsタブのjob名から実行結果を確認出来ます ここに出ているのは、Github Actionsで立ち上がった仮想サーバーの中のできごとです GithubをMicrosoftが買収したこともあって、裏はAzureの仮想サーバー(Linux)です 実行時 workflowを開発のデバッグ例 Github Actionsの中でgitコマンドを実行させようとしていますが、アカウント名などを設定できていないために失敗しており、git configも実行させないとダメそうだ、と分かります 所感他の方もおっしゃっているように、Github Actionsはworkflowの書式が簡単で、即日で使いこなせる”手軽さ”が魅力的でした (jenkins等はもっと学習コストがかかるイメージ)ディレクトリ毎コピーするだけで簡単に再利用できるため、開発チーム内で貯めていけば、より効果を発揮しそうです。 その他: Github Actions活用例 Github Pages x Hexo運用をGithub Actionsで自動化 参考関連記事 (本番環境へのデプロイまで) [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 Github Pages x Hexo運用をGithub Actionsで自動化 Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 Github入門 ～入社初日の完全な素人でも分かる優しい説明～ [CI/CD入門] Github Actionsでビルド/テスト/デプロイを自動化 Github x Teams Webhook/Notificationによる連携方法 Github Pages x Hexo運用をGithub Actionsで自動化 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github.comからGithubEnterpriseへの移行手順 Github Actions Github Actions Document GitHub Actions のコンテキストおよび式の構文 GitHubの新機能「GitHub Actions」で試すCI/CD Github Actionsの使い方メモ Github Action の作り方メモ AWESOME ACTIONS お勧めアクションやツール Building Angular Apps Using GitHub Actions buildの記載例 GitHubの新機能「GitHub Actions」でワークフローを自動化しよう S3 AWS S3にAngularアプリをデプロイする手順 Angularで作ったWebアプリをGitHubで管理してS3に自動デプロイする AWS初心者の私がAmazon S3のStatic website hostingを利用して静的Webページをホスティングしてみました","link":"/CI-CD%E5%85%A5%E9%96%80-Github-Actions%E3%81%A7%E3%83%93%E3%83%AB%E3%83%89-%E3%83%86%E3%82%B9%E3%83%88-%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%92%E8%87%AA%E5%8B%95%E5%8C%96/"},{"title":"CloudFrontのアクセスログをLoggingで収集～aws configで改ざん防止","text":"CloudFrontのLoggin機能を有効化して、任意のS3バケットに格納するよう設定します。だれが何時何をしたのか？確認可能にすることで、後の監査対策となります。今回の手法はAWSのベストプラクティスの一つなので覚えておきましょう（資格の試験で良く出ます） 今回の構成 CloudFrontのLogging機能 前提条件 実装手順 Log格納用のs3 bucketを生成/Policy設定 権限設定 ログ削除時にSNSトピックにより通知させる Loggingの有効化 ログ記録を確認 Cloud Trail aws configで改ざんを防止 料金 参考 関連記事 その他 今回の構成CloudFrontのLogging機能 ClouFrontの設定からLoggingを有効化するだけで、上記の図のように、S3にアクセスログファイルを自動で格納するように設定可能です。CloudFrontを用いるのであれば、基本的に使う機能として覚えてください。 前提条件 CloudFrontコントリビューションを生成済み 未実施であれば、以下の記事をご参照ください s3 ssl化 https化(CloudFront/ACM/Route53) [AWS WAF] CloudFrontへアクセス可能なソースIPを社内イントラに制限 AWS CloudFront~S3のアクセス制御まとめ/署名付きURL [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 実装手順Log格納用のs3 bucketを生成/Policy設定 aws console/s3 バケットを作成する 任意の名称を付ける 権限設定 LogをためるにはCloudFrontからのアクセス許可が必要 必要な権限 s3:GetBucketAcl s3:PutBucketAcl s3/任意のbucket/アクセス権限タブ/アクセスコントロール S3 ログ配信グループを選択 オブジェクトへのアクセス 以下をチェック オブジェクトの一覧 オブジェクトの書き込み 保存 ロックパブリックアクセスを無効化 バケット用のs3 ACLでFULL_CONTROLを付与する必要もあります。 1234567891011121314{ &quot;Version&quot;: &quot;2012-10-17&quot;, &quot;Statement&quot;: [ { &quot;Sid&quot;: &quot;MakeLogs&quot;, &quot;Effect&quot;: &quot;Allow&quot;, &quot;Principal&quot;: { &quot;AWS&quot;: &quot;arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity E2TINTLAJ7TK2U&quot; }, &quot;Action&quot;: &quot;*&quot;, &quot;Resource&quot;: &quot;arn:aws:s3:::reacq-bucket-for-logs/*&quot; } ]} その他のS3 Bucketのプロパティ オブジェクトレベルのログ記録 追加料金がかかっても良ければ、CroudTrailデータイベント機能を使用して記録可能 ログ削除時にSNSトピックにより通知させるS3 bucket内のログの削除イベントを元に、Amazon SNSトピックを利用して危険通知を自動で出せるように設定します SNSトピックを作成する SNSトピックを利用することで設定した宛先に通知を送ることができます 手順 AWS Console/Amazon Simple Notification Service トピックの作成 トピック名 DeleteAlert 次のステップ 表示名 Log-Delete-Alert 他の設定はスルーでOK ※AWSを利用する際の原則として、タグにOwnerとPJ名程度は付けておきましょう トピックの作成 トピックができたらARNを控えます ARNはAWSのリソースを一意にに藩閥するための番号 他のサービスと連携する時に必要になります 生成したトピックを選択 ”サブスクリプションの作成” プロトコル 今回はEメールを選択 例えばSMSで電話番号を設定するば、よくあるWEBサービスのSMS通知を簡単に実現できます エンドポイント 今回はTeamsの開発チームのチャンネルに流したいので、そのメールアドレスを設定（Teamsはチャンネル毎にメールアドレスを取得できます） サブスクリプションの作成を押下 以上でこのSNSトピックが呼び出された際に、サブスクリプションで規定した連絡先に通知がと届くようになります S3側でイベントを規定 S3 Bucket/プロパティタブ イベント ログの削除を検知できるようにイベントを作成します 名前 DeleteLog イベント 全てのオブジェクトの削除イベント プレフィックス/サフィックスはスルーでOK 送信先 SNSトピック SNSトピックのARN 事前に作成しておいたSNSトピックのARNをコピペ Loggingの有効化 aws console/CloudFront 任意のディストリビューションを選択して、GeneralタブのEditを押下 Edit Distribution Loggingをonに変更 Bucket for Logs 事前に作成したbucketを選択 Yes, Edit ログ記録を確認 S3バケットを確認するとログの記録が開始されたことを確認できます Cloud Trailaws configで改ざんを防止S3にせっかくログを貯めても、削除されてしまっては無意味であるため、改ざん防止策が必須となります。 改ざん対策 aws configでログの格納先であるs3 bucketをトラッキング ログデータの削除/編集を検知 料金 アクセスログの料金 つまりS3の料金対策だけでOK1アクセスログの作成は、CloudFront のオプション機能です。アクセスログの作成を有効にしても追加料金はかかりません。ただし、Amazon S3 でのファイルの保存とアクセスについて通常の Amazon S3 料金が発生します (ファイルの削除はいつでもできます)。 対策例 ログを非常事態以外は見ない場合 Glacier等の廉価版を利用 直近のログは素早く確認したい場合 S3のライフサイクルポリシーを利用して、一定期間の経過後にGlacierに移行させる 参考関連記事 [AWS WAF] CloudFrontへアクセス可能なソースIPを社内イントラに制限 AWS CloudFront~S3のアクセス制御まとめ/署名付きURL s3 ssl化 https化(CloudFront/ACM/Route53) [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 その他 CloudFront開発者ガイド/アクセスログの設定および使用 CloudFrontのアクセスログ設定方法 CloudFront開発者ガイド/Amazon CloudFront のログ記録とモニタリング CloudFront開発者ガイド/Amazon CloudWatch による CloudFront のモニタリング CloudFront開発者ガイド/AWS CloudTrail を使用して CloudFront API に送信されたリクエストをキャプチャする","link":"/CloudFront%E3%81%AE%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%AD%E3%82%B0%E3%82%92Logging%E3%81%A7%E5%8F%8E%E9%9B%86%EF%BD%9Eaws-config%E3%81%A7%E6%94%B9%E3%81%96%E3%82%93%E9%98%B2%E6%AD%A2/"},{"title":"Cloud9 x Angular x FirebaseでAP開発（導入編）","text":"こんにちは。今回は上記の３つを組み合わせてWEB AP開発を行う際の手順を解説します。それぞれの使用経験があっても細かい所で沢山ハマったのでまとめておきました。初級者がこの記事だけで目標を達成できるように書いたつもりです。 各技術についての基礎知識簡単にポイントだけを解説します。分かっている方は飛ばしてください手順を細かく書いているので分からない言葉があっても、一先ず触りなから理解していきましょう cloud9 AWSのブラウザ型IDE 自端末のOSに依存せず開発可能 iPadでも開発可能（よく使ってます） 社内プロキシ問題に悩まされない 個人的には最重要ポイント 環境構築を省略可能 node_module, Git, AWS CLI等の便利なものが元から入っている 複数ユーザーで同時編集可能 リモートワークやレビューに便利です 対抗のGoogle Cloud Shellとの差分 後に同様の機能が付きそうではあります Angular Googleが出しているWEB APのフレームワーク 言語はHTML, TypeScript, scss SPA (Single Page Application)を開発可能 APの画面はAngular Materialでほぼ自動構築可能 静的WEBサイトホスティングサービスを用いれば、サーバレスを実現可能 代表例としてFirebase HostingやAmazon S3等が挙げられます Firebase GoogleのBaaS(Backend as a Service) 認証機能やデータベースなどのバックエンドの機能を提供してくれるサービス 開発工数を大幅削減可能 本質的な機能の開発に集中可能 APのHostingや顧客分析、収益管理まで可能 この３つを抑えれば開発環境の用意からAPの公開まで高速でできます。つまり、良いアイデアさえあれば、一人でもビジネスを始められます。 前提条件 cloud9環境を作成済み 指示に従って設定していくだけなので参考サイトを載せておきます 初めてのAWS Cloud9導入 Googleアカウントを作成済み Googelアカウントの作成 手順1. Angular開発環境の準備 Angularが動くために必要なもの node_module Angular CLI cloud9には初めからnode_moduleが入っている為、Angular CLIを入れるだけでOKです。（Windowsにnode_moduleを入れようとすると、それだけでだいぶ工数をロスします） 1.1. Angular CLIのinstall 1npm install -g @angular cli 確認 以下のようにngコマンドを使えるようになればOKです ngはangularの略です1234567891011121314ng --version _ _ ____ _ ___ / \\ _ __ __ _ _ _| | __ _ _ __ / ___| | |_ _| / △ \\ | '_ \\ / _` | | | | |/ _` | '__| | | | | | | / ___ \\| | | | (_| | |_| | | (_| | | | |___| |___ | | /_/ \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_| \\____|_____|___| |___/ Angular CLI: 8.3.20Node: 10.16.2OS: linux x64Angular: 8.2.14 ０から開発する場合 以下のコマンドでAngular PJ(AngularにおけるAPの単位)を作成しましょう1ng new &lt;AP名&gt; 今回は以下の名称で作成1$ ng new &quot;firebase-sample&quot; Gitから開発途中のソースを持ってきた場合 APのディレクトリ直下にもnode_moduleを入れなければ動かないので注意です1npm install 2. firebase projectの作成 初めは基本的にWEBのFirebaseコンソールで操作していきます Googleアカウントを作成していればすぐに始められます 2.1. 公式ページから右上の”コンソールへ移動”を押下 2.2. projectを追加（APの単位です） 2.3. Project名を設定 2.4. Googleアナリティクス(Firebaseプロジェクト向け) 特別な理由が無ければ有効のままでOK 2.6. 以下が表示されたら完成 続行を押すとPJの画面に飛びます 2.7. Firebase Project画面 以下が表示されればOK 基本的にこの画面で設定を行います 3. アプリの登録 次にFirebase Projectにアプリを登録します Firebase PJには複数のアプリを登録可能です 例えばWEB版、ios版といった形で複数をAP間で認証機能やデータベースを共有するイメージです 3.1. アプリを登録 ios/android/webからwebのアイコンを選択 3.2. アプリの追加 以下のように入力 アプリを登録 3.3. Firebase SDK の追加 以下のようにスクリプトが表示されます Angularの場合はindex.htmlのbody配下に置きます SPAなので、単一ページであるindex.htmlがJSで書き換わっていくのがAngularの特徴です1234567891011121314 &lt;body&gt; &lt;app-root&gt;&lt;/app-root&gt;&lt;!----firebaseSDKの追加--&gt; &lt;!-- The core Firebase JS SDK is always required and must be listed first --&gt; &lt;script src=&quot;/__/firebase/7.8.2/firebase-app.js&quot;&gt;&lt;/script&gt; &lt;!-- TODO: Add SDKs for Firebase products that you want to use https://firebase.google.com/docs/web/setup#available-libraries --&gt; &lt;script src=&quot;/__/firebase/7.8.2/firebase-analytics.js&quot;&gt;&lt;/script&gt; &lt;!-- Initialize Firebase --&gt; &lt;script src=&quot;/__/firebase/init.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 4. firebaseとAPの関連付け(Angular Fireの導入) Angular APとfirebaseを関連付けるまでに必要な作業の一覧は以下になります Firebase CLIのinstall 環境単位で必要な作業 angularfireのinstall AP単位で毎回必要な作業 (firebase側でアプリを追加 2で先に行った内容です) Firebase SDKの追加 FirebaseのAPIキーを取得 Angularの環境設定ファイルにAPIキーを設定 ★二点に設定が必要。よくはまるポイントです 開発環境 src/environments/environment.ts 本番環境(prodは本番という意味) src/environments/environment.prod.ts firebase login/init 環境設定ファイルをapp.module.tsに読み込む @angular/fireからAngularFireModuleを呼び出して、上記のenvironmentオブジェクトを使ってAPIキーをインストール （特定の機能を利用する場合の作業：認証機能を利用する際の例） @angular/fire/authからAngularFireModuleを呼び出して、NgModuleに登録 Firebase Authenticationを利用するために必要な工程 @angular/fireは全機能をinstallすると重くなる為、上記の様に必要なものだけを登録する仕様になっているらしい それぞれ詳しく解説していきます 4.1. Firebase CLIの導入 Firebase CLI 環境に一度入れればOKです 以下を実行することでinstallできます これでfirebase コマンドが有効になります1npm install -g firebase-tools 4.2. angular fireのinstall angularfireを入れます AngularとFirebaseの連携用Libraryです こちらは環境単位ではなくAP単位で入れる必要があります 以下を実行 ※最新版であればng addでもOK1firebase-sample (master) $ npm install @angular/fire firebase --save 出力結果1234+ @angular/fire@5.4.2+ firebase@7.9.3added 140 packages from 98 contributors and audited 19218 packages in 17.919sfound 5 vulnerabilities (3 moderate, 2 high) 4.3. Angular環境設定ファイルにAPIキーを貼り付け 開発環境向けと本番環境向けの２つの設定ファイルの改修が必要。よくはまるポイントです 各値はfirebase consoleより確認 src/environments/environment.ts 開発環境用の設定ファイルに以下の形式で設定します12345678910111213export const environment = { production: false, // Firebaseの設定情報を登録 firebase: { apiKey: '&lt;your-key&gt;', authDomain: '&lt;your-project-authdomain&gt;', databaseURL: '&lt;your-database-URL&gt;', projectId: '&lt;your-project-id&gt;', storageBucket: '&lt;your-storage-bucket&gt;', messagingSenderId: '&lt;your-messaging-sender-id&gt;' } };}; src/environments/environment.prod.ts 本番環境用の設定ファイルも同様です12345678910111213export const environment = { production: false, // Firebaseの設定情報を登録 firebase: { apiKey: '&lt;your-key&gt;', authDomain: '&lt;your-project-authdomain&gt;', databaseURL: '&lt;your-database-URL&gt;', projectId: '&lt;your-project-id&gt;', storageBucket: '&lt;your-storage-bucket&gt;', messagingSenderId: '&lt;your-messaging-sender-id&gt;' } };}; Firebaseの設定情報を確認 FirebaseコンソールのSettingsから確認可能 上記のIDとAPIキーをenvironmentsの該当箇所にコピペ 設定より、IDとAPIキー、送信者IDを確認する - 各設定項目は以下のように一意に定まる 1234567891011export const environment = { production: false, firebase: { apiKey: '&lt;ウェブAPIキー&gt;', authDomain: &quot;&lt;プロジェクトID&gt;.firebaseapp.com&quot;, databaseURL: &quot;https://&lt;プロジェクトID&gt;.firebaseio.com&quot;, projectId: &quot;&lt;プロジェクトID&gt;&quot;, storageBucket: &quot;&lt;プロジェクトID&gt;.appspot.com&quot;, messagingSenderId: &quot;&lt;送信者ID&gt;&quot;, } }; 送信者IDはクラウドメッセージングTabより確認可能 両方のファイルに以下を設定 123456789101112export const environment = { production: false, // ,を忘れないよう注意 // Firebaseの設定情報を登録 firebase: { apiKey: 'XXXXXXXXXXXXXXXXXXXXXXXXXXX', authDomain: 'fir-sample-3a2dc.firebaseapp.com', databaseURL: 'https://fir-sample-3a2dc.firebaseio.com', projectId: 'fir-sample-3a2dc', storageBucket: 'fir-sample-3a2dc.appspot.com', messagingSenderId: '408620068768' } }; 4.4. CLIとFirebaseの関連付け(firebase login) 次に開発環境(Cloud9)のCLIとfirebaseを関連付けます c9の場合–nolocalhostが必須 ★社内Local環境でloginをやろうとするとFirebase認証がProxyに阻まれて突破できず詰むので気を付けましょう 頑張っても解決できませんでした… 123456789firebase login --no-localhost --reauthi Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google's privacy policy (https://policies.google.com/privacy) and is not used to identify you.? Allow Firebase to collect CLI usage and error reporting information? Yesi To change your data collection preference at any time, run `firebase logout` and log in again.Visit this URL on any device to log in:&lt;認証用のURL&gt; 上記のURLから、ブラウザでGoogleアカウント認証を進めるとコードが表示されます 貼り付けてSuccessと表示されれば成功です123? Paste authorization code here: &lt;Code&gt;✔ Success! Logged in as &lt;googleアカウント名&gt; Cloud9のCLIからFirebase(=Google Cloud)上のリソースにアクセス可能になりました 4.5. APとfirebaseのPJの関連付け(firebase init) Angular PJ直下で実行 1firebase init 以下のように出力されれば成功です 使いたいサービスを選択すると簡単にCloud側と連携できます スペースキーで各サービスを選択できます12345678910111213141516171819 ######## #### ######## ######## ######## ### ###### ######## ## ## ## ## ## ## ## ## ## ## ## ###### ## ######## ###### ######## ######### ###### ###### ## ## ## ## ## ## ## ## ## ## ## ## #### ## ## ######## ######## ## ## ###### ########You're about to initialize a Firebase project in this directory: /home/ec2-user/environment/firebase-sample? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices. (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)❯◯ Database: Deploy Firebase Realtime Database Rules ◯ Firestore: Deploy rules and create indexes for Firestore ◯ Functions: Configure and deploy Cloud Functions ◯ Hosting: Configure and deploy Firebase Hosting sites ◯ Storage: Deploy Cloud Storage security rules ◯ Emulators: Set up local emulators for Firebase features Project Setup Enterを押すと以下が出力されます 今回は事前にプロジェクトを作成しているので”use an exciting project”を選択 1234567891011=== Project SetupFirst, let's associate this project directory with a Firebase project.You can create multiple project aliases by running firebase use --add, but for now we'll just set up a default project.? Please select an option: ❯ Use an existing project Create a new project Add Firebase to an existing Google Cloud Platform project Don't set up a default project 自身のアカウントで作成済みのFirebase Projectが選択肢としてでてきます 事前に作った”fir-sample-3a2dc (firebase-sample)”を選択12? Select a default Firebase project for this directory: (Use arrow keys)❯ fir-sample-3a2dc (firebase-sample) 以降は、先ほど選択したサービスのSetupが順に出てきます。いくつか例として書いておきます Hosting Setup 公開したいディレクトリを尋ねられます Angularであればビルドしたい際の生成物が格納されるを入力しましょう dits/angular-pj-name Hostingについての詳細は以下にまとめています Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) Database Setup ひとまずデフォルトでEnter123456=== Database SetupFirebase Realtime Database Rules allow you to define how your data should bestructured and when your data can be read from and written to.? What file should be used for Database Rules? (database.rules.json) Firestore Set up リソース(firestore)のlocationを設定していないとErrorが出ます firebaseコンソール側で設定する必要があります123=== Firestore SetupError: Cloud resource location is not set for this project but the operation you are attempting to perform in Cloud Firestore requires it. Please see this documentation for more details: https://firebase.google.com/docs/projects/locations 以上で一先ずセットアップは完了です 次にのStepとしてFirebase HostingでAPを公開してみましょう（5分できます） Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) 実際にAuthentication(認証機能)やFirestore(ストレージ)を利用する手順は別記事に記載します 後書きここまでで本格的な実装に入る準備が整いました。Firebaseを使いこなせば、認証機能もデータのCRUD機能も1日で簡単に実装することができます。モダンな手法を使いこなして素早くサービスを開発していきましょう。 最後に、この先の機能実装の際に参考になりそうなページをまとめておきます。 APをFirebase Hostingで公開 Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) CRUD機能を実装 AngularFireでFirestoreのCRUD処理を実装する【Angular + Firebase】 認証機能を実装 Angular8でFirebaseを使ってGoogleアカウント認証機能を実装する おまけ：cloud9でng serveする際の注意 詳細は以下の記事にまとめてあります [Cloud9 x Angular] cloud9でng serveを実行してAPの画面を確認するまで cloud9で必要なこと portの指定(8080) browserのURLの指定 disableHostCheck angular.jsonファイルを書き換えてポートを変更 cloud9の場合はportを8080にする必要がある123456&quot;serve&quot;: { &quot;builder&quot;: &quot;@angular-devkit/build-angular:dev-server&quot;, &quot;options&quot;: { &quot;browserTarget&quot;: &quot;NgTororo:build&quot;, &quot;port&quot;: 8080 //ここを追加 } portの設定後であれば以下でOK1ng serve --disableHostCheck --public-host &lt;cloud9のPreviewのURL&gt;","link":"/Cloud9-x-Angular-x-Firebase%E3%81%A7AP%E9%96%8B%E7%99%BA%EF%BC%88%E5%B0%8E%E5%85%A5%E7%B7%A8%EF%BC%89/"},{"title":"[C言語入門] コンパイル〜文字列の出力まで","text":"これからC言語を学び始めたい方向け C言語のコンパイラを入れて、”Hello World”を表示する簡単なプログラムを作るまで 環境構築: コンパイラ(gcc)のインストール C言語はコンパイラのインストールのみでOK Cent OSの場合1$ yum install gcc macOSの場合 初めからgccコマンドが利用できました 実装 HelloWorldを表示させるまで Cプログラムのコンパイル C言語で書いたプログラムをコンピュータが理解できる言語に変換することで実行可能になる この変換をコンパイルという gcc( GNU Compiler Collection（gcc) フリーのコンパイラ 主なオプション -g (コンパイル，リンク時) コンパイル，リンク時にDEBUG情報を付加する．dbx,gdbなどのデバッガ を使用するときに必要． -c (コンパイル時) コンパイルのみ行う(オブジェクトファイルを生成する)ex: gcc -c test.c → test.oを生成 -o test.o (コンパイル時)(または-o test(リンク時) コンパイルして，その結果をtest.oとする．または，リンクしてその 結果をtestとする．省略時は，-cがついていればtest.o (オブジェクトファイル)，-cがついていなければa.out(実行ファイル)． ex: gcc -c test.c -o test2.o →test2.oという オブジェクトファイルを生成 文字列の出力 C言語における文字列の出力方法 printf 書式1printf(“書式文字列”, 変数1, 変数2, ・・・) 変数から文字列 x 3を表示1printf(&quot;%s%s%s&quot;, str1, str2, str3); 改行コード \\n printf関数を用いるには&lt;stdio.h&gt;っというヘッダファイルを取り込む必要がある Cプログラムの頭につける”#include &lt;studio.h&gt;”について #include &lt;studio.h&gt; #include &lt;stdio.h&gt;はおまじないじゃないぞ。 &lt;stdio.h&gt;というヘッダーファイル 標準Cライブラリと呼ばれる”ライブラリ” 汎用性の高い複数のプログラムを再利用可能な形でひとまとまりにしたもの 簡単にいうと説明書をたくさん保管してある図書館 説明引用12基本的に、関数はプログラム内で定義しないと使えません。もちろん、printf()だって関数ですから、本来であればプログラム中で定義しないと使えないわけですが、頻繁に使う関数は前もって定義してまとめておいていつでも引っ張ってこれるようにした方が効率がいいわけです。それを実現したのが”ライブラリ”と呼ばれるファイルです。 C言語における関数の作り方 関数名の前には戻り値の型を指定 返す値がなければ型の指定の代わりに「void」句を記述。 戻り値ありの場合 1234型名 関数名(型名 引数1, 型名 引数2, ・・・) { 処理 return オブジェクト} 戻り値なしの場合 123void 関数名(型名 引数1, 型名 引数2, ・・・) { 処理} 引数には変数やポインタ、構造体の実体のように処理で使用するオブジェクトの型と引数名を記述 プログラムを開発 ファイルを生成 1touch sample.c sample.cを編集 今回は返す戻り値が無いのでvoid型1234#include&lt;stdio.h&gt;void main() { printf(&quot;Hello World\\n&quot;);} コンパイル gccコマンドを実行 1gcc -o sample sample.c 指定した名称のファイルが生成された12 lssample.c sample 実行 12# ./sampleHello World 参考 LinuxでC言語 - コンパイラ（gcc）のインストール コンパイラ(gccコマンド)の使い方 #include &lt;stdio.h&gt;はおまじないじゃないぞ。","link":"/C%E8%A8%80%E8%AA%9E%E5%85%A5%E9%96%80-%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%80%9C%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E5%87%BA%E5%8A%9B%E3%81%BE%E3%81%A7/"},{"title":"CloudWatchまとめ モニタリング～異常検知/通知の自動化(SNS連携)/コスト管理","text":"AWSの一般的なサーバレス構成における、以下の手法を解説します 運用状況をCloudWatch Dashboardで可視化 CloudWatch Alarm メトリクスの異常値を自動検知 Amazon SNS連携による自動通知 コスト超過でSNS通知 必要な情報をCloudWatchに集める Dashboardを作成 各サービスのコンソールから設定する場合 その他 アラームを設定 コスト追跡 おまけ：CloudWatch Logs ログの取得まで S3にログをエキスポート Export設定 参考 関連記事 その他 必要な情報をCloudWatchに集める 今回のターゲット ユーザがコンテンツを利用する際に接する、以下のリソースの利用状況 CloudFront WAF Dashboardを作成 Console/CloudWatch/Dashboard ダッシュボードの作成 名称を設定(今回PJ名) ウィジェットの作成 タイプを選択 CloudFront 欲しい項目を選択 ウィジェットの作成 次にWAFのエラー＝ソースIP外から試みたアクセスを可視化する ウィジェットの追加 タイプを選択 AWS/WAFV2/Rule, WebAClから必要な項目を選択 ウィジェットの作成 以下のようにウィジェットが表示される 分かり辛いので名称を変更 ダッシュボードの保存 各サービスのコンソールから設定する場合 例：CloudFrontのメトリクスをダッシュボードに追加 aws console/CloudFront 左のメニューバー/Monitoringを選択 作成済みのディストリビューションのラジオボタンを選択 View distribution metricsを押下 ダッシュボードに追加を押下 その他アラームを設定 WAFで弾かれるリクエストが異常発生した際にSNSで通知が来るように設定 アラーム/アラームの作成 メトリクスの選択 AWS/WAFV2/Rule, WebACL BlockedRequestを選択 メトリクスと条件の指定 5分間に50以上弾かれていれば攻撃を受けている可能性があるのでアラートを出す 次へ アクションの設定 新しいトピックの作成 通知を受け取るEメールエンドポイントに、開発チームのTeamsチャンネルのメールアドレスを指定 トピックの追加を押下 この時点でテストメールが発信されます ”Confirm Subscription”と書かれたリンクを押すと有効化される 次へ 名前と説明を追加 次へ 問題なければアラームの作成 設定したいアラーム毎に以上の作業を行えばOK コスト追跡 CloudWatchの請求アラーム これはアカウント全体に対する請求のアラームであり、PJ毎にコスト監視することはできない PJ毎にTagでフィルタリングして監視するにBudgetsで監視する おまけ：CloudWatch Logs CloudWatch Logs EC2等からエージェント経由でログを集めるサービスなので今回は不要だが、ログをExportする手法を以下にメモとして残しておきます 有料にはなるが、CloudTrailの証跡へのアクセスをLogsで取り込んで、改竄発生時にアラートを出すことも可能 ログの取得まで CloudWatch Logs エージェントをEC2にインストール ロググループを作成~サブスクライブ設定 S3にログをエキスポート 事前にログ格納用のS3バケットを作成 Export設定 任意のロググループ/アクション/データをAmazon S3にエクスポート データを Amazon S3 にエクスポート 開始と終了を選択 S3バケットを選択 事前に作成が必須 エクスポート 参考関連記事 [AWS WAF] CloudFrontへアクセス可能なソースIPを社内イントラに制限 AWS CloudFront~S3のアクセス制御まとめ/署名付きURL s3 ssl化 https化(CloudFront/ACM/Route53) [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 その他 CloudFront開発者ガイド/Amazon CloudWatch による CloudFront のモニタリング Amazon S3 へのログデータのエクスポート","link":"/CloudWatch%E3%81%AB%E3%82%88%E3%82%8B%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%EF%BD%9E%E7%95%B0%E5%B8%B8%E6%A4%9C%E7%9F%A5-%E9%80%9A%E7%9F%A5%E3%81%AE%E8%87%AA%E5%8B%95%E5%8C%96/"},{"title":"Github x Teams Webhook/Notificationによる連携方法","text":"TeamsとGithubの連携方法について解説します。GitにpushやPull Requestdを出す度にメンバにメッセージを送る手間を自動化しましょう。Slackとの連携方法は沢山出てくるのですが、Teamsは古いものしか無かったので纏めておきます。 1. TeamsとGithubの連携方法 1.1. Webhooks 1.2. Notification 1.3. どちらを使うべきか？ 2. WebhookでTeams x Githubを連携 2.1. Teamsにコネクタを追加 2.2. GithubのWebhook設定 3. NotificationでTeams x Githubを連携 3.1. メールアドレスを取得 3.2. GitのNotificationに設定 4. その他 Microsoft FlowやAutomationによる自動化 参考 関連記事 その他 1. TeamsとGithubの連携方法 2種類あります 1.1. Webhooks Githubの機能 任意のEventを起点に発火 ex.) masterへのpush, PullRequest… 特定のURLに対して通知を飛ばす Teamsの特定チャンネルのコネクタ宛 Teams側ではコネクタでリクエストを受け取る ex.) Incoming Webhook or Githubアプリ 1.2. Notification Githubの機能 Eventを起点に発火 自分でEventを絞ることはできない 特定のメールアドレスに対して通知を飛ばす Teamsの特定チャンネルのメールアドレス宛 Teamsのチャンネルにはそれぞれ一意なメールアドレスが与えられている 1.3. どちらを使うべきか？ 社内セキュリティや機能制限でWebhookを使えない or メーリングリスト等にも通知を飛ばしたい Notification 特に制限無し Webhook 2. WebhookでTeams x Githubを連携 Gituhubアプリは社内の機能制限で入れられなかったのでIncoming Webhookを利用します TeamsのGithubアプリ Teams App Storeかここで入手可能 2.1. Teamsにコネクタを追加 チャンネル名の右にある・・・からコネクタを選択 Incoming Webhookの構成を選択 接続名 Github等判別可能な名前を指定 イメージを設定 Botがメッセージを投稿する際のアイコンになる 作成を押下 出てきたURLを控えて完了 チャンネルにメッセージが投稿される 2.2. GithubのWebhook設定 設定画面 任意のリポジトリのページに移動 Settings Hooks Add webhook Payload URL 送信先のURLを指定 控えておいたTeamsのコネクタのURLをコピペ Secret パスワードが必要であれば設定 Which events would you like to trigger this webhook? 通知を飛ばすイベントを絞りたい場合は ”Let me select individual events”を選択 出てきた選択肢から必要なものをチェック 設定が完了したらAdd webhook 以上でpush時にTeamsに通知が投稿されるようになります 3. NotificationでTeams x Githubを連携3.1. メールアドレスを取得 チャンネル名の右にある・・・から”メールアドレスを取得”を選択 出てきたアドレスをコピー &lt;&gt;で囲まれている箇所がメールアドレス 通常のメールからここに対してメールを送ればTeamsに内容が投稿される 3.2. GitのNotificationに設定 任意のリポジトリのSettings/Notificationsへ移動 Addressに先ほど控えたTeamsチャンネルのURLをコピペ 以下のようになれば設定完了 試しにpushをすると、Teamsに投稿されます 4. その他Microsoft FlowやAutomationによる自動化 通知が来たタイミングでワークフローを実行させることもできるようです Slackのワークフロー機能のようなもの 社内の機能制限により試せなかったので、変えさせられたら追記します 参考関連記事 Github入門 ～入社初日の完全な素人でも分かる優しい説明～ [CI/CD入門] Github Actionsでビルド/テスト/デプロイを自動化 Github x Teams Webhook/Notificationによる連携方法 Github Pages x Hexo運用をGithub Actionsで自動化 git複数アカウントの使い分け設定 [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github.comからGithubEnterpriseへの移行手順 その他 GitHubの組織へのメンバー変更をMicrosoft Teamsに通知する（by Microsoft Flow）","link":"/Github-x-Teams-Webhook-Notification%E3%81%AB%E3%82%88%E3%82%8B%E9%80%A3%E6%90%BA%E6%96%B9%E6%B3%95/"},{"title":"Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理)","text":"こんにちは。今回はFirebase Hostingについての解説です。AngularとFirebaseの連携手法については以前に詳しくまとめた記事をご覧ください Cloud9 x Angular x FirebaseでAP開発（導入編） 基礎知識 AP公開までの手順 本記事の前提 事前の設定作業：Firebase PJの初期化 APをFirebase Hostingへ公開 APをビルドして再度deploy 以降の開発の流れ Firebase Console解説(Hosting関連) Hosting ダッシュボード 使用状況 使用料と請求額 まとめ おまけ: firebase.jsonの中身 基礎知識 Firebase Hostingとは Googleが提供しているBaaSであるFirebaseのサービス群の一つ Hostingサービス 開発したアプリケーションをを保持してWEBに公開してくれます 同様の機能を持つ競合サービス Amazon S3 バックエンドにAWSを用いるのであれば基本的にこちら Github Pages 本サイトはこれを使ってホスティングしています 利用方法は以下に詳しくまとめています [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 設定後はdeployコマンド一撃でサービスを公開可能です 1firebase deploy AP公開までの手順本記事の前提 以下の作業が完了済み Angular PJの生成 1ng new &quot;ap-name&quot; Firebase PJの作成 Firebase Consoleでする作業 Firebase CLIの導入 1npm install -g firebase-tools 開発環境からのFirebase Login 1firebase login ここまでの作業の詳細は以前の記事をご確認ください Cloud9 x Angular x FirebaseでAP開発（導入編） 事前の設定作業：Firebase PJの初期化 以下のコマンドでFirebase PJを初期化可能です 1firebase init 利用するリソースを選択 上記を実行すると以下のように選択欄が表示されます 今回はHostingだけを選択(スペース) ⇒ Enter1234567? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices. ◯ Database: Deploy Firebase Realtime Database Rules ◯ Firestore: Deploy rules and create indexes for Firestore ◯ Functions: Configure and deploy Cloud Functions❯◉ Hosting: Configure and deploy Firebase Hosting sites ◯ Storage: Deploy Cloud Storage security rules ◯ Emulators: Set up local emulators for Firebase features Hosting Setup deployコマンドの実行時に公開したいディレクトリを尋ねられます publicのまま変更無し ⇒ Enter 変更 ディレクトリのパスを入力 ⇒ Enter Angularの場合の設定 publicディレクトリを指定 dist/angular-ap-name Angularでビルドを実行した際に、生成されたファイルが格納されるディレクトリのことです ここをちゃんと設定しないと後にハマるので気を付けましょう single-page appとして設定 y AngularはSingle Page Applicationであるためyes 出力 123456✔ Wrote dist/firebase-sample/index.htmli Writing configuration info to firebase.json...i Writing project information to .firebaserc...✔ Firebase initialization complete! firebase.jsonというファイルが生成されていれば成功です APをFirebase Hostingへ公開 deployコマンド Firebase PJのデフォルトの Hosting サイトにデプロイされます1firebase deploy deployを実行 1firebase-sample (master) $ firebase deploy 出力 123456789101112131415=== Deploying to 'fir-sample-3a2dc'...i deploying hostingi hosting[fir-sample-3a2dc]: beginning deploy...i hosting[fir-sample-3a2dc]: found 10 files in dist/firebase-sample✔ hosting[fir-sample-3a2dc]: file upload completei hosting[fir-sample-3a2dc]: finalizing version...✔ hosting[fir-sample-3a2dc]: version finalizedi hosting[fir-sample-3a2dc]: releasing new version...✔ hosting[fir-sample-3a2dc]: release complete✔ Deploy complete!Project Console: https://console.firebase.google.com/project/fir-sample-3a2dc/overviewHosting URL: https://fir-sample-3a2dc.firebaseapp.com Deploy completeと出れば成功です デフォルトのホスティングサイトのURLは以下のように規定されます projectID.web.app projectID.firebaseapp.com 今回のHosting URLにアクセスしてみます 1Hosting URL: https://fir-sample-3a2dc.firebaseapp.com 空のままデプロイした場合のデフォルト画面 まだAPをビルドしていなければこのように表示されます dist/angular-ap-nameの中が空であるため 実際にAPをビルドしてからdeployして変化を確認しましょう APをビルドして再度deploy Angular PJをビルド dist/my-project-nameディレクトリが生成されます1$ ng build --prod 出力 123456789101112firebase-sample (master) $ ng build --prodGenerating ES5 bundles for differential loading...ES5 bundle generation complete.chunk {2} polyfills-es2015.5b10b8fd823b6392f1fd.js (polyfills) 36.2 kB [initial] [rendered]chunk {3} polyfills-es5.8e50a9832860f7cf804a.js (polyfills-es5) 127 kB [initial] [rendered]chunk {0} runtime-es2015.c5fa8325f89fc516600b.js (runtime) 1.45 kB [entry] [rendered]chunk {0} runtime-es5.c5fa8325f89fc516600b.js (runtime) 1.45 kB [entry] [rendered]chunk {1} main-es2015.3b7f37fdd4f3fcb1925c.js (main) 245 kB [initial] [rendered]chunk {1} main-es5.3b7f37fdd4f3fcb1925c.js (main) 293 kB [initial] [rendered]chunk {4} styles.09e2c710755c8867a460.css (styles) 0 bytes [initial] [rendered]Date: 2020-04-15T15:05:31.948Z - Hash: e637fe92a3f41b4587c8 - Time: 21540ms Angular PJ直下にdistディレクトリが生成されます 1234firebase-sample (master) $ lsangular.json dist karma.conf.js package-lock.json tsconfig.app.json tslint.jsonbrowserslist e2e node_modules README.md tsconfig.jsondatabase.rules.json firebase.json package.json src tsconfig.spec.json もう一度deploy 1firebase-sample (master) $ firebase deploy 出力 123456789101112131415=== Deploying to 'fir-sample-3a2dc'...i deploying hostingi hosting[fir-sample-3a2dc]: beginning deploy...i hosting[fir-sample-3a2dc]: found 10 files in dist/firebase-sample✔ hosting[fir-sample-3a2dc]: file upload completei hosting[fir-sample-3a2dc]: finalizing version...✔ hosting[fir-sample-3a2dc]: version finalizedi hosting[fir-sample-3a2dc]: releasing new version...✔ hosting[fir-sample-3a2dc]: release complete✔ Deploy complete!Project Console: https://console.firebase.google.com/project/fir-sample-3a2dc/overviewHosting URL: https://fir-sample-3a2dc.firebaseapp.com Hosting URLを確認 アプリの画面が反映されている 今回は特にAPを弄っていないので、ng newで生成したAPの初期画面が表示されています 以降の開発の流れ APを改修 ローカルで確認1ng serve --open APをビルド1ng build --prod 本番環境へデプロイ1firebase deploy Firebase Console解説(Hosting関連)Hosting ダッシュボード 以下のように カスタムドメインの追加 本格的なサービスのリリースに向けてドメインを変えたい場合は、こちらの画面で簡単に登録可能です ドメインの取得 簡単に取得できるサービスを二つ紹介しておきます Google Domain お名前.com 費用優先ならこれ Google Domains利用イメージ 取得したいドメイン名で検索すると、利用可能なドメインと料金が出ます。以下の例では、.comはすでに使われているようです。 使用状況 以下のように時系列で使用状況がビジュアライズされます 使用料と請求額 上限と現在の使用料が分かります 無料のSparkプランでは”10GB/month”が上限になります- 重要なポイント - ビジネスをスモールスタートさせる段階では 容量について 10 GB = 10487560 KB 現在の使用料＝リクエスト×110485760 他のプランと料金を比較する際は以下をご確認ください Firebase 料金プラン プランの変更 まとめ今回の解説は以上になります。 クラウドの最大のメリットはビジネスの規模に応じてPlatformを柔軟にスケールできることです。 サービスの初期段階ではFirease HostingのSparkプランを使って無料でスモールスタートを切り、人気・収益を確保してから有料プランに移行というのが、スタートアップにありがちな手法です。 ここまででその手法を身に着けることができたと思います。良いアイデアを思いついたら是非Hostingを使って広告でもつけて公開してみましょう。淡々と学習するよりも、遥かにモチベーションが向上します。 追記：ng deployやangular-fireを使って、firebaseコマンドを使わずにデプロイする手法もあるようです Angular入門: デプロイ おまけ: firebase.jsonの中身 以下にデプロイの設定が記載されています Angularなら以下のようになっていればOK123456789101112firebase.json{ &quot;hosting&quot;: { &quot;public&quot;: &quot;dist/angular-pj-name&quot;, &quot;rewrites&quot;: [ { &quot;source&quot;: &quot;**&quot;, &quot;destination&quot;: &quot;/index.html&quot; } ] }}","link":"/Firebase-Hosting%E5%AE%8C%E5%85%A8%E7%89%88-Angular%E3%81%A7%E9%96%8B%E7%99%BA%E3%81%97%E3%81%9FSPA%E3%82%92%E7%84%A1%E6%96%99%E3%81%A7%E5%85%AC%E9%96%8B%EF%BD%9E%E3%83%80%E3%83%83%E3%82%B7%E3%83%A5%E3%83%9C%E3%83%BC%E3%83%89%E3%81%A7%E8%B2%BB%E7%94%A8%E7%AE%A1%E7%90%86/"},{"title":"Github Pages x Hexo運用をGithub Actionsで自動化","text":"Github Actionsを用いると、Gitにpushしたタイミングなどで、任意のコマンドを自動で実行させることができます。その機能を活用してGithub Pages x Hexoで生成されたWEBサイトの運用フローを自動化します。 Github Actionsについては以下の記事で詳しく解説しています [CI/CD入門] Github Actionsでビルド/テスト/デプロイを自動化 今回自動化したい手順 前提とするWEBサイトを生成するまでは以下の記事を参照して下さい [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 Hexoサイトの更新フロー 記事を生成1hexo new '記事名' 生成されたmdファイルを編集 hexo generateを実行 mdファイルからWEB公開用のHTML/JSを自動生成 ディレクトリ名を変更 Github Pagesはリポジトリ直下に置かれたファイルを読み込みます。そこでHexoディレクトリを読み込むとエラーが出るため、Hexoディレクトリの頭に_を付与して読み込めない状態にします1mv your-blog _your-blog add/commitしてGitにpush 以下の単純作業は人間がやる必要が無さそうなので自動化を試みます hexo generateの実行 ディレクトリ名の変更 実装手順ディレクトリ名の変更を自動化まずは練習として、ディレクトリ名の変更だけGithub Actionsで実行させます。 Point まずはGitのリポジトリからソースをGithub Actionsの仮想サーバーに持ってくる必要がある Github Actions上でコマンドを実行して編集したソースは、リポジトリにpushで返す必要がある Github PagesのActionsタブを選択 set up a workflow yourselfを押下 エディターが立ち上がります 記載例 uses: actions/checkout@vでリポジトリの中身にアクセス可能になります 次にgitコマンドを使う為にgit configを実行 git mvでHexoディレクトリの名称を変更 git add/commit後にpushでリポジトリに変換12345678910111213141516171819202122232425262728293031# workflow namename: Hexo x Github Pages CI# masterへのpush時に発火する様に定義on: push: branches: [ master ]jobs: # This workflow contains a single job called &quot;build&quot; changeName: # The type of runner that the job will run on runs-on: ubuntu-latest # 1. GitのリポジトリからソースをGithub Actionsに環境に持ってくる # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v2 # 2. git mvでディレクトリ名を変更 ⇒ 変更したソースをGitに返す # Runs a single command using the runners shell - name: change directory name &amp; return for git run: | git config user.name &quot;&lt;git-user-name&gt;&quot; git config user.email &quot;&lt;git-user-e-mail&gt;&quot; git remote set-url origin https://:${{ secrets.GITHUB_PASS }}@github.com/&lt;organization-name&gt;/&lt;your-repository-name&gt; git mv your-blog _your-blog git add * git commit -m &quot;Change directory name!&quot; git push origin master 記載後に”start commit”を押下 workflowを定義したymlファイルが生成されます 一旦ローカルに反映 1git pull 以後masterにpushする度にworkflowが自動で実行されます Actionsタブから確認出来る実行結果にチェックマークがついていれば成功です 今回は分かり易く、Github Actionsタブから編集しましたが、ローカルリポジトリでymlファイルを生成してリモートにpushしてもOK Github Actionsでworkflowを開発する際のデバッグ Actionsタブのjob名から実行結果を確認出来ます ここに出ているのは、Github Actionsで立ち上がった仮想サーバーの中のできごとです GithubをMicrosoftが買収したこともあって、裏はAzureの仮想サーバー(Linux)です 例 Github Actionsの中でgitコマンドを実行させようとしていますが、アカウント名などを設定できていないために失敗しており、git configも実行させないとダメそうだ、と分かります hexo generateを自動化次に、先ほどのテンプレートに、Generateを実行するくだりも追加します。Hexoコマンドを Point Hexoコマンドを実行するためには、先にNode.jsの環境構築が必要 Github Actionsで立ち上がる仮想サーバーは、毎回まっさらな何も入っていないLinuxです 公開アクションの検討 Github actions marketplace hexo こちらの公開アクションも使ってみたのですが、バージョンの問題か失敗しました。今回は簡単なので自前で作ります。 以下のworkflowでhexo generateも自動化できました remote set-url以降で自分のリポジトリを指定する箇所だけ読み替えて利用してください hexo_cicd.yml 1234567891011121314151617181920212223242526272829303132333435363738394041424344# workflow namename: Hexo x Github Pages CI# master push時に発火on: push: branches: [ master ]jobs: # This workflow contains a single job called &quot;build&quot; changeName: # The type of runner that the job will run on runs-on: ubuntu-latest # 1. GitのリポジトリからソースをGithub Actionsに環境に持ってくる # Steps represent a sequence of tasks that will be executed as part of the job steps: # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it - uses: actions/checkout@v2 # 2. 公開アクションでNode.js動作環境を構築 - name: Setup Node.js environment uses: actions/setup-node@v1.4.2 # 3. Hexoディレクトリでhexo gを実行 - name: use hexo run: | cd your-blog npm install npm install -g hexo hexo g cd .. # 4. git mvでディレクトリ名を変更 ⇒ 変更したソースをGitに返す # Runs a single command using the runners - name: change directory name &amp; return for git run: | git config user.name &quot;&lt;git-user-name&gt;&quot; git config user.email &quot;&lt;git-user-e-mail&gt;&quot; git remote set-url origin https://:${{ secrets.GITHUB_PASS }}@github.com/XXXXXXXX/XXXXXXXX.github.io git mv your-blog _your-blog git add * git commit -m &quot;Generate &amp; Change directory name!&quot; git push origin master リポジトリにパスワードを埋め込む私の環境では不要でした。 リポジトリのセキュリティ制約が厳しい場合 Github Actionsの仮想サーバー上からリポジトリと通信するには、gitのパスワードが必要になります。workflowに直接書き込んでしまうと、Public Repositoryなら誰でも見れてしまうので、Settingsに登録して参照させます 参照方法 github actionsのworkflowに以下のように書けば値を引っ張れます1${{ secrets.GITHUB_PASS }} 関連記事 [CI/CD入門] Github Actionsでビルド/テスト/デプロイを自動化 Github入門 ～入社初日の完全な素人でも分かる優しい説明～ Github x Teams Webhook/Notificationによる連携方法 Github Pages x Hexo運用をGithub Actionsで自動化 git複数アカウントの使い分け設定 [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github.comからGithubEnterpriseへの移行手順 参考 【GitHub Actions】CIを使って毎日自動でGitHubに草を生やそうｗｗｗ Github actions marketplace hexo GitHub Actions による GitHub Pages への自動デプロイ","link":"/Github-Pages-x-Hexo%E9%81%8B%E7%94%A8%E3%82%92Github-Actions%E3%81%A7%E8%87%AA%E5%8B%95%E5%8C%96/"},{"title":"Github.comからGithubEnterpriseへの移行手順","text":"概要 リポジトリ移行(Github⇒GHE)の備忘録です 想定する状況 Organizationごと中身をまるまる移行したいパターン Commitログ等は特に移行する必要無く、シンプルな手法で手早く終わらせたい 事前調査 organization単位の以降はできない リポジトリ単位の移行は可能 GHE内に同じ名称のOrganizationやリポジトリを作成可能 ★一意性のチェックがGithub側とは隔絶されている 手順1. GHEでOrganizationを作成 Githubと同様の名称で問題無し URLは前半が企業ごとのものに変わる SiteAdmin権限が必要 GUIで操作 2. GHEでリポジトリを作成 Github.com側と同様の名称で問題無し 空のリポジトリを一通り作成 GUIで操作 3. Local端末で移行対象のリポジトリのデータを退避 各リポジトリの中身をデスクトップ等へコピー Gitリポジトリの管理場所:Dドライブから削除 この後、GHEから同様の名称のリポジトリをCloneするため Dドライブでlsコマンドを打って削除されたことを確認 4. GHEからLocalへClone 各リポジトリ（空）を端末へClone URLはリポジトリのページの”Clone or download”タブより確認1git clone &lt;リポジトリのURL&gt; 5. Cloneした空リポジトリに退避データをコピー GHEからCloneした空リポジトリへ、退避場所からコピー 6. GHEのRemoteにデータを登録 各リポジトリで以下の作業を実施する 変更内容を保存12git add *git commit &quot;Repository Migration&quot; Remoteへ送信1git push Github Pagesが含まれている場合 _config.ymlに設定する公開URLを変更する必要がある GHEにおけるGithub PagesのURLは以下のようになる1https://pages.&lt;gheのURL&gt;/&lt;Organization名 or ユーザ名&gt;/&lt;リポジトリ名&gt;.io 7. GHEで確認 GHEの問題無くデータが移行できていることを確認 Github pagesが含まれていたため、ブラウザで表示されるようにする リポジトリのSettingsより、以下のようにGithub pagesを有効にしてSave GHEにおけるGithub PagesのURLは以下1https://pages.&lt;gheのURL&gt;/&lt;Organization名 or ユーザ名&gt;/&lt;リポジトリ名&gt;.io 8. Github.comより移行元を削除 リポジトリを削除 Organizationを削除 管理者権限が必要","link":"/Github%E3%81%8B%E3%82%89GithubEnterprise%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C%E6%89%8B%E9%A0%86/"},{"title":"Githubの Issue & Project(カンバン)でプロダクトバックログ/タスクを管理する（アジャイル開発の運用）","text":"アジャイル開発におけるバックログ管理をGitで完結させる手法について、説明用のメモ プロダクトバックログとは？ ロードマップと要件に基づいて開発チームが行う作業に優先順位を設定したリスト アジャイル開発においてはタスクや検討事項を”プロダクトバックログ”として定義する(フィーチャーとも呼ぶ) バックログをリスト化 ⇒ 優先度付け ⇒ 順次消化 ⇨ チームのベロシティを計測 ⇨ 次期計画策定 というサイクル(イテレーション/スプリントと呼ぶ)を回す方式が一般的 他のタスク管理ツールも色々試したが、個人的にはこの手法が最も効率が良いと感じた Zennなどを組み合わせてバーンダーンチャート化すると、より状況を可視化しやすい(Velocityを計測しやすい) 前提知識 Issue ここにバックログを登録していく ラベルでカテゴリライズする Ex. Question(質問), Bug(バグ), enhuncement(追加機能), Documentation(ドキュメント整備) Assigne Projects (カンバン) Issueを一覧化するGitの機能 複数リポジトリに分割して開発する場合でも、Projectを使ってissueをまとめることが可能 これらのGitの機能を使って、プロダクトバックログの管理を実施する。他のタスク管理ツールは使用しない。 バックログ管理の大まかな流れ Project（カンバン）を作成する バックログをIssueとして登録 小タスクをチェックボックス形式で設定 生成したIssueはカンバン(Project)のTo Doに自動的に反映される カンバンよりバックログ(Issue)一覧を確認。着手するものを選択 着手を開始したIssueは、カンバン内でIn Progress columnへ移動 完了したタスクにチェックを入れていく Pull Request時にはIssue番号をコメントに入れる そうすることでPRのClose時に自動的にIssueもDoneとなる 全タスクが完了したIssueはDone columnへ移動 1スプリントに幾つのIssueをDoneに持っていけるか？でチームのVelocityを計測する Velocityを元に、次スプリントでどこまでやるか？を決める。アジャイルは適当に進めて良いというのは間違い 可視化ツールとの連携でバーンダーンチャート化するとより状況を可視化しやすい 経験上、企業の開発環境(Github Enterprise)では使えないことが多い 0. Project（カンバン）を作成するバックログ一覧(Issue一覧)を確認する画面だと考えてよいIssueとしてバックログを登録する前に、Project(カンバン)を作成する必要がある後に登録したIssueがこちらのTo doに自動的に表示される github 任意のリポジトリ画面 Projctsタブ Creaate a Project プロジェクト設定画面 PJ名と説明文を入力 Template (今回はAutomated kanban) None: デフォルトのもの Basic kanban To do, In progress, Doneの列を持つ基本的なカンバン式ボー Automated kanban 各列にある課題やプルリクエストを自動的に移動させるためのトリガーが組み込まれている Automated kanban with reviews プルリクレビューのためのトリガーを追加したカンバン Bug triage To do、High priority、Low priority、Closedの各カラムでバグのトリアージと優先順位付けを行うもの Create project 作成されたカンバン 1. Issueでタスクを登録次にIssueでタスクを登録していく。ここで作成するIssueに事前に作成したProjectを紐づけすることで、カンバンから一覧として確認可能になる。 Issueの作成方法 GHE Issueタブ New Issue 右側の各種設定 コメント入力 Submit new issue タスク以外の相談事項もIssueで発行するIssue作成時に記載するコメントのテンプレートや、設定のルールをチーム内で事前に定めておくRead.meやWikiに載せておく Issue作成時の設定ルール以下を一通り設定することでタスク管理の効率化を図れる。後でカンバンからIssueの設定を変更することも可能。 Assignees タスクの担当者を指定する Labels バックログをカテゴライズ可能 元々主なカテゴリのラベルが用意されており、追加も可能 Ex. bug(バグの修正時), documentation(資料作成), enhancement（機能拡充） タスクの重要度や、重さまでラベル化するかはチームで相談して決める Milestones 期限を指定する IssueコメントフォーマットIssueを生成する際に.md形式で説明を書くことができる以下のようなフォーマットをチームで定めておくとよい ルール例 WHY/WHATを必ず書く 根本的な内容の後戻りを防ぐため タスクリスト記法で未完了/完了の変更を行う 以下のように書くと、チェックボックスとして扱うことが可能になる これでバックログに含まれる小タスクを表す1- [ ] Task Issueコメントフォーマット例 バックログ毎にissueを生成する場合の例。より細かい単位でタスク毎にissueを作るチームも多い 各メンバがGitに慣れていれば、タスク単位でIssueを切るとうまくいく1234567891011121314151617181920## 概要### WHYなぜこのIssueが必要になったのか？### WHAT何をするのか？## タスク以下の書式で書くとチェックボックスとして扱える- [ ] Task a- [ ] Task b### 関連課題---関連する課題があればここにリンク形式で載せる（Backlog）### 親課題---親の課題があればここにリンク形式で載せる（Backlog）### 備考---別途記載する必要があれば書く## Reference参考文献があれば記載 こういったフォーマットをテンプレートとしてGitに登録しておくと利便性が高まる 守らないメンバが出て形骸化してしまう事態を防ぐ 少なくともREADMEか、Wiki等のメンバが閲覧可能な場所に置いておく issueテンプレートの登録方法先ほどの様なフォーマットを複数種登録して、issue生成時にユーザに選択させることができる Settingsタブ/Options/Features/issues/setup templateを押下 Add Template Custom templateを選択することでチーム独自のTemplateを登録できる 元々Bug ReportとFeature requestが用意されている 以下のようにTemplateを追加していき、後は”Preview and edit”から用途に応じたフォーマットを用意する 混乱を避けるために一種にするか、用途ごとに分けるかはチームで相談する 元々用意されているFeature requestの中身は以下 これを利用すれば、機能提案を非同期コミュニケーションで行うことが可能になる 開発の中で思いついた機能をミーティングの場を待たずにすぐさま提案でき、開発スピードの向上を見込める custom issue template ここに独自のフォーマットを登録する 設定項目は以下 Template name About tempalteの説明 Template content 上記のプロダクトバックログの登録用のフォーマットをここに入力 Optional additional items Issue default title デフォルトのタイトルを指定可能 Assignees このテンプレートを活用してissueを生成する際の担当者を設定可能 対応者が確定するレベルで細かくテンプレートを用視するのであれば有用 Labels このテンプレートを活用してissueを生成する際のlabelを指定可能 指定しておけばLabelのつけ忘れを回避できる 各Templateの編集後 propose changes Commit changes Project(カンバン)の運用フロー以下の流れで、バックログの進捗状況を可視化する 着手を開始したIssueをIn Progressへ移動 完了したタスクのチェックボックスを埋めていく 全タスクが完了したIssueをDoneへ移動 Pull Request関係のルール Pull Request発行時には、コメントに #Issue番号 と書く GitHubではPull Requestも1つのIssueとして扱われる 対象Issueのコメント欄上部に、タイムライン形式でコミットが表示されるようになる Issue番号をPull Requestのコメントに追加することで、Pull Request（小さなIssue）を束ねたIssue が作成できる。これをうまく利用することで、細かいタスクが各所に散らばる問題を防ぐことが出来る Issue完了時にはPull Requestのコメントに Fix #issue-id と書く Tips: : Pull Requestのマージと同時にIssueを閉じる方法 commitメッセージ、Pull Requestのメッセージ、もしくはPull Requestのコメントで、issue idの前にfixかcloseが含まれていると、Pull RequestがマージされたタイミングでIssueも同時に閉じられることになる。 記載例1Fix #1234 1To close #3456 このように書くとIssueの閉じ忘れが減る アジャイル開発自体については以下にまとめた アジャイル開発におけるプロジェクトマネジメントについて 参考関連記事 Github入門 ～入社初日の完全な素人でも分かる優しい説明～ [CI/CD入門] Github Actionsでビルド/テスト/デプロイを自動化 Github x Teams Webhook/Notificationによる連携方法 Github Pages x Hexo運用をGithub Actionsで自動化 git複数アカウントの使い分け設定 [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github.comからGithubEnterpriseへの移行手順 その他 GitHubでタスク管理ができる新機能「Project」超入門 開発者のタスク管理をGitHubで行ったらうまくいった話","link":"/Github%E3%81%AE-Issue-Project-%E3%82%AB%E3%83%B3%E3%83%90%E3%83%B3-%E3%81%A7%E3%83%97%E3%83%AD%E3%83%80%E3%82%AF%E3%83%88%E3%83%90%E3%83%83%E3%82%AF%E3%83%AD%E3%82%B0-%E3%82%BF%E3%82%B9%E3%82%AF%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B%EF%BC%88%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E9%96%8B%E7%99%BA%E3%81%AE%E9%81%8B%E7%94%A8%EF%BC%89/"},{"title":"Github入門 ～入社初日の完全な素人でも分かる優しい説明～","text":"今回はGithubというツールについて解説します。学生や新入社員等、これからアプリ開発を始める方が初めに覚えるツールなのですが、専門用語を並び立てた説明だらけで戸惑う方が多いため、極力丸めた言葉で優しく書きました。 Githubはエンジニアに取っての読み書きのようなものです。当然の前提知識として暗黙知にされることが多く、アプリ開発を学ぶ中では必ず使うシーンがあります。あくまで作業を楽にするための便利なツールなので、食わず嫌いをせずに早めに覚えましょう。 1. Githubとは 2. Githubの利用に必要な準備 2.1. アカウントの作成 2.2. IDEの準備 2.3. インストール 3. リポジトリ作成～クローン 3.1. リモートリポジトリの作成 3.2. リポジトリをLocal端末へのClone 4. 編集した内容をリモートに送るまで/基本コマンド 4. Githubを用いた分散開発 Cheat Sheat 関連記事 1. Githubとは 猫のようなキャラはマスコットのOctocatです ソースコード(アプリを構成するファイル群の事)を保管/共有する場所 アプリケーションはコードを書いたファイルの集まりで構成されます 複数人で開発するには、各メンバが編集したソースコードを集めて合体(mergeと言います)させ、最新版を保管しておく共通の場所が必要 バージョン管理ツール 時系列に沿ったソースコードの編集内容の変化を管理可能です 差分の視覚化 他メンバが開発した箇所がマーキングされて表示されます ソースを1行づつ見比べる手間を省略できます 任意のタイミングに戻せる 例えば、誤ってアプリを壊してしまった際に、直前のタイミングに戻せます コードレビュー（評価） Pull Requestという機能を利用すると、自身の編集内容と共にメンバーに確認依頼を飛ばせます 差分が一目で分かるため、レビューが効率的です 指摘箇所のコードとコメントをセットで登録でき、対話形式で解決できます 昔はExcelにレビュー表を作って一つ一つチェックしていたようです このファイルのXX行目の～～がと毎回書いて照らし合わせる作業は恐ろしく非効率的なのでやめましょう 連携機能 WEBhook Slack等のチャットツールに通知を飛ばす機能です Github Actions 自動化機能 例えば、Gitに編集したコードをアップした際に本番環境（アプリが動くサーバー等）に自動的に送ってくれたりします（デプロイという作業） ある程度開発に慣れたら使ってみましょう CI/CDやDevOpsというワードと一緒に勉強してみてください 2. Githubの利用に必要な準備 まずはアカウントを作成して、自分のPC上でGitのコマンドを実行できるようにインストールする必要があります 2.1. アカウントの作成 gitubでアカウント登録を行いましょう 必要事項を入力してSign up 通知メールから承認 2.2. IDEの準備 開発を行うにはIDEというものが必要です IDEは以下の二つの要素でできています エディター コードを編集する場所 CLI コマンドを打つ場所 基本的にここでgithubを操作するコマンドを打つので、用意が必要です 以下をPCにインストールしましょう Visual Studio Code この記事もVS Codeで書いています 以降は上記のIDEのCLI(VS Codeの画面下部)にコマンドを打つという前提で説明を書きます 2.3. インストール 以下を参考にGithubをPCに入れましょう Gitのインストール 3. リポジトリ作成～クローン リポジトリとは ソースコードを格納する一つの箱のようなもの 基本的にアプリ単位で作成します これをGithub上と自分のPC上に対になる形で配置します(clone) 中身のファイルを編集して、コマンドで行き来させます ざっくりイメージ pullコマンドで自分のPCに持ってくる 編集 pushコマンドでGithubに返す 3.1. リモートリポジトリの作成 githubにログインして”New Repository”から作成してみましょう 3.2. リポジトリをLocal端末へのClone リポジトリ作成後の画面を開く “Clone or download”を押下 戻りのボタンです 出てきたURLを保存します 以下のコマンドをCLIで実行 Github上に作ったリポジトリが自分のローカル端末(PC)にコピーされます1git clone &lt;url&gt; ここまででGit ⇔ PC間で、データを行き来させることが可能になりました 4. 編集した内容をリモートに送るまで/基本コマンド基本的な流れを以下に示します Github上から最新のソースコードを取得 1git pull 開発 ファイルを開いて編集 リポジトリ生成時にReadme.mdというファイルができていると思います リポジトリの説明を書くファイル ここに開発のルール等をメモしてメンバと共有するのが一般的です VS Codeなら以下のコマンドで開けます1code &lt;ファイル名&gt; add: リモートに送るファイルを指定 厳密にはCommitに含めるファイルを指定1git add &lt;編集したファイル名&gt; commit: 編集の完了を宣言 commitのタイミング毎にバージョン管理がされます 好きなタイミングに戻れるようにこまめにcommitしましょう1git commit リモートに編集内容を送る ここで送られるのはcommitに含まれるファイルのみ1git push ここまでで、個人開発はできます。次は複数人が関わるパターンを勉強しましょう。ブランチという概念の理解が必要です。 4. Githubを用いた分散開発 次に、複数名で開発を行うために必要なbranchやmergeを習得しましょう git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Cheat Sheat Git Cheat Sheat 関連記事 Github入門 ～入社初日の完全な素人でも分かる優しい説明～ [CI/CD入門] Github Actionsでビルド/テスト/デプロイを自動化 Github x Teams Webhook/Notificationによる連携方法 Github Pages x Hexo運用をGithub Actionsで自動化 git複数アカウントの使い分け設定 [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github.comからGithubEnterpriseへの移行手順","link":"/Github%E5%85%A5%E9%96%80-%E5%85%A5%E7%A4%BE%E5%88%9D%E6%97%A5%E3%81%AE%E5%AE%8C%E5%85%A8%E3%81%AA%E7%B4%A0%E4%BA%BA%E5%90%91%E3%81%91%E3%81%AE%E5%84%AA%E3%81%97%E3%81%84%E8%AA%AC%E6%98%8E/"},{"title":"[Google cloud shell x Hexo] 環境構築&記事編集","text":"Google Cloud Shell上にHexo環境を構築した際のメモ 前提 git連携 &amp; リポジトリのclone 記事のプレビュー表示における注意点 Githuにpush時にログイン 関連記事 Google Cloud Shell Hexo Github 前提 想定するシチュエーション 既に他環境でHexoでWEBページを生成してgitにアップ済み Hexoやgithub, cloud shell自体の説明は他記事にまとめてあるので、こちらで補完してください [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 Github入門 ～入社初日の完全な素人でも分かる優しい解説～ Google Cloud Shellの設定手順 git連携 &amp; リポジトリのclone git configでユーザの情報を登録してから、cloneでデータを持ってくる cloud shellにはgit cliが元から入っているので楽123git config --global user.name &quot;user-name&quot;git config --global user.email &quot;e-mail&quot;git clone your repository hexoをinstall cloud shellにはNode.jsが元から入っているのでHexoを入れるだけ123cd your-repository/your-blognpm install -g hexonpm install hexo --save 記事のプレビュー表示における注意点 Hexo serverでlocalhostを起動する際に、-pでポートを8080に指定する必要があります デフォの4000はcloud shellでは見れないため1hexo server -p 8080 previewは右上のアイコンから開けます 以上でブラウザでWEBページの画面を確認可能です Githuにpush時にログイン 以下のようにユーザ名とパスワードの入力求められます12Username for 'https://github.com': Password for 'https://user-name@github.com': 関連記事Google Cloud Shell iPad ProでWEB AP開発 &amp; RPA Google Cloud Shellの設定手順 Hexo [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 Hexoテーマ(theme)変更: icarus Hexoにコメント欄を追加(Disqus) icarus(Hexo Theme) Tips Menuの編集 Hexo 共有機能のPlugin Add Thisで動的なシェアボタンを追加 [Hexo] 記事のURLを変更 Hexo URLのリダイレクトhexo-generator-alias/hexo-generator-redirect Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録 HexoブログのAMP化【完全版】 Github Github入門 ～入社初日の完全な素人でも分かる優しい解説～ [Github入門] branchをLocalで生成～Remoteに反映 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github x Teams Webhook/Notificationによる連携方法 Github.comからGithubEnterpriseへの移行手順","link":"/Google-cloud-shell-x-Hexo-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89-%E8%A8%98%E4%BA%8B%E7%B7%A8%E9%9B%86/"},{"title":"[Hexo] URLのリダイレクト (hexo-generator-alias/hexo-generator-redirect])","text":"Hexoで生成したWEBページのURLリダイレクトの設定方法とプラグインについて解説します。 リダイレクトが必要となる理由 リダイレクト設定方法 リダイレクト設定手順 hexo-generator-alias プラグインをinstall リダイレクトの設定方法 各記事のファイルでリダイレクトを宣言 設定例 リダイレクト設定手順 hexo-generator-redirect プラグインをinstall 各記事のファイルで宣言 例 テンプレートの作成 参考 リダイレクトが必要となる理由Hexoで生成したWEBページのURLはファイル名や設定を弄るだけで簡単に変更できますが、以下の問題が発生します Googleから重複記事とみなされる 以前のURLでSEO一位でもそのままでは引き継げません 古いURLのリンク元から辿ると404 Not Foundになってしまう 上記の対策として、Google等の検索エンジンにURLの変更を伝え、ページへ誘導する仕組みを作る(リダイレクト設定をする）必要があります リダイレクト設定方法手動で頑張るのもありですが、Hexoの場合は以下のプラグインを入れれば解決できます Plugin hexo-generator-alias 直接リダイレクト hexo-generator-redirect リダイレクトページを独自に用意。1秒程度でリダイレクト 両方試したので、それぞれ解説します。 リダイレクト設定手順 hexo-generator-aliasプラグインをinstall1npm install hexo-generator-alias --save-dev リダイレクトの設定方法 各記事のymlファイルに宣言 設定ファイル(_config.yml)に宣言 各記事のファイルでリダイレクトを宣言 Hexoの各記事のymlファイルの頭についている—で囲まれた設定欄(Front-matter)に alias: を足します123---alias: 旧url/--- 設定例 以下の記事が前URLでSEO一位になっていたので、リダイレクトしてみます 123456789101112---title: '[オンライン飲み会向け] Netflix Partyでリモート鑑賞会をする方法'date: 2020-04-08 22:36:09category: - Tool Tips- Chrome 拡張機能tag: - Google Chrome- Netflix Partytoc: truealias: /2020/04/08/オンライン飲み向け-Netflix-Partyでリモート鑑賞会をする方法/--- 本番環境にデプロイして、実際に検索欄から見てみます 以下のように前のURL(日付入り)が出てきますが、開くと新しいURLにリダイレクトされました 一瞬、リダイレクト用のページで”移動しました”と表示してからリダイレクトされる仕様はちょっと微妙な気もします 新しいURLにRedirectされました リダイレクト設定手順 hexo-generator-redirectプラグインをinstall hexo-generator-redirectをinstall1your-blog&gt; npm install hexo-generator-redirect --save-dev 各記事のファイルで宣言 Hexoの各記事のymlファイルの頭についている—で囲まれたFront-matter（設定欄）にredirect_fromを足すだけです 注意点 後ろに/は不要 頭の https://you-blog.github.ioは不要 12345---redirect_from:- /old-url1- /old-url2--- 例 以下の記事が前URLでSEO一位になっていたので、リダイレクトしてみます12345678910111213---title: '[オンライン飲み会向け] Netflix Partyでリモート鑑賞会をする方法'date: 2020-04-08 22:36:09category: - Tool Tips- Chrome 拡張機能tag: - Google Chrome- Netflix Partytoc: trueredirect_from:- /2020/04/08/オンライン飲み向け-Netflix-Partyでリモート鑑賞会をする方法--- テンプレートの作成 テーマのlayoutの中に redirect.ejs を作成します パス1your-blog\\themes\\icarus\\layout&gt; redirect.ejsを編集 公式の説明に合った例12345678&lt;% const newUrl = full_url_for(page.target.path) %&gt; &lt;h1&gt;Page address was changed&lt;/h1&gt;&lt;p&gt;The new page address is &lt;a href=&quot;&lt;%= newUrl %&gt;&quot;&gt;&lt;%= newUrl %&gt;&lt;/a&gt;&lt;/p&gt; &lt;script type=&quot;text/javascript&quot;&gt; setTimeout(function(){ document.location.href = '&lt;%= newUrl %&gt;'; }, 5000);&lt;/script&gt; Hexo gの実行時にリダイレクト様のHTMLが生成されていることを確認可能 1234hexo g（略）INFO Generated: 2020/04/08/オンライン飲み向け-Netflix-Partyでリモート鑑賞会をする方法/index.html 本番環境にデプロイして、実際に検索欄から見てみます 以下のように前のURL(日付入り)が出てきますが、開くと新しいURLにリダイレクトされました 一瞬、リダイレクト用のページで”移動しました”と表示してからリダイレクトされる仕様はちょっと微妙な気もします 新しいURLにRedirectされました 参考 hexo-generator-redirect Hexo の 投稿記事 URL を 変更する","link":"/Hexo-URL%E3%81%AE%E3%83%AA%E3%83%80%E3%82%A4%E3%83%AC%E3%82%AF%E3%83%88-hexo-generator-alias-hexo-generator-redirect/"},{"title":"[Hexo] 記事のURLを変更","text":"変更方法 Hexoディレクトリ直下の設定ファイル(_config.yml)のpermalinkを変更するだけです デフォルト 年月日が入って長ったらしい1permalink: :year/:month/:day/:title/ ここを変更します site-url/:title1permalink: :title/ site-url/:category/:title/1permalink: :category/:title/ URLの変化を確認 1hexo server 本番環境ではlocalhostがsite-urlに変わります URLはWEBページのSEOに影響するので短めにしましょう URLを変更したらリダイレクトの設定も一緒に行いましょう。Google検索でも古い方のURLが出てしまうためです。 Hexo URLのリダイレクト (hexo-generator-alias/hexo-generator-redirect","link":"/Hexo-%E8%A8%98%E4%BA%8B%E3%81%AEURL%E3%82%92%E5%A4%89%E6%9B%B4/"},{"title":"Hexo 共有機能のPlugin Add Thisで動的なシェアボタンを追加","text":"Hexoで生成したWEBサイトに共有機能を追加する手法を解説します。今回はAdd ThisというPluginで動的なシェアボタンを追加します。WEBアプリにも適用できるので覚えておくと便利です。HexoとGithub PagesでWEBサイトを作る方法はこちら Add This 手順 Account設定 シェアボタンを作成 関連記事 参考 Add This Add This WEBページにコンテンツを追加するフリーのサービス ex. シェアボタン, サイトでポチポチ押しながらデザインを決めると、自動でソースを作ってくれるNo Codeっぽいサービスです 注意点 上記のサービスで生成した共有ボタンは、Adブロックサービスでブロックされる可能性があります 手順Account設定 AddThisにアクセス Make it Shareableより”Get Started”を押下 Sign In 今回はGoogleアカウントを利用します Create Account Email AddressとCountryを設定 Registerを押下 アカウントの設定画面が開きます シェアボタンを作成 上部タブのTools⇒ADD NEW TOOLを選択 Share Buttonsを押下 用意されたデザインから追加したいシェアボタンをタイプを選択 PCとMobileでそれぞれどのように表示されるか確認可能です Inline Floating Expanding カーソルを合わせるとにゅっと出てくる 今回はExpandingを使ってみます Continueを押下 カスタマイズを行いActivateToolを押下 TutorialとCodeが表示されます 各記事のHTMLに以下を貼れば反映されるとのこと Hexoの場合は設定ファイルに以下のsrc=以降のURLを規定するだけで全ページに反映してくれました12&lt;!-- Go to www.addthis.com/dashboard to customize your tools --&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-5ee8d1fc16b460fb&quot;&gt;&lt;/script&gt; 設定ファイルを変更 Hexoディレクトリ直下の_config.ymlではなく、テーマディレクトリの_config.ymlに設定します1\\your-blog\\themes\\your-theme\\_config.yml _config.ymlのshare欄に設定 123456# Share plugin settings# https://ppoffice.github.io/hexo-theme-icarus/categories/Plugins/Shareshare: # Share plugin name type: addthis install_url: //s7.addthis.com/js/300/addthis_widget.js#pubid=ra-XXXXXXXXXXXXXX 以上で設定は完了 関連記事 [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 Hexoテーマ(theme)変更: icarus Hexoにコメント欄を追加(Disqus) icarus(Hexo Theme) Tips Menuの編集 [Hexo] 記事のURLを変更 Hexo URLのリダイレクトhexo-generator-alias/hexo-generator-redirect Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録 HexoブログのAMP化【完全版】 参考 Hexo icarus plugins Add This","link":"/Hexo-share%E6%A9%9F%E8%83%BD%E3%81%AE%E8%BF%BD%E5%8A%A0-Add-This/"},{"title":"Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録","text":"概要 想定読者 基礎知識 手順 1. Pluginの導入 2. _config.ymlにPluginの設定を追加 3. sitemap.xmlの生成 4. 本番環境へデプロイ 5. Google Search Consoleへ登録 概要こんにちは。今回はHexoでサイトマップを自動生成してGoogleに登録するまでの手法を紹介します。本サイトもHexoを用いて自動生成しています。 想定読者 静的サイトジェネレータhexoでWEBページを作成済み Google検索でヒットしない状態 サイトマップ未登録 基礎知識 サイトマップとは サイトにどのようなページがあるのか表す為のもの 以下の二種類があります HTMLサイトマップ XMLサイトマップ 検索エンジンが情報収集する対象となるため、SEO対策において重要 hexoではプラグインを利用することでサイトマップを自動生成できます Google Search Console Serch Consoleの概要 （公式サイトより引用）1Google Search Console は、Google 検索結果でのサイトの掲載順位を監視、管理、改善するのに役立つ Google の無料サービスです。Search Console に登録しなくても Google 検索結果にサイトが表示されるようにすることはできますが、Search Console に登録することで、Google のサイトに対する認識を理解し、改善できるようになります。 生成したサイトマップをこちらに登録することで、Google検索結果に自分のWEBページが出るようになります WEBページを公開したばかりの場合、登録しなければ検索結果に出ないと思われます 手順 Pluginの導入 _config.ymlにPluginの設定を追加 sitemap.xmlの生成 本番環境へデプロイ Google Search Consoleへ登録 1. Pluginの導入 HEXOでサイトマップを生成できるプライグインは二種類あります hexo-generator-sitemap hexo-generator-seo-friendly-sitemap 今回はこちらを採用 インストール HEXOディレクトリ直下で以下を実行1npm install hexo-generator-seo-friendly-sitemap --save 2. _config.ymlにPluginの設定を追加 HEXOの設定ファイルに先ほどのPluginを登録します ファイルはhexoディレクトリ直下にあります _config.ymlに追記する内容 12345## Plugins: https://hexo.io/plugins/sitemap: path: sitemap.xml tag: false category: false 3. sitemap.xmlの生成 いつも通りにhexoコマンドでジェネレートする際に、sitemapが生成されます 1hexo g sitemap.xmlの生成を確認 index.htmlと 通常はpublic配下 開いてみると、以下のように書かれています 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;sitemap.xsl&quot;?&gt;&lt;sitemapindex xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt; &lt;sitemap&gt; &lt;loc&gt;https://j-xaas.github.io/post-sitemap.xml&lt;/loc&gt; &lt;lastmod&gt;2020-03-10T13:04:39.446Z&lt;/lastmod&gt; &lt;/sitemap&gt;&lt;/sitemapindex&gt;&lt;!-- XML Sitemap generated by Hexo SEO Friendly Sitemap Generator --&gt; 4. 本番環境へデプロイ WEBページをホスティングしている、サーバ等へsitemap.xmlファイルをおきましょう github pagesを用いている場合は、Gitへpushします 5. Google Search Consoleへ登録 公式サイトへアクセス 未登録であれば、自分のWEBサイトのURLを登録しましょう サイドメニュー内、インデックスのサイトマップを選択 新しいサイトマップの追加 入力欄に”sitemap.xml”を入力 送信 しばらく待って更新すると、以下のようにステータスが”成功しました”と表示されます 以上でサイトマップの登録は完了です hexo g の度に更新されるので、事後作業は特にありません","link":"/Hexo%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%88%E3%83%9E%E3%83%83%E3%83%97%E3%82%92%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90-Google-Search-Console%E3%81%B8%E7%99%BB%E9%8C%B2/"},{"title":"[Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】","text":"こんにちは。今回は静的WEBサイトジェネレータのHexoを用いたWEBページの自動生成手法と、Github Pagesを用いた公開手法について解説します。”３分でできる”等という触れ込みを見て始めたのですが、当時素人だった私は相当ハマり諦めました…。初級者向けに説明が欠けている所を重点的にまとめようと思います。 昨今はWord PressやNote等のサービスを使って記事を書く方が多いと思いますが、自由度が低く、クオリティを追求すると有料になってしまう事が多いです。 今回の手法であれば、運用費を1円もかけず、ソースコードを完全に自由にいじれます。エンジニア界隈で流行っている手法ですが、素人や学生でも使えるレベルです。GithubやWEBの基礎の勉強にもなるので、是非挑戦してみてください。 ざっくりのイメージ（まだ分からなくてOKです） 1. 関連技術概要 早く進めたい人は手順に飛んでOKです 1.1. Hexo 静的WEBサイトジェネレータ 静的WEBサイト HTML + CSS + JavaScriptで構成されるWEBページ 上記をコマンド一つで自動生成するツールです Markdown形式のファイルを自動的にビジュアライズして表示可能 Markdownとは文章を簡単に記述するための記法です ハイフンで箇条書きを表現したり、#で見出しの文字を表現したりできます HTMLで書くよりはるかに簡単なので覚えましょう 慣れれば普段のメモもこの記法が楽です テーマが300種類近くあります Hexo Theme ブログや企業サイト、デザイナーのポートフォリオ等、なんでも作れます Themeの変更方法やカスタマイズ方法は他の記事で解説しているので、ページ作成後にご覧ください Hexoテーマ(theme)変更: icarus 1.2. Github Pages GitHub(バージョン管理ツール)が提供しているホスティングサービス 静的なWEBページを公開可能 運用費は無料 一定数のリクエストを超えると落ちてしまう制限がある 10万PV以上/月 初めは無視してOKです Githubの知識があれば学習コスト0で利用可能 Githubとは 簡単に言うと、ソースコードを置いておく場所です 開発に必須とも言えるツールであるため、覚えておくに越したことはないです Github Pagesが優れている点は、このソースの置き場所でそのまま公開できる手軽さにあります Github Pagesで生成可能なページの種類 ユーザーページ（https://ユーザー名.github.io） Githubユーザ名のrepository(名前固定)で公開 Githubユーザ1名につき、1つまで Point Organization(組織)のリポジトリである場合は上記の”ユーザ名”を”Organiztation名”に読み替えて利用できます つまりOrganizationを量産すれば、その数だけユーザページを作成可能です プロジェクトページ（https://ユーザー名.github.io/リポジトリ名/） repositoryを作成すれば、無制限にサイトを作成可能 Angularで開発したSingle Page Applicationのホスティングも可能 WEBアプリの公開にも使えます 10万PVで落ちるという制約があるため、ビジネスの現場ではそこまで使われません 個人で開発したものや、開発途中のものを公開するにはとても便利です Angularの解説は以下にまとめてます Category/Serverless Application Dev/Angular フロントエンドのスキルを深めていくのであれば、次のStepとしてAngularによるWEB AP開発に取り組むのが良いと思います。書籍等で勉強してみてください（おすすめ） Markdownやasciidoc形式のファイルをそのままおいて、ビジュアライズ表示も可能 push直後には失敗していた。数分後に確認したところ、確認できた。 編集内容の反映までに初めはリードタイムが必要 2. 手順 初級者向けに環境構築から書きます 2.1. 前提/環境構築 エディターを用意 (以下がお勧めです) Local端末上で開発する VS Code 【ゼロから！】Visual Studio Codeのインストールと使い方 クラウド型IDE上で開発する (GoogleアカウントがあればCloud Shellが楽です) Google Cloud Shell Google Cloud Shellの設定手順 上記の記事に設定手順を書いています 【GCP入門編・第9回】 Cloud Shell で、いつでもどこでも Google Cloud Platform (GCP) が操作可能に！ AWS Cloud9 (AWSのアカウントを持っていればコンソールから作れます) Cloud9の使い方と便利機能！最強プログラミング開発環境（IDE） Node.jsを Hexoを動かすために必要です 厳密にはHexoがJavaScriptで動くため、JavaScriptを使うための土台としてNode.jsが必要になります まだ入れていなければ、インストールしましょう 参考 【Node.js入門】各OS別のインストール方法まとめ(Windows,Mac,Linux…) Google Cloud ShellやAWS Cloud9等のクラウドIDEであれば、初めから入っています 面倒な環境構築を避けたい方は利用してみましょう 2.2. github pagesの公開 準備 ユーザ直下に作成する場合 特になし Organizationで作成する場合 Organization名がユーザ名の代わりになります URLにそのままなるので、作りたいWEBページに合わせて決めましょう repositoryを作成 以下のように名称を設定すると中においた静的ソースコードがWEBページとして公開される user-name.github.io 今回のrepository名 user-name.github.io 最終的に以下のURLで表示されます https://user-name.github.io Markdownファイルをおいてみる repositoryをコピー PS D:&gt; git clone https://github.com/user-name/user-name.github.io.git 適当なmarkdownファイルを作成してreporitoryにpush ブラウザで確認 https://github.com/user-name/user-name.github.io 2.3. 静的サイトジェネレーターを利用してサイトをビジュアライズ 作成したgithub pagesのrepository配下にhexoを入れます Hexoをインストール この時点でエラーが出たらNode.jsのバージョンを確認してください1$ npm install -g hexo Hexoでプロジェクトを作成 1$ hexo init your-blog hexoで起動して、ページを確認 12$ cd your-blog$ hexo server Localhostで以下の画面を確認 環境構築が事前に済んでいたので、ここまで3分程度 ポイント README.mdは干渉するので削除 まだgitにLocalで作ったブログをpushしてもWEBサイトには出ません ここでハマったので詳しく解説していきます generate HTMLをpublicフォルダ内に生成するコマンド1hexo generate publicというディレクトリが作られ、配下に以下が生成される \\user-name.github.io\\your-blog\\public 12345678Mode LastWriteTime Length Name---- ------------- ------ ----d----- 2019/11/26 19:03 2019d----- 2019/11/26 19:03 archivesd----- 2019/11/26 19:03 cssd----- 2019/11/26 19:03 fancyboxd----- 2019/11/26 19:03 js-a---- 2019/11/26 19:03 6589 index.html 以下でindex.htmlを確認しましょう file:///D:/user-name.github.io/your-blog/public/index.html Trouble Shooting ここでpushをすると、以下のエラーに悩まされます ググっても関係のない対処法ばかり出て初級者は詰むと思います 私もSSH鍵の設定を確認したりだいぶ迷走しました 12GitHub Pages failed to build your site.The value '{}' was passed to a date-related filter that expects valid dates in /_layouts/default.html or one of its layouts. 回避策 エラーの原因 Github pagesはリポジトリ内のルートディレクトリを読み込もうとする HEXOでgenerateされたWEBページはpublicディレクトリにある 読み込めずにエラーが出ている generateされたファイルがrepository直下におかれるように設定を編集 hexoディレクトリ直下の設定ファイルを編集することでできました _config.ymlを編集 12旧：public_dir: public新：public_dir: ../ 上記の状態でgenerateコマンドを打つと、public配下に生成されていたファイル群が、repository直下に生成される 1234567891011 ディレクトリ: D:\\user-name.github.ioMode LastWriteTime Length Name---- ------------- ------ ----d----- 2019/11/26 21:36 2019d----- 2019/11/26 21:36 archivesd----- 2019/11/26 21:36 cssd----- 2019/11/26 21:36 fancyboxd----- 2019/11/24 13:00 your-blogd----- 2019/11/26 21:36 js-a---- 2019/11/26 21:36 6834 index.html your-blog（ソースファイル）をgithub pagesが読み込んでエラーを起こさないように名称を変更 余計なディレクトリがあるとGithub PagesはWEBページを表示できません 初級者は個々でもはまると思います 元々のHexoディレクトリを_で読み込めなくするだけでOKです1PS D:\\user-name.github.io&gt; mv your-blog _your-blog ここまでやってからpush WEBブラウザでページの生成を確認 1https://user-name.github.io/ 2.4. 新しい記事を追加 hexo new ‘記事名’ 概要ページを作ってみましょう 12PS D:\\user-name.github.io\\your-blog&gt; hexo new &quot;about-mob&quot;INFO Created: D:\\user-name.github.io\\your-blog\\source\\_posts\\about-mob.md source/_posts/&lt;記事名&gt;.mdが生成 localhostでチェック 123PS D:\\user-name.github.io\\your-blog\\source\\_posts&gt; hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000 . Press Ctrl+C to stop. 記事が増えている 生成されたMarkdownファイルを確認 123456PS D:\\user-name.github.io\\your-blog\\source\\_posts&gt; lsMode LastWriteTime Length Name---- ------------- ------ -----a---- 2019/11/26 20:51 57 about-mob.md-a---- 2019/11/26 18:42 838 hello-world.md abouto_mob.mdを編集 編集内容がLocal内で反映されていることを確認 2.5. 下書き記事を追加1hexo new draft &quot;article-name&quot; 下書きディレクトリ source/_drafts にmdファイルが生成される 本番環境やhexo serverでは表示されない 表示したい時は以下で–draftsを付ける1hexo server --drafts 2.6. 固定ページを追加1$ hexo new page &quot;dir-name&quot; source/“dir-name2/index.md が生成される まとめ 以上で解説は終了です 以下ができる状態になったと思います 静的サイトジェネレーターでWEBサイトを自動生成 静的WEBサイトホスティングで公開 Hexoサイトのカスタマイズ 次はテーマを変更してみましょう Hexoテーマ(theme)変更: icarus icarus(Hexo Theme) Tips Menuの編集 その他のカスタマイズ Category/Hexo Hexoサイト運用の自動化 Github Pages x Hexo運用をGithub Actionsで自動化 毎回hexo generateやディレクトリ名の変更作業を行うのは面倒なので自動化しました","link":"/Hexo-x-Github-Pages-5%E5%88%86%E4%BB%A5%E5%86%85%E3%81%AB%E3%83%96%E3%83%AD%E3%82%B0%E3%82%92%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90%E3%81%97%E3%81%A6%E7%84%A1%E6%96%99%E3%81%A7%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7/"},{"title":"Hexoにコメント欄を追加(Disqus)","text":"こんにちは。今回はHexoで生成したWEBサイトにコメント欄を追加する手法について解説します。他の説明記事がどれも間違っていて（恐らくバージョンの問題）だいぶハマったのでまとめておきます。 1. Disqusとは Disqus コメント機能を拡張するサービス 様々なPlatformに対してプラグインを提供 HexoのthemeはDisqusの活用を前提としたものが多く、簡単に導入可能です ※ themeに対して設定する為、選定後の対処をお勧めします 関連記事：Hexoテーマ(theme)変更: icarus 無料で利用を開始可能です 2. 導入手順2.1. Disqusに登録 DisqusのSignupを実施 Twitter, FB, Googleアカウントの何れかを利用可能です 私はGoogleアカウントを利用しました 認証後にSignupを押下 “I want to install Disqus on my install”を選択 Create a new Site 以下の欄を入力 Website Name Category CreateSiteを選択 以下の順に選択 “Got it. Let’s get started!” “I don’t see my platform listed, install manually with Universal Code” 以上でDisqusのサイト用ページが作成されました 2.2. Disqus設定 以下が設定ページです Installation Comment機能非対応のthemeの場合はこちらのスクリプトをサイトに貼り付けましょう Hexoデフォルトのlandscapeであれば必要 該当のejsとプレフィックスにつくファイルを編集してください ファイル所在(landscapeの例)1Your-blog\\theme\\Your-Theme\\layout\\_partial 本サイトに採用しているicarusであれば、この工程はスルーしてOK “Configure”を押下 URLを入力 “Complete Setup”を押下 上部のSettingタブを選択 左のリストのGeneralを選択 “shortname”の値を控える 後でhexoに設定します 各項目に入力して”Save”を押下 以上でDisqus側の設置は完了です 細かく設定可能なので 2.3. Hexoに設定 shortnameをtheme側の_config.ymlに記述 元の状態123comment:# Name of the comment plugintype: 改修 typeにdisqusを設定 shortnameにdisqusで定義された値を設定123comment: type: disqus shortname: &lt;from_disqus&gt; Comment機能があるthemeの場合は以上でOK(icarus等) 以下のディレクトリがあるかで判断してください Your-Blog\\themes\\Your-Theme\\layout\\comment Trouble Shooting ※Comment機能がないthemeの場合(デフォルトのLandscape等)の対応も載せておきます Hexo側の設定ファイルの改修も必要です Your-Blog/_config.yml 12# disqusdisqus_shortname: https-j-xaas-github-io Disqus/Setting/Installationで表示されるScriptを該当するejsファイルにコピペしてください ejsファイルとは？ Tour-Blog/theme/Your-Theme/layoutの配下にあります 例えばheader.ejsはHexoで各記事をgenerateする際に共通の設定を与えてくれるファイルです つまり、headerに共通して与えたいスクリプトがあれば、ここにコピペするだけでOKです ※旧バージョンの場合 他の記事はどれも以下のように設定するよう書かれていましたがエラーになります123comment: disqus: [shortname] duoshuo: [shortname] comment機能の設定ファイルを探して確認 以下にありました j-blog\\themes\\icarus\\layout\\comment\\disqus.ejs ”comment.shortname”とあることから、設定ファイルのcommentのshortnameの値を参照していることが分かります themeによって特殊な設定が必要なケースも予想されるため、同じように確認してみてください123456(function() { var d = document, s = d.createElement('script'); s.src = '//' + '&lt;%= get_config('comment.shortname') %&gt;' + '.disqus.com/embed.js'; s.setAttribute('data-timestamp', +new Date()); (d.head || d.body).appendChild(s);})(); 3. 利用テスト3.1. Localでチェック 画面への反映をチェックしましょう1hexo server 記事の下部にコメント欄を確認できます 仕様はDisqusのSettingで細かく変更可能です コメントの投稿は本番環境でないとエラーになります generate 1hexo generate 本番環境へデプロイ 3.2. 投稿 WEBから実際にコメントを投稿してみましょう ”ログイン”よりGoogleアカウントでログイン Disqusのアカウント登録に利用したアカウントを用いれば、管理者のコメントとして認識されます コメントを投稿してみましょう 投稿者名の横に”管理者”が表示されます Googleアカウントが実名なので、Twitterで登録しておけばよかったかも… 3.3. アカウント登録 記事の訪問者をイメージして、Twitterアカウントで試してみます 事前に管理者アカウントから”ログアウト”しておきます 投稿欄の下のTwitterマークを選択 認証画面に飛びます アカウント設定 各入力項目を埋めて”Sign Up”を押下 すると、以下のように規約が表示されます 設定したアドレスに以下のmailが届きます 青字を押下 認証が完了しました WEB上でログイン コメントを投稿 アイコン画像はTwitterのものがそのまま反映されるようです 以上でDisqusの解説は終了です。手軽なので是非導入してみましょう。","link":"/Hexo%E3%81%AB%E3%82%B3%E3%83%A1%E3%83%B3%E3%83%88%E6%AC%84%E3%82%92%E8%BF%BD%E5%8A%A0-Disqus/"},{"title":"Hexoテーマ(theme)変更: icarus","text":"概要 変更手順 1. テーマの選定 今回採用したテーマ 2. Githubからダウンロード 3. 設定(_config.yml)を変更 Trouble Shooting icarus設定Tips ウィジェットを変更 プロフィールを変更 背景の変更 目次を自動作成するプラグインの導入 概要 Hexoにはテーマのテンプレートが数百種類用意されており、簡単に変更することができます デフォルトはlandscape シンプルでいいのですが、デザインとして物足りなく、プロフィール欄も欲しいので変更します &lt;div style=&quot;text-align:center;&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/41946222/76521887-038c5300-64a9-11ea-8dfd-8454b8ce0dd2.png&quot; height=&quot;100%&quot; width=&quot;100%&quot;&gt; &lt;/div&gt;変更手順 テーマの選定 Githubからダウンロード 設定(_config.yml)を変更 1. テーマの選定 まずは採用したいテーマを決めましょう Hexoのテーマ一覧は以下より確認できます Themes | Hexo 295種(2020/03/12時点)あります Star数のランキングはこちらです 自身のWEBページの方向性に合わせて選定しましょう 個人的にイケてると感じたテーマを紹介します シンプル icarus プロフィール欄がデフォルトである 各記事がサムネで表示される 手間は少し増えてしまいそう サイドのメニューと記事一覧を、画面サイズに応じて１～３列で表示 NexT プロフィール欄がデフォルトである モノトーン １～２列で表示 Material indigo Tranquilpeak 最近見つけたので追加。そのうちこちらに変更するかも ダイナミック React 会社サイト向け デザインが作りこまれています 別の機会に利用してみようと考えています Ochuunn サイトを開いた時の動作がおしゃれです デザイナー向け MiccallTheme Zhaoo TKL 一枚目から始まるタイプですが記事欄は質素です 今回採用したテーマ icarus GitのStar数ランク5位で人気のテーマです 後はいつも通りgenerateして本番環境へデプロイしましょう1hexo generate Trouble Shooting 本番環境で表示が崩れている場合 前のテーマからgenerateされていたファイルが邪魔をしています（私もハマりました） generateで生成されるファイル群を削除すれば、修正できます cheerioがないというエラーが出た場合 12ERROR Package cheerio is not installed.ERROR Please install the missing dependencies from the root directory of your Hexo site. 以下を実行 Hexoディレクトリ直下で1npm install cheerio --save hexo sを実行できます icarus設定Tips ハマる場面もあったので各種設定についても解説しておきます ウィジェットを変更 icarus/layout/widget内のファイルを改修することで、左右の表示を変更できます プロフィールを変更 icarusのwikiを参考に改修します 上記には書いてありませんでしたが、改修する設定ファイルは以下になります themes\\icarus_cofig.yml 中を確認すると以下のようにprofileの初期設定がされていることが分かります 123456789101112131415161718192021# https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: Your name # Title of the author to be shown in the profile widget author_title: Your title # Author's current location to be shown in the profile widget location: Your location # Path or URL to the avatar to be shown in the profile widget avatar: # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/ppoffice' 変更 profile画像は以下に格納しましょう \\themes\\icarus\\source\\images おしゅし のフリー素材として公開されている画像を用意しました 改修例 123456789101112131415161718widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: J # Title of the author to be shown in the profile widget author_title: IT Specialist # Author's current location to be shown in the profile widget location: Tokyo Japan # Path or URL to the avatar to be shown in the profile widget avatar: images/oshushi.png # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: true Profileの変更結果 &lt;div style=&quot;text-align:center;&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/41946222/76530468-1d349700-64b7-11ea-8cae-6ed0407cc359.png&quot; height=&quot;50%&quot; width=50%&quot;&gt; &lt;/div&gt;背景の変更 以下からできますhttps://github.com/highlightjs/highlight.js/tree/master/src/styles 1234567# Article display settingsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light 目次を自動作成するプラグインの導入 hexo-tocをインストール1$ npm install hexo-toc --save 目次を入れたい箇所に下記を追記すればOK。 1&lt;!-- toc --&gt; オプションとしてthemes/icarus/config.ymlに下記を追加します。 123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: '#' style: header-anchor 実際に記事に入れて見ましょう 123456789101112---title: Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録thumbnails: /gallery/sitemap_thumnail.pngdate: 2020-03-10 23:23:23toc: truetags:- Hexo- Sitemap- google search console---&lt;!-- toc --&gt;## 概要 画面を確認すると以下のように反映されていました。 関連記事 icarus(Hexo Theme) Tips Menuの編集 続いてメニューをカスタマイズしましょう","link":"/Hexo%E3%83%86%E3%83%BC%E3%83%9E-theme-%E5%A4%89%E6%9B%B4-icarus/"},{"title":"HexoブログのAMP化【完全版】","text":"こんにちは。今回はHexoで生成したWEBページのAMP化の手法について解説します。簡単にいうとWEBページを高速表示可能な形式にします。同様の記事も数件見つけたのですが、所々でハマったので、完全版としてまとめました。 基礎知識 AMP(Accelerated Mobile Pages)とは？ hexo-generator-ampとは 導入手順 1. hexo-generator-ampのinstall 2. headタグにAMP HTMLのパスを指定 3. ./_config.ymlの改修 Trouble Shooting 4. Markdown記法の修正(画像) Trouble Shooting 5. WEB上でのチェック AMPテスト 基礎知識AMP(Accelerated Mobile Pages)とは？ AMP HTML モバイルでのコンテンツ表示を高速化させるための手法 GoogleとTwitterが協同で立ち上げたプロジェクトです ページ読み込みに3秒以上かかる場合、53%のユーザーが離脱してしまうと言われています 検索結果で並んでいるサイトに、稲妻マークが小さくついているものを見つけたことはありませんか？ 実はあのマークはAMPサイトであるサインです AMP化するには規格に則った記法でサイトを構築する必要があります 自力での対応は難しいので、自動生成する手法を今回解説します hexo-generator-ampとは hexo-generator-amp Google AMP (Accelerated Mobile Pages) を自動で生成してくれるプラグイン 各記事のHTMLに対して、AMP HTMLを生成 hexo generate実行時に通常のHTMLとAMP版のHTMLの双方ができます 導入手順1. hexo-generator-ampのinstall Hexoディレクトリ直下で実行1npm install hexo-generator-amp --save 2. headタグにAMP HTMLのパスを指定 head.ejs 自動生成するHTMLのheaderの設定を規定するファイルです ファイルの所在は以下 1\\themes\\theme-name\\layout\\ 私が利用しているテーマ:icarusの場合は一階層深い所にありました1\\themes\\icarus\\layout\\common\\ 以下を追記 123&lt;% if (is_post() &amp;&amp; config.generator_amp){ %&gt; &lt;link rel=&quot;amphtml&quot; href=&quot;&lt;%= config.url %&gt;/&lt;%= page.path %&gt;/amp/index.html&quot;&gt;&lt;% } %&gt; WEBページを作成する中で、度々headerにscriptを追加するシーンがあると思われます 基本的にhead.elsに同様に追記することで目的を達成可能です。覚えておきましょう 3. ./_config.ymlの改修 _config.ymlにPluginの設定を追加します theme配下ではなくHexoディレクトリ直下のファイルです 以下を追記 Gitの公式ページの説明はpathの記法が少し間違っていました1234567891011121314# hexo-generator-ampgenerator_amp: templateDir: amp-template assetDistDir: amp-dist logo: path: sample/sample-logo.png width: 600 height: 60 substituteTitleImage: path: sample/sample-substituteTitleImage.png width: 1024 height: 800 warningLog: false hexo serverで確認 Trouble Shooting 以下のエラーが出た場合 12345678[00:44:36.025] [hexo-generator-amp] hexo-generator-amp's template has been copied tothe your project.Please check the following file.-&gt; j-blog\\amp-template\\sample[00:44:36.040] [hexo-generator-amp] error: Not found the hexo-generator-amp's assetfiles. If you do not have the file please download the sample file from the following site. ( see: https://github.com/tea3/hexo-generator-amp/tree/master/template )Please check the following file.-&gt; j-blog\\amp-template\\sample-logo.png 上記はpathの指定が間違っている sample配下にsample-logo.png等が格納されているため、sample/を頭に付けましょう 4. Markdown記法の修正(画像) hexo server実行時にAMPの書式チェックがプラグインによって実行されます 恐らく以下のErrorが大量に出る人が多いと思われます markdownの画像のURL指定の表記がAMPでは通用しない為です12This plugin can not acquire the width and height of such url images.Please change the URL to HTTP or HTTPS, or add height and width. エラーメッセージについて解説 このプラグインは、URL画像の幅と高さを取得できない URLをHTTPまたはHTTPSに変更するか、高さと幅を追加してください どういうこと？ AMPの規格では画像のheightとwidthを設定する必要があります。 そのため、各記事のURL指定の画像に対してエラーが出ています とりあえず以下のErrorが出ている記事の画像を修正してみます 12345678910-&gt; _posts/About-This-Blog.md[18:39:10.984] [hexo-generator-amp] error: This plugin can not acquire the width and height of such url images.Please change the URL to HTTP or HTTPS, or add height and width. img path: https://user-images.githubusercontent.com/41946222/73755094-dd3c0f00-47a8-11ea-9ec5-e1e537559054.pngPlease check the following file.-&gt; _posts/About-This-Blog.md[18:39:10.985] [hexo-generator-amp] error: Error: connect ETIMEDOUT 151.101.108.133:443This plugin checks whether the image URL exists. img path: https://user-images.githubusercontent.com/41946222/74917091-5030c100-540a-11ea-9060-2d05fc6c6c23.pngPlease check the following file. 現在のmarkdown記法 heightとwidthを定められない1![image_title](image_url) 回避策 以下のようにHTMLの記法で修正123&lt;div style=&quot;text-align:center;&quot;&gt;&lt;img src=&quot;image_url&quot; height=&quot;500px&quot; width=&quot;500px&quot;&gt;&lt;/div&gt; 各記事のURL指定の画像に対して同様の修正を実施します 割と大変なので、記事が少なめの段階で対処した方がいいです 確認 以下を実行1hexo server エラーの解消を確認 起動したAPをブラウザで確認 以下のように記事を開いている状態で、URLの後ろにampを付ければ生成されたAMP HTMLを確認可能です1http://localhost:4000/article_name/amp 各記事で確認しましょう Trouble Shooting AMP画像が表示されない heightとwidthの%指定はダメです pxでかっちり定めなければAMPでは表示されません 5. WEB上でのチェック 本番環境にデプロイ⇒WEBから確認 以下のように各記事のURLに/ampを足すとAMP HTML版のページの表示を確認可能です AMP版と通常版の両方のページをWEBから確認出来るようになっている状態です AMPテスト GoogleのAMPテスト 指定したURLがAMPに対応しているかチェック可能です AMP版のURLを指定してください 以上でHexoで生成したWEBページのAMP化は完了です 各種設定やTipsについては別記事で解説します","link":"/Hexo%E3%83%96%E3%83%AD%E3%82%B0%E3%81%AEAMP%E5%8C%96/"},{"title":"[LadioCast] 仮想ミキサーでMacbook内の音の流れをまとめる","text":"仮想ミキサーで音声の複数の入出力をまとめる手法について。MacBook Pro(2020) MacOS 10.15を利用しています。配信ライブやリモートセッションに活用すると便利そうでした。 利用するツールSoundFlower Soundflower システム内部（Mac内部）の音声を読み込むために必要 Mac標準のサウンド設定で出力先をSoudflower(2ch)にすることで、他のソフトウェアに音を流すことができる 使用例 YoutubeやDAWソフトの音(システム内部の音声)をSoundflowerに送り、ZoomやMeetの様な入力にSoudflowerを選択することで、通信相手にも聞かせる LadioCast LadioCast 入出力を各４つまで選択可能 L, Rも振り分け可能 使用例 Soudflower経由のシステム内部の音声と、外部ポートからインターフェイスやコンデンサーマイクで流れてくる音をLadioCastでまとめてから、任意のコンテンツに出力 Recを行うDAWソフトとライブ配信ツール、返しに同時出力 利用例: 音をまとめて動画配信ツール(Ex. Zoom)に出力する 音の流れ Ex. Macから出力される音声(youtubeなど)をZOOMにルーティングする方法 Macのサウンド出力をSoundFlower(2ch)にする LadioCastを起動し、入力1を「SoundFlower(2ch)」、ルーティングを「メイン」と「Aux1」にする LadioCastの出力メインを「SoundFlower(64ch)」にする ※Zoomのマイク入力になる Zoomのマイクを「SoundFlower(64ch)」にする これを利用することで、以下の様な応用方法が考えられます WEB会議/プレゼンで一緒にムービーをみる 配信ライブに利用する ゲームの音声やマイク音声を混ぜて送る リモートセッションでYoutubeを流しながらメンバと合わせる リモートセッションのやり方は以下にまとめています [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) おまけ： 現在のDTM環境 DTM環境のセッティング自体については以下の記事にまとめています PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] 参考 【リモートワーク】SoundFlowerとLadioCastを使いZoomでブラウザ再生したYouTubeの音を出す（Mac用）※追記あり Loopback Loopback MacOS 10.10.0~10.13で動作 利用中のMacOSは10.15であるため非対応でした 関連記事 [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] iPad Pro (第4世代)でDTM環境を構築 [SYNCROOM/NETDUETTO] YAMAHAのリモートセッションツールを試してみた","link":"/LadioCast-%E4%BB%AE%E6%83%B3%E3%83%9F%E3%82%AD%E3%82%B5%E3%83%BC%E3%81%A7Macbook%E5%86%85%E3%81%AE%E9%9F%B3%E3%81%AE%E6%B5%81%E3%82%8C%E3%82%92%E3%81%BE%E3%81%A8%E3%82%81%E3%82%8B/"},{"title":"MacBookProセットアップまとめ/環境構築","text":"Macbook Proを買って最初にした一通りの作業のメモ ソフトのインストール 本体設定 キーのリピートを最速化 画面分割(Spactacle) 環境構築 VSCode設定 参考 ソフトのインストール Chrome 拡張機能は引き継ぎ VSCode Spactacle Slack Teams Zoom mmhmm WEB会議用 DeepL 翻訳アプリ SparkAR ARフィルター開発用 MindNode マインドマップの作成用 Draw.io 図表の描画よう SYNCROOM リモートセッションツール TOOLS FOR UR44 インターフェイス用のソフト 本体設定キーのリピートを最速化 左上のリンゴマーク/Keyboard KeyRepeat, Delay Until Repeatのバーを一番右に変更 タイピングが高速になる 画面分割(Spactacle) Macはそれぞれのアプリのウィンドウの大きさを調整しないと画面に複数のウィンドウを表示して同時に見ることができない 以下からSpectacleをダウンロードして，Applicationsに入れる Spactacle 以下のショートカットを利用可能になる 使用例：Left Half Option + Command + ← Windows Key + ←でやっていたことと同じことが可能になる 自動で使えるように設定 Spectacleを開く Launch Spactacle at loginにチェック 環境構築 git CLI上でgit –versionを打ったら「Developperツールを利用しますか？」と聞かれ自動でMacが入れてくれた Homebrew Node.js 先にHomebrewrew, Nodebrewを入れる Homebrew Mac用のパッケージマネージャ。ツールのインストールとか諸々を管理してくれる Nodebrewを入れるために使う こちらのコマンドをコピペして実行 Nodebrew Node.jsのバージョン管理ツール。複数のバージョンのNode.jsをインストールしたり、切り替え等々が可能 以下を実行するだけ1brew install nodebrew Node.jsをインストール インストール可能なバージョンを確認1nodebrew ls-remote インストール 最新版1nodebrew install-binary latest バージョン指定する場合1nodebrew install-binary {version} 警告が出てインストールに失敗した場合は以下を先に実行1mkdir -p ~/.nodebrew/src インストールされたNodeを有効化1nodebrew use v14.7.0 以下を実行して、Current: v~と表示されればOK1nodebrew ls Nodeの実行パスを通す bashで使う場合1echo 'export PATH=$HOME/.nodebrew/current/bin:$PATH' &gt;&gt; ~/.bash_profile zshで使う場合 MacOS Catalinaからは標準で起動するターミナルがzsh1export PATH=$PATH:/Users/hiro/.nodebrew/current/bin 確認 以下を問題なく実行できればOK12node -vnpm -v Hexo 以下をHexoディレクトリで実行12npm install -g hexonpm install hexo --save Angular CLI Firebase CLI AWS CLI VSCode設定以下は最低でも設定しておくと生産背が上がります codeコマンドでファイルを開けるようにする Shift + Command + pでコマンドパレットを開く shell commandで検索 Shell Command: Install ‘code’ command in PATHを選択してInstall 以下が表示されればOK1Shell command 'code' successfully installed in PATH Command ＋ ` でエディターとCLIを移動可能にする Control + Shift + Tab エディタータブの移動 Shift + Option + Command + ↑ マルチカーソル入力 Control + Shift + G git 参考 快適にプログラミングするためのMac設定まとめ【これだけはやっておけ】 MacにNode.jsをインストール MAcにNode.jsをインストールしてnpmを使えるようにする（Nodebrew利用） VSCodeのマルチカーソル練習帳 VSCodeの秘伝のワザを大公開！","link":"/MacBookPro%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97%E3%81%BE%E3%81%A8%E3%82%81-%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"},{"title":"PCでDTM環境を構築 [Steinberg UR44C/Cubase ai]","text":"PCでDTM環境を構築するまでを解説します。InterfaceにはSteinberg UR44Cを採用しています。基本的にモバイル向けのCubasis leをiPadで使用していますが、リモートセッションサービスがPC対応のみであったため、備忘録的にまとめておきます。 1. Interfaceについて Steinberg UR-C マルチエフェクターで代用 2. 導入手順 TOOLS for UR-C インストール後の確認 Basic FX Suiteのアクティベーション Cubase AIのダウンロード 1. Interfaceについて PCにラインで音を取り込むにはインターフェイスが必要になります Steinberg UR-C Steinberg UR44Cを採用しました 採用ポイント Input×4 ＆ マイクプリアンプx4 複数の楽器とマイクを繋ぎ、人数分のヘッドホンに出力すれば、屋内でサイレントセッションが可能 元々↑をやりたくて買いました 価格 3万円ちょっとで手頃 今回の条件に当てはまる中で最安（他は5万以上） 更にInputを増やしたければ、予算を上げるかミキサーを買うしかないと思います もう少し節約したい場合 UR22C （17000円程度） InputとOutputが減りますが基本的にはほぼ同じ機器 USB 3.0（USB Type-C）対応 PCとiPad Proの両方で読み込めます Cubase le(モバイル用)とcaubase ai(PC用)のコードがついてくる Cubase 音楽制作ソフト 扱いやすく機能が一通り揃っているので初級者におすすめらしい 本来は購入する必要があります(6000円程度) ループバック機能により、動画配信も可能 周辺機器について インターフェイス ⇔ PC間の接続ケーブル 製品にUSB-C ⇔ USB3.0のケーブルがついてきます USB-C ⇔ USB-Cケーブルはついてきません なので、USB-CポートのみのMacBookやiPadの場合は以下の何れかの対処が必要です ハブで変換する USB Type C ハブ USB C ハブ USB3.0 ハブ 6in1 Type-c hubを使ってます USB-Cケーブルを購入 Outputの端子用のアダプタ ステレオ標準プラグ(楽器のシールドを刺す穴)なので、ステレオミニプラグ（イヤホンの端子）はそのままでは刺せません わざわざ対応した端子の機器を買わなくても、変換アダプタ(2つで700円程度)を使えばOKです UGREEN ステレオミニプラグ（メス）⇒ステレオ標準プラグ（オス） 変換アダプタ 金メッキ 3.5mm ⇒ 6.35mm アンプヘッドホン変換 (2個) マルチエフェクターで代用 マルチエフェクターの中にはインターフェイスとしての機能がついているものもあります ZOOMのG3やB3等 ポイント CubaseのようなDAWソフトはついてこないので別途購入が必要 Inputが少ない なので、以下に当てはまる方はインターフェイスを買った方が良いです 複数の楽器やマイクを繋げたい DAWソフトを利用したい 2. 導入手順 PCとSteinberg UR-CでDTM環境を構築する為に必要な作業は以下の三点です TOOLS for UR-Cのインストール Basic FX Suiteのアクティベーション ここまででPCで扱うDAWツールは基本使えます Cubase AI (DAW)のダウンロード TOOLS for UR-C 公式サイトからから入れます TOOLS for UR44 V2.2.1 - 278 MBを選択 zipファイルがインストールされます USBを全部外す zipファイルを開いてsetup.exeを実行 指示にしたがって次へを押していけばOK 以下が出たら完了 インストール後の確認 steinbergと付属のUSBで接続 電源はUSBCからではなく、アダプターに設定してください デバイスマネージャーを開く オーディオの入力及び出力にsteinbergが表示されてればOK PCがインターフェイスからの接続を読み込めるようになりました Basic FX Suiteのアクティベーション 先ほど一緒にインストールした上記にアクティベーションコードを入れて、ライセンスを入れる必要があります eLicencer Control Centerを開く アクティベーションコードを入力を選択 Steinbergを購入した際の説明書に以下の紙が入っています ESSENTIAL PRODUCT LICENSE INFORMATION ここに書いてあるコードを入力 以下の画面が表示されます ライセンスをダウンロード 以上で完了です ここまででPCへのライン音源の取り込みは可能です DAW以外にもリモートセッションツール等で遊べるようになります [SYNCROOM/NETDUETTO] YAMAHAのリモートセッションツールを試してみた Cubase AIのダウンロード SteinbergのWEBサイトでアカウント登録する必要があります 詳細はサイト内に詳しくまとまっています ダウンロードの際にコードが必要になります steinbergの説明書についている以下の紙に記載されています CUBASIS AI DOWNLOAD INFORMATION","link":"/PC%E3%81%A7DTM%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89-Steinberg-UR44C-Cubase-ai/"},{"title":"Popin Aladdin 2にゲーム(Switch/プレステ)画面を映す方法","text":"Popin Aladdin(プロジェクター)にゲームを映してプレイするまでの備忘録 投影するとこんな感じ やりたいこと・課題 やりたいこと ゲーム画面(Switch)をPopin Aladdin 2(プロジェクター)に写して、120インチの大画面でプレイしたい 課題：popin AladdinにはHDMI端子が無い 他の機器との連携は無線(WiFi/Bluetooth)のみ可能 HDMI接続のゲーム全般ができないと公式サイトにも書かれている 実現方法 Switchの映像をHD 60 S経由でMacBookに映す MacBookの画面をAirPlayでpopin Aladdinに映す キャプチャーボードという機器を利用することで、PCにSwitchの画面を映せます 音声も一緒にPopin Aladdinまで送れました 使用機器 Switch ＆ HDMIケーブル MacBook Pro AirでもAirplayの機能を使えればOK キャプチャーボード: Elgato HD 60S 元々プロのゲーム配信者などが使っている製品。遅延が非常に小さく専用アプリを入れるだけで利用できました 4Kで出力したい場合はElgato HD60 ProでもOK USB C Hub MacBookとHD60Sの接続用 Popin Aladdin 2 1やSE(廉価版)でも恐らくOK 準備 キャプチャーボード用ソフトのインストール Elgato HD60S(キャプチャーボード)を準備 Elgato HD 60S Game Capture HDを公式サイトからダウンロード ＆ インストールする https://www.elgato.com/en/gaming/downloads 製品(HD 60 S)/OSを選択後にGame Captureをダウンロード Game Capture HD ダウンロードされたGame Capture HDを以下のように開ればOK SitchからPopin Aladdinに表示するまで1. SwitchからHDMIでHD60 Sに接続 SwitchのHDMI Outから”IN”と書かれているHDMIに接続 2. Game Capture HDを起動 MacBookでソフトを起動しておく 後でHD60を接続すると、デバイスのプルダウンの選択欄でHD60を選択可能になる 3. HD60 SとMacBookを接続 HD60 Sの USBC端子からMacBookの端子に映像を出力 OutのHDMI端子では無いので注意 これでMacBookにSwitchの映像を表示できる SwitchとMacBook間のラグはほぼ完全に無し 4. AirPlayでpopin aladdin 2に表示 MacBookとPopin Aladdinは同じWiFiに接続していれば、AirPlayで接続することができる ここのラグはWiFiの強さや接続数で変動する 基本的に全く気にならないレベル スマブラなどのラグにシビアなゲームをする場合は接続数を強い回線が良い 使用感 普通のゲームは全く気にならずにプレイできるレベル WiFiの状況によってはラグが発生する場合もある うちは大量の機器を繋いでいますが、スマブラレベルのシビアな戦いになると少しラグが気になる程度 他の接続を減らすか、それだけMacやモニターを見てプレイすると良いかもしれない 強い回線を使っていれば概ね問題なし ちなみにTVやDVDは無線で接続可能な専用のチューナーや機器を購入すれば簡単に映せました Xit Air BOX 関連 youtube popin Aladdin 2にSwitchを映してみた 【HD60S】macでSwitchのゲーム実況する方法【Catalina】 popin aladdin 2でSwitchをやってみた（HDMI出力）","link":"/Popin-Aladdin-2%E3%81%AB%E3%82%B2%E3%83%BC%E3%83%A0-Switch-%E3%83%97%E3%83%AC%E3%82%B9%E3%83%86-%E7%94%BB%E9%9D%A2%E3%82%92%E6%98%A0%E3%81%99%E6%96%B9%E6%B3%95/"},{"title":"Privacy Policy","text":"個人情報の利用目的当ブログでは、メールでのお問い合わせの際に、メールアドレス等の個人情報をご登録頂く場合がございます。 これらの個人情報は質問に対する回答や必要な情報を電子メール等でご連絡する場合に利用させていただくものであり、個人情報をご提供頂く際の目的以外では利用致しません。 広告の配信について当サイトでは、第三者配信の広告サービス「Google Adsense グーグルアドセンス」を利用しております。このような広告配信事業者は、ユーザーの興味に応じた商品やサービスの広告を表示するため、当サイトや他サイトへのアクセスに関する情報 『Cookie』(氏名、住所、メール アドレス、電話番号は含まれません) を使用することがあります。またGoogleアドセンスに関して、このプロセスの詳細やこのような情報が広告配信事業者に使用されないようにする方法については、こちらをご確認ください。 アクセス解析ツールについて当サイトでは、Googleによるアクセス解析ツール「Googleアナリティクス」を利用しております。 このGoogleアナリティクスはトラフィックデータの収集のためにCookieを使用しています。このトラフィックデータは匿名で収集されており、個人を特定するものではありません。この機能はCookieを無効にすることで収集を拒否することが出来ますので、お使いのブラウザの設定をご確認ください。この規約に関して、詳しくはこちらをご確認ください。 免責事項当サイトのコンテンツ・情報につきまして、可能な限り正確な情報を掲載するよう努めておりますが、必ずしも正確性・信頼性等を保証するものではありません。 当サイトに掲載された内容によって生じた損害等の一切の責任を負いかねますのでご了承ください。 当サイトで掲載している画像の著作権・肖像権等は各権利所有者に帰属致します。権利を侵害する目的ではございません。記事の内容や掲載画像等に問題がございましたら、各権利所有者様本人が直接メールでご連絡下さい。確認後、対応させて頂きます。 当サイトからリンクやバナーなどによって他のサイトに移動された場合、移動先サイトで提供される情報、サービス等について一切の責任を負いません。","link":"/Privacy-Policy/"},{"title":"[SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ)","text":"7/21にYAMAHAの新しいリモートセッションサービスが公開されたので試してみました。 前バージョン(NETDUETTO)を試した際の記事 [NETDUETTO] YAMAHAのリモートセッションツールを試してみた SYNCROOM概要 SYNCROOM YAMAHAの遠隔合奏アプリ 基本無料 超低遅延 0.02秒（20msec）程度らしい 有線LANの場合。WiFiでもそこまで悪くはなかったです ZOOM等のサービスでは0.5秒以上はズレが生じます CD音質の通信 非圧縮もしくはロスレスの16bit/48kHz 動作環境（デスクトップ版） Windows 10（64bit）（日本語OS版のみ) macOS Mojave（10.14） macOS Catalina（10.15） （言語設定が日本語のみ動作） モバイル版 Android版のSYNCROOM βが試験的に公開されています まだ通信は不安定らしい 参考 コロナ禍で苦しむミュージシャンの救世主となるか？ヤマハがネット越しのセッションツール、SYNCROOMをリリースする背景 インストール 公式サイトのダウンロードページにアクセス 自分の端末のOSを選択してダウンロード ダウンロード後にインストーラを開く SYNCROOM-JP-mac-1.0.1.dmg SYNCROOM 指示にしたがってインストールを実行 初期設定 音符マークのアイコンを開くと以下の初期画面が立ち上がります YAMAHA Online Memberへの会員登録が必要 仮登録後に届くメールのURLにアクセス 以下が表示されれば完了 改めてアプリに戻り、ログインに進む 設定チュートリアルが開始します この時点でマイクやインターフェイスは接続しておく必要があります オーディオインターフェイス PCに楽器からの音を取り込むための機器 ボーカルのみであればコンデンサーマイクだけで済みます ZENLO コンデンサーマイク USBマイク 単一指向性 おすすめのインターフェイスと設定方法については以下にまとめました UR44C, UR22C PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] 出力先を選択 鳴りをチェックできます 入力設定 複数のチャンネルを使うこともできるようです ニックネームを設定 以上で設定は完了 使用方法 機材をセッティング インターフェイスや楽器をPCに繋いでおきます 適当に楽器を弾いて、”インプット”から出力を確認しましょう ここに出てこない場合はインターフェイスのドライバーが入っていないかもしれません ルームに集まる(↓のどちらか) ルームを作る 他人が作ったルームに入る ルーム名で検索して入る方法と、ルーム一覧から選択する方法があります ルーム一覧は以下のようにブラウザに表示されます フリーセッションの部屋もあれば、仲間内でパスワードを設定して集まってる部屋も スタ練より手軽に集まれるので気が楽 セッション画面 入室中のメンバーや通信状況を確認できます ”チャット”から参加メンバーと連絡を取れます 前回のNETDUETTOから追加された機能 詳細表示を押すと、各メンバの通信状況や遅延状況を確認できます 顔は見れないのでZoomと併用してセッションするといい感じになりました iPadやMacBookでZoomに入り、popInAladdin（プロジェクター）にミラーリングして写しています 100インチぐらいなので、4人ならほぼ等身大でメンバーが映ります DTM環境以下のような環境を作っています DTM環境を作るところから始めたい方は↓の記事を参考にどうぞ PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] 関連記事 [SYNCROOM/NETDUETTO] YAMAHAのリモートセッションツールを試してみた PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] iPad Pro (第4世代)でDTM環境を構築","link":"/SYNCROOM-%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%84%E3%82%8A%E6%96%B9-YAMAHA%E3%81%AE%E9%81%A0%E9%9A%94%E5%90%88%E5%A5%8F%E3%82%A2%E3%83%97%E3%83%AA/"},{"title":"Touch Cast Studioでオンライン会議/プレゼン/Zoomウェビナーを演出する","text":"ウェブ会議の演出ツールとしてmmhmmが流行っていますが、iPad持ちはより自由度の高いTouch Cast Studioがオススメです。mmhmmについては以下の記事にまとめています mmhmm使用方法 プレゼン/配信ライブ用の万能仮想カメラで画面を飛び回り自在に操る 概要 iPad向けのアプリ ニュース番組のようにキャスターと資料映像を１画面に表示できる mmhmmと似ているが、仮想カメラではなく独立したアプリケーション iPadとMacBookは画面を共有可能であるため、一緒に使うと便利 使い方 PCでZoomに接続 → TouchCast Studioの画面を共有 iPadだけで、Zoomアプリを使ってTouchCast Studioを利用することもできますが、見え方が少し異なります iPhone/iPadの画面をAirPlay経由で共有する機能がZoom側に標準で備わっている コンテンツの表示 以下の様に任意のコンテンツを画面上複数に配置できる ex. WEBサイト、画像、他のAP フィルター 以下の様にエフェクトを変更可能 以下はモザイクフィルター SOUND EFFECT 例えば、Touch Castの機能でクイズを出題 → SOUND EFFECTで正解/不正解音を鳴らす といったことができる。リモートの研修や授業をインタラクティブに演出するのに便利 その他にもホワイトボード機能も会議や解説に便利 MacBook側のビデオ会議ツール(Zoom, Teams, Meet)の画面共有からiPadの画面を選択すれば良い 録画もできるため、ちょっとしたアプリのデモや研修動画にも使えそう 参考関連記事 mmhmm使用方法 プレゼン/配信ライブ用の万能仮想カメラで画面を飛び回り自在に操る その他 ウェビナーやサイト内の動画にmmhmmやTouchCastのスパイスを！","link":"/Touch-Cast-Studio%E3%81%A7%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E4%BC%9A%E8%AD%B0-%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3-Zoom%E3%82%A6%E3%82%A7%E3%83%93%E3%83%8A%E3%83%BC%E3%82%92%E6%BC%94%E5%87%BA%E3%81%99%E3%82%8B/"},{"title":"[Spark AR] ARフィルターの作り方","text":"​Spark AR Studioというソフトを使って、ARフィルターを作る手法を解説します。 Spark AR Studioの準備 ARフィルターの作成方法 チュートリアル 作り方 ​ Spark AR Studioの準備​ 以下のサイトからPCへダウンロード Download Spark AR Studio 指示にしたがってインストールしましょう​​​ スマホで動作確認するアプリもダウンロードしておいてください App Store Google Play​​​​ARフィルターの作成方法 先ほどインストールした、以下のアプリを開きます​ まずはFacebookアカウントでログイン​ アプリを起動するとこんな感じ​チュートリアル Viewpoint カメラの視点を確認できます​​​ Simulator 右上のSimulatorでデバイスでの同さを確認可能です​​ Sidenav 左のサイドナビで、Simulatorを停止することができます​​ Scene Panel Objectを足すことができます​​ Assets Panel マテリアルやテクスチャのアセットを追加できます 下のAdd AssetsからLocal端末上に保存しているデータを読み込めました。​​ Easy build Library 100種以上の3Dオブジェクトや音源が用意されています​​ Object 設定パネル オブジェクトの設定をいじることができます​​ Test Testfileを送ってエフェクトを試すことができます ​9. Upload to Spark AR Hub - Spark ARのハブに公開することができます​​​10. ducumentation/Q&amp;A - 左下のボタンより説明資料やQ&amp;Aを行えます​​​ 作り方 チュートリアル後のHome画面はこんな感じ​ New Projectかテンプレートから開発を開始しましょう 作り方のイメージ 3Dのオブジェクトを用意する iPadのアプリでキャプチャする display.landやQuote、pronoMeshScan辺りがお勧めです。ここは別記事に纏めます。 ネットで拾ってくる Free3D Turbosquid yobi3d Artist3D.com 3D Free Dimensiva 3D Model Free.com archive3D 3Delisious 自作する場合(CGデザイナー以外) iPadで以下のアプリを使えば素人でも簡単に作れます Putty3D Sharp3D Add ObjectからPC上のデータを選んで取り込む 後はSpark AI上で編集 画像をテクスチャとして表示するときも同じような感じ​詳細な作り方は別途まとめます。","link":"/Spark-AR-AR%E3%83%95%E3%82%A3%E3%83%AB%E3%82%BF%E3%83%BC%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9/"},{"title":"[UI Bakery] NoCodeでAngularのUIをプロトタイピング(コード出力も可能なツール)","text":"モダンなWebアプリの画面をコードを書かずに開発して、ソースコードとして出力するツールについて解説します。特徴はソース自体を出力できるため、通常の開発と遜色ない柔軟性を保ったまま時短を図れることです。他のNoCodeツールと比べて、後から出力したソースに機能を追加していく前提なのでエンジニア向き。 UIBakery概要UI Bakeryとは UI Bakery NoCode(Low-Code)プロトタイピングツール WebアプリのUI(画面)をコードを書かずに開発することができるWebサービス Angularベースでソースコードを出力可能 最重要ポイント 柔軟性に優れている 他のNoCodeツールのデメリットは、”そのツールでカバーする範囲はできない”ことにある 他のサービスとの連携や高度な機能を足そうとすると、結局作り直しになる どのプラットフォームにも展開可能 他のツールの場合、”ツール内の機能でしか”Webに公開できない。大抵そこで料金がかかる アクセス数に応じて更に料金が加算される仕組みが多く、作れてもビジネスとして微妙 マネタイズの手法としては賢いと思うがあまり使いたくない 例えば、Github PagesやAWSのS3、Firebase HostingなどのPFを要件に応じて選定できる つまりインフラの知見を持つエンジニアであれば、費用を最適化してサービスを展開することができる 基本無料 大抵のNoCodeツールで目につく欠点がないように思える テンプレートが豊富で、使える物があればかなり楽に実装できます ユースケース要件定義や開発の初期段階で実際に操作可能な画面を作ることで、認識のギャップを低減することが出来ます。後の改修リスクを極力減らし、早めに機能面の実装に入ることができます。こういった実働するモデル（プロトタイプ）を早期に製作する手法およびその過程をプロトタイピングと言います。 UI Bakeryを利用したAP開発の流れ UI BakeryでUIを一日でプロトタイピング 顧客やプロジェクトオーナーに対してデモを実施 指摘や要望があれば修正を加える ここでニーズと実装のギャップを防ぐ UI BakeryよりAngularのソースコードを出力 gitなどに加える 出力したソースに機能を加えていく 使用方法アカウントを作成~ログイン UI Bakery Login 今回はGoogleアカウントでログインしてみます Confirm 質問に回答してSubmit チュートリアル画面に飛びます Stay Your Journeyから続けると基本的な操作方法が分かります 使用方法/機能解説基本的にWEBブラウザ上でログインして操作します 1. Working Area 作成中のAPの画面を確認できるスペース 2. Component Picker +ボタンを押すと、コンポーネント（簡単に言うとAngularにおける画面の構成要素の単位） 使用方法 Working Area内の任意のスペースをクリック 中に出てくるグレーの＋をクリック 追加したいコンポーネントの種類を選択 Menuや認証画面、表、Chartなどのよく使う物が用意されています めちゃくちゃ便利… コンポーネントが追加される 3. Configuration Panel 右に表示されるパネルから、コンポーネントの設定を行うことが出来ます 4. Toolbar上のバーでプレビューやソースコードの出力が可能です 真ん中のアイコン PCやモバイルなどでどのように表示されるかPreviewを確認できます Undo/Redo 戻る/進む GET CODE ここからAngularのソースコードを出力可能 UI Bakeryで素早く作ったUIを出力したコードに、自分で機能（TypeScript）を書いていく流れが良さそうです beta まだベータ版だが、API連携もできるらしい UI Bakery/Data &amp; API Connection 現時点ではUI開発のみの用途がメインだが、機能面も面倒なところを肩代わりしてくれるようになるかも 細かいところは自分でいじれるままであれば嬉しい 5. Page Management ページやレイアウトの設定を行うパネル サイドバーやナビゲーションバーもここで設定 使用方法 右上のアイコンをクリック ページの追加やレイアウト変更を実施 6. Tool Sidebar左のナビ。UI Bakeryのツールを実行できる Painter 流行りのダークテーマなどにパパッと変更できます Video アプリの紹介動画やデモに使えそう Documentation UI Bakeryの公式ドキュメントをみれます 学習方法会員登録をしたら、まずはチュートリアルをやると理解が深まると思います。他のNoCodeと比較して圧倒的に分かり易く、特にハマる場面もありませんでした。動画と説明文がセットになっている親切設計。 Projectの作成Tutorialが終わったらCreate ProjectからUIを自由にプロトタイピングしてみましょう。Angularではアプリの単位をProjectと呼びます。 Create Projectを押下 PJの名称を入力してCREATE テンプレートの選択テンプレートを使用することでデザインの手間を大幅に短縮できます。よくあるパターンは用意されているので、テンプレートをもとにアレンジを加えるくらいですむことも多いと思います。不慣れなメンバーが多いチームではこのレベルの画面を作るだけで、2,3週はかかりそう。 Previewから実際の画面を操作することも可能です Templateを実際に利用するとこんな感じ 操作が直感的なので、実際に試しながら理解を深めていける良いツールでした。私も引き続き試して、ハマるポイントがあれば追加で記事書こうと思います。API連携の機能も試してみたい。 参考 UI Bakery Academy Angularコードもダウンロードできるプロトタイプツール「UI Bakery」 UI Bakery/Data &amp; API Connection","link":"/UI-Bakery-NoCode%E3%81%A7Angular%E3%81%AEUI%E3%82%92%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0-%E3%82%B3%E3%83%BC%E3%83%89%E5%87%BA%E5%8A%9B%E3%82%82%E5%8F%AF%E8%83%BD/"},{"title":"WiresharkをMacBookに入れてネットワークトラフィックを解析する","text":"WiresharkのCLI＆GUI版をMacBookに入れて、解析&amp;シーケンス図生成するまでのメモ CLI版（Tshark）CLI版はGUI版より高速 以下からインストーラーをダウンロードして実行 Wireshark download chomodBPFインストーラを実行 以下のコマンドを実行 1brew install wireshark 動作チェック 1234567891011121314151617181920212223MacBook-Pro ~ % tshark -D1. en0 (Wi-Fi)2. p2p03. awdl04. llw05. utun06. utun17. utun28. utun39. en510. lo0 (Loopback)11. bridge0 (Thunderbolt Bridge)12. en1 (Thunderbolt 1)13. en2 (Thunderbolt 2)14. en3 (Thunderbolt 3)15. en4 (Thunderbolt 4)16. gif017. stf018. ap119. ciscodump (Cisco remote capture)20. randpkt (Random packet generator)21. sshdump (SSH remote capture)22. udpdump (UDP Listener remote capture) GUI版(Wireshark.app) 以下を実行すればOK1brew cask install wireshark 活用例 まずはネットワークトラフィックを取得する tcpdumpでトラフィックをdumpファイルとして出力する例 .pcap拡張子で保存することでWiresharkでそのまま開くことができる 以下の実行後に解析した通信を実行する1tcpdump -i ens192 -s 1024 -w tcpdump.pcap Wiresharkでトラフィックを解析 取得したファイルを開く 以下の様にトラフィックを確認できる pcapファイルからシーケンス図を作成 メニューバーの”統計” → ”フローグラフ”から以下を表示できる。PDF保存も可能 詳細は以下を見て使いながら覚えていけばOKWiresharkチートシート 参考 Wiresharkチートシート Wiresharkで見れるTCPシーケンス図 MacでWiresharkをインストールする方法(GUI &amp; CLI)","link":"/Wireshark%E3%82%92MacBook%E3%81%AB%E5%85%A5%E3%82%8C%E3%81%A6%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%83%88%E3%83%A9%E3%83%95%E3%82%A3%E3%83%83%E3%82%AF%E3%82%92%E8%A7%A3%E6%9E%90%E3%81%99%E3%82%8B/"},{"title":"[Typescript(JavaScript)] JSONデータの構文チェック ＆ エラーハンドリング","text":"WEBアプリにおいて、読み込んだJSONファイルの中身が破損していないかチェックする際のメモ。 JSONファイルを読み込むまでは以下を参照 [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) JSON構文のチェックJavascript(Typescript)においては、JSON.parse()によってチェック可能 MDN/JSON.parse() 読み込んだデータがJSON出なければ、エラーが発生する try catch構文でエラーハンドリング catch{} にエラー発生時の処理を書けば良い123456try{ JSON.parse(this.filesData[0]);} catch(e) { // ここにエラー時の処理を書く alert(&quot;JSONデータが不正です&quot;);} 参考関連記事 [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する その他 MDN/JSON.parse() Node.js でどの parse を例外処理すべきか？","link":"/Typescript-JavaScript-JSON%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E6%A7%8B%E6%96%87%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF-%EF%BC%86-%E3%82%A8%E3%83%A9%E3%83%BC%E3%83%8F%E3%83%B3%E3%83%89%E3%83%AA%E3%83%B3%E3%82%B0/"},{"title":"[SYNCROOM/NETDUETTO] YAMAHAのリモートセッションツールを試してみた","text":"先日4/6にYAMAHAより新しい遠隔合奏サービス「SYNCROOM」が発表されました。6月～のリリースに備えて、既に公開中のβ版: NET DUETを使ってみます。（仕様はほぼそのままなので慣れとくといいかも） 追記(2020/07) NETDUETTOの後継であるSYNCROOMについての記事を追加しました [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) YAMAHAの遠隔セッションサービス（SYNCROOM/NETDUETTO） SYNCROOM 6月頃より正式リリース 無料 超低遅延 0.02秒（20msec）程度らしい ZOOM等のサービスでは0.5秒以上はズレが生じます CD音質の通信 非圧縮もしくはロスレスの16bit/48kHz 参考 コロナ禍で苦しむミュージシャンの救世主となるか？ヤマハがネット越しのセッションツール、SYNCROOMをリリースする背景 NETDUETTO 上記のβ版で公開中（※2020/04時点） 無料 接続可能な人数 一つのルームに5人まで 2つのルームを繋ぐことで最大10人まで SYNCROOMとの差分 予定されている追加機能 メトロノーム機能 レコーディング機能 ユーザ登録 利用条件 デバイス PC (iPad Proでは無理でした) SYNCROOMでタブレットにも対応してくれたら嬉しいですが、当分無理そう OS macOS 10.15 Catalina以降 Windows 10(64bit) ネット回線 基本的に光回線前提 NURO光等 softbank光やDOCOMO光を利用している場合 料金変更無しで追加申請可能な回線強化の手段があるらしい（熟練者談） できれば有線LAN WiFiでもできますが、LANケーブルを刺せるPCがあるとベター WiFi 6なら無線でも大丈夫かも？ モバイルの5Gのように、WiFiも最近6世代目になり高速化しました セッティング ざっくりイメージ 機材 インターフェイス 楽器からのライン音源をPCに取り込むにはインターフェイスとPC側で読み込む為のドライバーのインストールが必要です 初級者はSteinbergの以下のどちらかでOKだと思います Steinberg UR22C：￥17000ぐらい Steinberg UR44C：￥27000ぐらい 使用しているSteinbergのURシリーズについては、別記事で初期設定の手順をまとめておきました PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] Outputの端子 ステレオ標準プラグ(楽器のシールドを刺す穴)なので、ステレオミニプラグ（イヤホンの端子）はそのままでは刺せません 安めの変換アダプタ(2個で700円程度)を買いました UGREEN ステレオミニプラグ（メス）⇒ステレオ標準プラグ（オス） 変換アダプタ 金メッキ 3.5mm ⇒ 6.35mm アンプヘッドホン変換 (2個) マルチエフェクターの中にはインターフェイス機能が付随したものもあるので、そちらで代用してもOK 有線LAN WiFiで代用可能ですが遅延します。1000円程度なので有線LANも準備しておきましょう 以下を使用しています Linkinperk CAT8 LANケーブル 2m 40Gbps 2000MHz 超高速 40Gbps 2000MHzでほぼ最速です Portは有線LANを指す穴です 家のコンセントのどれかに必ずあるので、探してみてください ここからネットワークに接続できます 機材が準備できたら、早速PCにNETDUETTOを導入してみましょう NET DUET導入手順Download YAMAHAのNETDUETTOラボから自身のPCのbit数に合わせてダウンロード SYNCROOMから64bit対応に限定されるらしいです ダウンロードしたzipファイルを開くとこんな感じ インストール インストーラーを起動 次へを押していきます インストール先 1C:\\Program Files\\Yamaha\\NETDUETTO2\\ 以下のようにインストールが始まります 数分でインストールできます 初期設定 アイコンを開きます チュートリアル画面が出てきます 次へを押すと、以下の画面がでます ”ASIOに対応したオーディオデバイスが見つかりました”と出ればOK 事前にインターフェイスの準備が必要です 今回はsteinberg ur44cからUSBでPCに接続しています 別記事で解説します 入力の設定 遅延が無いかモニタリングできます バッファサイズの設定 コントロールパネルを押すと自分が利用しているインターフェイスに応じたドライバの設定が出てきます ”Input Latency”を見ながら遅延が低くなるよう設定してみました ニックネームとアイコンを設定 以上で完了です 使い方使い方はシンプルです 機材をセッティング インターフェイスや楽器をPCに繋いでおきます 適当に楽器を弾いて、”インプット”から出力を確認しましょう ここに出てこない場合はインターフェイスのドライバーが入っていないかもしれません ルームに集まる(↓のどちらか) ルームを作る 他人が作ったルームに入る ルームは以下のように表示されます セッション画面 詳細表示を押すと、各メンバの通信状況や遅延状況を確認可能です Twitter連携 “Twitter連携”を押すと以下のようにウィンドウが出ます 認証 出てきたPINコードを入力 アイコンとユーザ名が出ます 追記(2020/07) NETDUETTOの後継であるSYNCROOMについての記事を追加しました [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) 関連記事 [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) PCでDTM環境を構築 [Steinberg-UR44C-Cubase-ai] iPad ProでDTM環境を構築","link":"/YAMAHA%E3%81%AE%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%84%E3%83%BC%E3%83%ABSYNCROOM%E3%81%AE%E3%83%99%E3%83%BC%E3%82%BF%E7%89%88%EF%BC%9ANETDUET%E3%82%92%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F/"},{"title":"[AR.js x A-Frame] WebAR入門～マーカーベースで3Dオブジェクトを表示するAPを開発する～","text":"AR機能を持つWEBアプリの作り方を解説します。今回はAR.jsとA-Frameいうフレームワークを活用して、特定のマーカーの上に3Dオブジェクトを表示するImage Tracking型のARを作ります。30m程度で楽にできました。CGデザイナーや駆け出しエンジニアでも簡単にできると思います。 基礎知識 WebARとは A-FRAME AR.js ARのタイプ その他 実装手順 3Dデータを用意する AR.jsをhtmlで利用 各ファイルを同一ディレクトリにまとめる APを公開 Netlifyで公開 その他の手法で公開 動作確認/作成したAPの使い方 カスタマイズしてみる マーカーを変更 3Dデータを変更する 必要なデータ 3Dデータを用意する手段 参考 関連記事 AR Hosting その他 基礎知識WebARの概要と主な技術ついてです。すぐに実装に入りたい人は飛ばしてOK WebARとは AR(拡張現実)をWebブラウザ上で実現する技術 ユーザーはアプリのインストールが不要で手軽 近年様々なサイトで使われ始めています Ex.) ECサイトのサンプル表示、観光地の城の表示、バンドのCDジャケットの上にメンバーを表示.. WebARの種類 マーカーベース 特定の画像(マーカー)の上に3モデルを表示 ロケーションベース 特定の場所に3Dモデルを表示 WebARを実現する主な手段 A-FRAME AR.js model-viewer WebXR Device API 8th wall 今回利用するJavaScripライブラリ/フレームワーク A-FRAME AR.js A-FRAME Mozilla開発の3D VR 空間構築のWebVRフレームワーク インタラクティブな3D動きを表現可能 特定のオブジェクトのタッチで動くアクション、機能まで作れる これ単体ではARにはならない AR.js AR.js Documentation ARをWebで実現するライブラリ A-Frameで表現した３Dの動きをこれでAR化するイメージ 10行程度の記述で手軽にARの実装が可能 .obj形式のデータを用意すれば簡単に出せます 調べた限りでは、これが一番主流 ベースはthree.jsとjsartoolkit5 ARのタイプ マーカーベース 特定のマーカーがカメラに映った際に、その上に表示する 使用例 拡張アート、学習（拡張書籍）、拡張チラシ、広告… 画像ベース(ImageTracking) 特定の画像の上に表示 マーカーベースとほぼ仕組みは同じ 安定性はマーカーの方が高い ロケーションベース マーカー無しで特定の場所に表示（ポケモンGOとかのイメージ） 最近のアップデートで対応しました 使用例 3Dマップ、ゲーム、観光… こちらは別記事で解説します その他 model-viewer モバイルのブラウザからWebARを閲覧可能にするWebコンポーネント インタラクティブなボタンは追加できない アニメーションも表示可能 WebXR Device API インタラクティブな要素を追加可能 WebARを実現するJavaScriptライブラをゴリゴリ書ける人向け Chrome ブラウザのバージョン79以降で利用可能 8th Wall ARのプラットフォームサービス その他モバイルのARに使われるもの ARKit ARCore 実装手順簡素なサンプルAPを作って公開するまで 適当なディレクトリを作成 ar-test 3Dデータを用意する .obj形式３Dデータを用意して、上記のhtmlから参照させます ※mtl(マテリアルデータ)までセットで必要 今回はネットで無料のデータを拾います 以下のサイトから拾います(他の方法は後述) Free3D 今回は猫を表示します 無料のデータと有料のデータがあります Freeの茶虎を選択 AR.jsで利用可能なデータ形式か注意 .objはAR表示可能です ダウンロード ダウンロードしたZipファイルを展開 .objファイルと.mtlファイルの両方が必要です ARで表示するデータの準備は以上でOK AR.jsをhtmlで利用 適当なディレクトリを作成 ar-test 上記のディレクトリの中にファイルを作成 index.html index.htmlを編集 123456789101112131415161718192021222324252627282930&lt;!doctype HTML&gt;&lt;html&gt;&lt;!-- A-Frame ライブラリの読み込み --&gt;&lt;script src=&quot;https://aframe.io/releases/1.0.0/aframe.min.js&quot;&gt;&lt;/script&gt;&lt;!-- AR.js ライブラリの読み込み --&gt;&lt;script src=&quot;https://cdn.rawgit.com/jeromeetienne/AR.js/2.2.0/aframe/build/aframe-ar.js&quot;&gt;&lt;/script&gt;&lt;body style='margin:0px; overflow:hidden;'&gt;&lt;!-- こっからA-Frame --&gt;&lt;a-scene embedded arjs&gt;&lt;!--=&quot;debugUIEnabled:false;trackingMethod:best;&quot; vr-mode-ui=&quot;enabled: false&quot;---&gt; &lt;!-- こっからARの世界。マーカー上になにを展開するかを書く --&gt; &lt;a-marker preset=&quot;hiro&quot;&gt; &lt;!--objファイル: 形 mtlファイル: 表面 mtlなしでは透明になってしまう---&gt; &lt;a-entity obj-model=&quot;obj: url(obj/12221_Cat_v1_l3.obj); mtl: url(obj/12221_Cat_v1_l3.mtl)&quot; scale=&quot;0.02 0.02 0.02&quot; rotation=&quot;-90 0 0&quot; &gt; &lt;/a-entity&gt; &lt;!--scale:サイズ rotation: 角度 -90??--&gt; &lt;a-text value=&quot;Cat AR by J&quot; position=&quot;0 0.8 0&quot; align=&quot;center&quot;&gt;&lt;/a-text&gt; &lt;/a-marker&gt; &lt;!-- arなのでカメラが必要 --&gt; &lt;a-entity camera&gt;&lt;/a-entity&gt;&lt;/a-scene&gt;&lt;!-- ここまででA-Frameおわり --&gt;&lt;/body&gt;&lt;/html&gt; このhtmlファイルでは、以下のようなWEBページを定義している アクセスするとカメラが起動 a-markerで指定したマーカーをカメラに写った際にAR.jsの機能が起動 a-entityで指定したオブジェクトをARとして表示 a-textで空中に文字を表示 各ファイルを同一ディレクトリにまとめる.objファイルと.mtlファイルをまとめる AR.jsはhtmlで参照する3Dデータの相対パスを指定してARを表示します ディレクトリを作成 手動でもOK1mkdir &quot;ar-test&quot; ディレクトリにindex.htmlと３Dデータをコピー 以下のようにまとめる 3Dデータはobjというフォルダにまとめる APを公開作成したAPを公開して、ブラウザから確認してみましょう。先ほど作成したindex.htmlとそこから参照する3Dモデルのデータをまとめてアップします。公開先は以下のどれでもOK Netlifyで公開 Netlify Drop 手軽な無料のホスティングサービス githubのアカウントがあれば、ソースのディレクトリをドラッグ＆ドロップするだけ アカウントを作成 GithubのアカウントやEmailで登録できます ログインするとこんな感じ 先ほど作成したディレクトリ（ar-test）をここにドラッグするだけでAPを公開できます その他の手法で公開それぞれ別記事で解説しているので今回は割愛します。Netlifyは簡易的なものなので、ちゃんと公開するのであれば、何れかがいいと思います。 Github Pages [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 AWS S3 [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 Firebase Hosting Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) 動作確認/作成したAPの使い方今回はマーカーの上に3モデルを表示する形式なので、マーカーは事前に印刷しておきましょうディスプレイ表示できる機器がスマホと別であればそれでもOK 公開したURLにアクセスすると、APが起動してカメラへのアクセス許可を求められます Agree APが起動した状態でマーカーをカメラに写すと、3Dモデルが表示されます マーカー全体がカメラに収まらないと表示されません 実際に公開したAPがこちら https://xenodochial-cray-e209cf.netlify.app/ アクセスするとカメラが起動します マーカーを画角に収めると猫が現れます カスタマイズしてみるマーカーを変更自力でマーカーをいじろうとするとかなり専門的な知識を要求されますが、以下のジェネレーターで簡単にを作成できました AR.js marker generater “Upload”から好きな画像を取り込めます ここで例えば、CDのジャケットを画像とし取り込めば 3Dデータを変更する必要なデータ .obj形式３Dデータ ※mtl(マテリアルデータ)までセットで必要です 3Dデータを用意する手段以下の手段があります ネットで無料のデータを拾う 以下の様なサイトに沢山落ちてます Free3D iPadでキャプチャーする 別記事で解説しています お勧めのアプリは以下 display.land 3D Scanner App Capture 自作する CGデザイナー向けの手法 私はCGデザイナーではありませんが、素人でもiPadのお絵描きアプリやCADで簡単なものは作れました。 AR.jsが対応可能な形式でデータを出力できるアプリであればどれでも使えます 参考関連記事AR [AR.js Studio] NoCodeでWebARをGithub Pagesに公開する [Spark AR] ARフィルターの作り方 iPadで3Dデータをキャプチャする手法 [display.land] Hosting [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) その他 AR.js Documentation AR.js A-Frame poly Netrify Three.js WebARの概要と実装方法（AR.js） マーカーレス WebARの現状をまとめました ～アプリレスのブラウザAR～ 簡単爆速AR！(webAR) A-FrameとAR.jsで超簡単AR（PC・スマホ・マルチマーカー対応","link":"/ar-js-x-a-frame-WebAR%E5%85%A5%E9%96%80/"},{"title":"draw.ioをVSCode上で使用/図表をGitで一元管理","text":"描画ツールのdraw.ioをVSCodeの拡張機能で利用可能にして、データをgitで一括管理する方法を解説します。draw.io以外の描画ツールについては以下にまとめてあります 描画ツールまとめ [draw.io/Cloud Craft/Mind Node/plantUML] 1. 概要 1.1. draw.ioとは 1.2. VSCodeの拡張機能 2. 使用方法 2.1. 拡張機能をInstall 2.2. ファイルを生成 2.3. 図表を編集 2.4. Markdwonから参照 関連記事 1. 概要1.1. draw.ioとは draw.io WEBブラウザベースの描画ツール Googleアカウントで運用でき、ローカル/Google Drive/Github等にデータを保存可能 大抵の図(ex. フロー, システム構成…)はこれで作成可能です 完成したらpng形式で出力して、markdownやpptに差し込むのが一般的 テンプレートの例 FlowChartやクラス図 Cloudのアーキテクチャ WEBで利用する際の問題 共同開発時の管理の煩雑さ あるメンバが作った図を、別メンバが編集できない レビュー、修正が面倒 gitでAPのコードと一緒に一括管理できない セキュリティ 制約の厳しいPJであれば、ツール自体を使えないことが多い 上記の問題を解決するために、ローカル版を利用します 1.2. VSCodeの拡張機能 VS Code用のプラグインがあり、フルの機能を端末上で利用可能です Draw.io VS Code Integration 拡張子を.drawio.svgにしてファイル作成すると、Draw.ioに関連付けられ、svg形式のファイルを作画＆作成可能 ファイルを開くだけでDraw.ioの編集画面VSCode内に立ち上がる メリット SVG形式 gitで管理可能 共同編集、差分管理が用意 読み込みがpng等と比較して高速 セキュリティ上の制約をクリア mdファイルには以下のようにパス参照で埋め込む(HTMLからimgタグで参照してもOK)1![](img/image1.drawio.svg) 2. 使用方法2.1. 拡張機能をInstall Draw.io IntegrationをInstall VSCodeの左のサイドナビよりExtensionsアイコンを選択（or Ctrl+Shift+X） Draw.ioで検索 アイコン横のInstallボタンを選択 Installすると以下の様な説明ページを確認出来ると思います 2.2. ファイルを生成 .draw.io.svg形式のファイルを生成 markdownのドキュメントと同じディレクトリに配置（後でパス参照するため）1touch sample.drawio.svg 2.3. 図表を編集sample.drawio.svgを開くと自動的にDraw.ioの編集画面が開きます WEBのDraw.ioと同様に編集 VSCodeのタブの一つで編集できるのが中々便利 Ctrl+S等で保存 Exportの必要はありません 2.4. Markdwonから参照 相対パスで先ほどのsvgファイルを参照 以下で表示された1![](./sample.drawio.svg) プレビューの様子 先ほど編集した図が出ます 後はGitにまとめて送れば、他メンバも同様に編集できます 関連記事 描画ツールまとめ [draw.io/Cloud Craft/Mind Node/plantUML] VSCode上のマークダウン とDraw.ioでドキュメントを作成する","link":"/draw-io%E3%82%92VSCode%E4%B8%8A%E3%81%A7%E4%BD%BF%E7%94%A8-%E5%9B%B3%E8%A1%A8%E3%82%92Git%E3%81%A7%E4%B8%80%E5%85%83%E7%AE%A1%E7%90%86/"},{"title":"cloud9による共同編集・リモート開発","text":"こんにちは。最近ウィルス対策の影響でテレワークの利用が広がっているようです。IT界隈の方達は慣れているとは思いますが、「トラシューやコードレビュー、ペアプロ等は対面でないと困る」という声をちらほら聞きます。新入社員が先輩に横で教えてもらうためにわざわざ出社するケースもあるようです。そこで、今回は開発の遠隔・同時編集を可能にするTipsを紹介します。利用するのはAWSのブラウザ型IDEであるcloud9のワークスペース共有機能です。 前提知識 cloud9のワークスペース共有機能 画像の様に複数メンバでエディタ＆CLIを同時に遠隔操作できます 右側のタブに参加メンバが表示されます 初期設定だけ完了すれば、ブラウザでURLを共有してログインしてもらうだけです テレワーク時に「ちょっとここが分からないので、アドバイスを頂けますか？」と開発環境に入ってもらうと助けてもらいやすいです 直接コードやコマンドを書き込んでもらうこともできます Slack等のチャットだけでコードの話をするのは実際辛いです 開発チームを監督する側も状況を理解しやすく、皆が幸せになれます 対抗：VSCode LiveShare Microsoftのエディターでもプラグインによって似たようなことができます 個人的な使用感としては以下の差異があります 自分のLocal環境を共有 APを起動すると恐ろしく重くなり、落ちてしまうことも… 各メンバ全員がプラグインを設定する必要があり、手間取る ホスト側が参加メンバ毎に権限付与する工程が毎回ある VSCodeの豊富なプラグインが必要なケースもあるので、私は場合によって使い分けています。個人の好みにもよると思います。 前提条件 AWSアカウントを作成済み or 作成可能 cloud9 開発環境を作成済み 公式ドキュメントを参考にしてください AWS Cloud9 で 環境 を作成する 読者は以下を想定 開発環境のオーナー IAMユーザの作成権限を持つ cloud9環境共有手順 以下の二点が必要です AWSのIAM Userの作成 Cloud9への参加メンバの登録 右上の”Share”を押下 共有機能の設定画面が出ます Cloud9への参加メンバの登録 共有機能の設定画面の”Invite Members”にIAM User名を入力 タブで権限を設定 R: Readのみ RW: Read &amp; Write まだ未作成の場合は”create a new user”よりAWS Consoleに飛びましょう IAMユーザの追加 ★cloud9で共同編集したいだけのメンバ向けの権限についてです。最小権限の原則に従いましょう アクセス許可の設定の”既存のポリシーを直接アタッチ”を選択 検索欄に”cloud9”と打つ AWSCloud9EnvironmentMemberを選択・付与 まとめ 以上で複数メンバでの共同編集ができます。テレワークにおける情報伝達のもどかしさを解消して気持ちよく開発しましょう。ハンズオン研修・学習用途にも便利だと思います。 関連記事 cloud9 x Angular x FirebaseでWEB AP開発 画像ファイルD:\\Users\\0000011349117\\Desktop\\memo_article\\cloud9member 補足：Angular開発環境の構築手順(cloud9) 以下を実行するだけでOKです12npm install @angular/.....ng add @angular/material 自動で入るとは思いますが、もし利用中にCDKがないというエラーが出たら以下も実行してください1$ ng add @angular/CDK","link":"/cloud9%E3%81%AB%E3%82%88%E3%82%8B%E5%85%B1%E5%90%8C%E7%B7%A8%E9%9B%86%E3%83%BB%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E9%96%8B%E7%99%BA/"},{"title":"[Github入門] branchをLocalで生成～Remoteに反映","text":"基礎知識 手順 Trouble Shooting 基礎知識 branch(ブランチ)とは 履歴の流れを分岐して記録していくためのもの 直訳すると枝/分岐 なぜ必要か？ githubで開発する際には、リポジトリの中のソースコードを弄っていくわけですが、複数のメンバがいる場合には、同時進行になります。そこで、各メンバ毎にbranchという単位で作業場所を枝分かれさせる必要があります 分岐したbranchの中身は後で合流(merge)させることができます 開発メンバ毎にbranchを作成するのが一般的です 複数人での分散開発のざっくりイメージ メンバ毎のbranchで開発 担当範囲の開発完了後にレビュー(Pull Request)を経て、各branchで編集した内容を合わせる(merge) 各メンバの編集内容をmergeした完成版をmaster branchに置く 手順 branchの生成 1git branch &lt;branch-name&gt; branchが作成されたことを確認 下記のコマンドでbranch一覧を確認可能1git branch -a *がついているのがカレントブランチ(今いるbranch) VSCodeの場合赤字で表示されるbranch(remotes/origin/…)がremote上(Github上)のbranch 先ほど作成したbranchはLocalにはあるが、remoteにはまだ存在しないことが分かる branch間の移動 1git checkout &lt;branch-name&gt; remoteにLocalのbranchを反映 1git push origin &lt;branch-name&gt; remote側にもbranchができたか確認 赤字で”remotes/origin/branch-name”が表示されればOK1git branch -a 以降の作業はgit checkoutでbranchを移動しながら行います branch間の変更内容を合わせる際には以下の学習も必要です git mergeやgit rebase等のコマンド Pull Request そのうちまとめます Trouble Shooting 誤って生成したbranchの削除1git branch -d &lt;branchname&gt;","link":"/github-branch%E3%82%92Local%E3%81%A7%E7%94%9F%E6%88%90%EF%BD%9ERemote%E3%81%AB%E5%8F%8D%E6%98%A0/"},{"title":"iPhone/iPadのRPAツール『ショートカット』でサボりを防止する","text":"サボりを防止するために、勉強と関係の無いアプリを開いたら自動的に叱られるようにしてみました。ネタ記事ですが、Appleのショートカットアプリはかなり応用が効く便利ツールなので覚えておいて損はないです。 海外版松岡修造として著名なシャイア・ラブーフさんに叱られます 基礎知識 手順 まとめ/応用例 IT界隈の方向けの応用例 関連記事 基礎知識 RPA (Robotic Process Automation) 定型的な事務作業をSoftware型のロボットが自動化する概念 昨今の働き方改革ブームの文脈でバズワードになりがち 直感的に利用可能なサービスが沢山出ているので、使えないとまずいです ショートカット Apple純正のRPAアプリ このアイコンのAppです 導入の手間が無い iPhoneやiPadなら元から入っているため 特に課金要素は無いので利用しないのはもったいないです RPA入門者向け これを使えない人が仕事でPC用のRPAツールを使うのは無理です 直感的に使えるショートカットで慣れておきましょう Siriからも実行可能 できる幅が広いので、使いこなせば大抵の作業を一言で完了できます 手順 ショートカットアプリを開く 画面下部の”オートメーション”を選択 画面右上の＋マークを選択 ”個人用オートメーションを作成”を戦t買う ”ショートカットを作成”を選択 ここから以下のように設定します トリガー ”Appを開く” アクション URLを開く 下にスワイプして”Appを開く”を選択 “Appを選択”画面で作業を邪魔するアプリを選択 今回はTwitterを登録してみます 次へ アクションの設定画面に飛びます ”アクションを追加”を選択 ”WEB” ⇒ ”URLを開く” を選択 青字の”URL”にyoutubeのURLを指定 Do itおじさん動画のURL https://www.youtube.com/watch?v=nwW4CDGucVs 別の動画にも応用可能です ”実行前に尋ねる”を無効化 完了 以上で適用されます テスト Twitterを開いてみましょう 画面上部にオートメーションを実行と表示され、Do itおじさんの動画に強制的に飛ばされます 解除方法 オートメーションを編集 “このオートメーションを有効”の横のタブを無効化すればOK 試験前にアプリをわざわざ消すより手軽に対策できます まとめ/応用例 今回は”指定したURLを開く”という最も基本的な機能を利用しました ショートカットはもっと複雑なことも沢山出来るので是非試してみてください 例 位置情報をTriggerとした操作 外出時に自動で予定表に入れた目的地への経路案内を表示 時間をTriggerとした操作 タイマーを設定した時間に、IoT家電を操作 カーテンの開閉 電気を点灯 IT界隈の方向けの応用例 最近は手軽にAPI連携を確立できるサービスがいくらでもあるので簡単に応用できます 例 IFTTTとの連携 This(Trigger)とThat(Action)を定めることで簡単に400種類以上のサービスとの連携を可能にするクラウドサービス TriggerにWebhookを定めると所定のURLに対するリクエストだけで動く仕組みを作れます つまり、ショートカットからIFTTTのURL宛にリクエストを送るだけで様々なサービスを動かせます FaaS (Function as a Service)と連携 AWS LambdaやGoogle Functions辺りをキックして動かせば大抵のシステムと連携可能です 関連記事 [無料RPA] Windows Power Automate インストール~Webの自動操作 iPad ProでWEB AP開発 &amp; RPA 同じ要領で開発にも応用しています","link":"/iPhone-iPad%E3%81%AERPA%E3%83%84%E3%83%BC%E3%83%AB%E3%80%8E%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88%E3%80%8F%E3%81%A7%E3%82%B5%E3%83%9C%E3%82%8A%E3%82%92%E9%98%B2%E6%AD%A2%E3%81%99%E3%82%8B/"},{"title":"git merge & コンフリクトの解消（複数名の編集内容を集約）","text":"Githubで初級者がハマりがちなポイントについてです。複数メンバの編集内容をGitで効率的にまとめる手法を解説します。 基礎知識 githubの分散開発 git mergeとは 手順 merge コンフリクトの解消 基礎知識githubの分散開発 基本的な進め方 開発メンバ数のbranchを作成 別々のbranchを各メンバが編集 作業完了後にmerge ※本記事で解説する内容 git mergeとは githubのコマンド 機能 複数branchのmerge つまり各メンバの編集内容を反映して合わせることができます メリット 差分の可視化 githubであれば、編集箇所がマーカーで表示されます 編集日時・編集者も一目で判別可能 目視でソースの変化を比較するにはすさまじい労力を伴います 変更の反映・集約の自動化 わざわざコピペする手間を削減可能 複数名が別々の編集をしたファイル 開くと各メンバの変更箇所が並んで表示されます ボタン一つでどれを採用するか決定可能です ※詳細は手順内で説明 mergeの楽さと過去の改修内容を時系列で遡れることが、gitを活用して分散開発を行う主な理由です 手順 他人が編集していた別branchの変更内容を、自分のLocal端末上でmergeするまでを書きます merge リモートから別branchを取得 Localに未登録であれば実行(git branch -aで別branchが出ない場合)1git fetch 追加されていることを確認1git branch -a branchへ移動して内容を確認1git checkout &lt;branch-name&gt; 元のbranchに戻る1git checkout master ※Commitが未実行のファイルが無いか確認 そのままmergeすると変更の取り込みが漏れてしまうため 以下のように出ればOK123456git statusOn branch masterYour branch is up to date with 'origin/master'.nothing to commit, working tree clean merge1git merge &lt;branch-name&gt; 別々のファイルを改修していた場合は、以上で完了です merge実行時に”CONFLICT”が出力されれば、次の処理も必要です コンフリクトの解消 コンフリクトとは 編集内容の衝突のこと それぞれのbranchで同じファイルを編集していた際に発生する どちらの編集内容を採用するか決める必要がある1CONFLICT (content): Merge conflict in &lt;conflict-file&gt; コンフリクトの解消方法 上記のコンフリクトが発生した各ファイルを開く VS Codeの場合 コンフリクト箇所をマーカー表示 緑のマーカー 以下から始まる箇所1&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD (Current Change) 現在のbranch側の編集内容 青マーカー 以下から始まる箇所 1&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name (Incoming Change) 現在のbranchにmergeしようとしているbranch側の編集内容 マーカー上部に表示されるメニュー Accept Current Change Accept Incoming Change Accept Both Changes Comppare マーカー表示箇所のどちらを採用するか決定 方法は二つ マーカー上部のメニューから選択 例：Accept Current Changeを選択 Current branchの内容(緑マーカー)が採用され、Incoming branch(青マーカー)の内容が消去されます つまり、差分を一目で確認して、一押しで取捨選択可能です 要らない方のマーキング箇所を手動で消去 ファイルの編集後 addまでしてコンフリクトが解消された状態になります1git add &lt;conflict-file&gt; 確認 赤字でコンフリクト中のファイルが表示されなければOK1git status Remoteに登録 12git commitgit push 今回の解説は以上です。pull, commit, push等のgitの基礎と今回の内容を覚えれば、一先ずチームで分散開発を始めることができると思います。ここで手間取ると初動からPJが遅延するので、未修得のメンバがいれば放置せずに教えてあげましょう。細かい機能は使わないものも多いので、走りながら必要に応じて覚えていけば大丈夫です。","link":"/git-merge-%E3%82%B3%E3%83%B3%E3%83%95%E3%83%AA%E3%82%AF%E3%83%88%E3%81%AE%E8%A7%A3%E6%B6%88%EF%BC%88%E8%A4%87%E6%95%B0%E5%90%8D%E3%81%AE%E7%B7%A8%E9%9B%86%E5%86%85%E5%AE%B9%E3%82%92%E9%9B%86%E7%B4%84%EF%BC%89/"},{"title":"git複数アカウントの使い分け設定","text":"社内開発/他社との共同開発/個人開発等でgitのアカウントを使い分けたい人向けのメモ gitアカウント情報の設定方法 メインアカウントの設定 global(~/.gitconfig)に設定 サブアカウントの設定 リポジトリ内の./.git/configに設定 参考 関連記事 その他 gitアカウント情報の設定方法端末上のLocalリポジトリとgit上のRemoteリポジトリ間でデータをやり取りするには以下の情報が必要です gitの認証に必要な情報 gitのユーザ名 登録したメールアドレス 上記の情報の設定方法は以下の二種があり、利用頻度によって使い分けるのが一般的です git認証情報の設定方法 グローバル変数として設定 メインのアカウントを登録 リポジトリ毎の設定が無い場合には、ここに設定した情報が使われる リポジトリ毎の設定 サブのアカウントを登録 設定したリポジトリ内でのみ影響 メインアカウントの設定global(~/.gitconfig)に設定業務で良く使うアカウントは、globalに設定する git config –globalで設定12$ git config --global user.name &quot;account-name&quot;$ git config --global user.email &quot;account-mailaddress&quot; 確認12345$ cat ~/.gitconfig[user] name = account-name email = account-mailaddress サブアカウントの設定サブのアカウントは、リポジトリ単位でアカウント情報を設定する リポジトリ内の./.git/configに設定 git config –localで設定 123cd repositorygit config --local user.name &quot;subaccount-name&quot;git config --local user.email &quot;subaccount-mailaddress&quot; ./.git/configを確認 12345repository&gt; cat ./.git/config[user] name = subaccount-name email = subaccount-mailaddress git logで確認 それぞれのアカウントでgit commitsした後にgit logで反映されているか確認可能 サブアカウントを登録したリポジトリ以外はメインアカウントの情報が出るはず12345git logcommit XXXXXXXXXXXXXAuthor: subaccount-name &lt;subaccount-mailaddress&gt;Date: Xxx Xxx 00 00:00:00 2020 +0000 参考関連記事 [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 Github入門 ～入社初日の完全な素人でも分かる優しい解説～ [Github入門] branchをLocalで生成～Remoteに反映 git merge &amp; コンフリクトの解消（複数名の編集内容を集約） Github x Teams Webhook/Notificationによる連携方法 Github.comからGithubEnterpriseへの移行手順 その他 同一環境上で複数のGitアカウントを切り替えるための1アイデア","link":"/git%E8%A4%87%E6%95%B0%E3%82%A2%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88%E3%81%AE%E4%BD%BF%E3%81%84%E5%88%86%E3%81%91%E8%A8%AD%E5%AE%9A/"},{"title":"iPadで3Dデータをキャプチャする手法 [display.land]","text":"iPad Pro 2020にはレンズx3とToFセンサーがついており、3Dデータをキャプチャすることができます。近年クオリティの高いアプリが沢山出てきたので一通り試してみました。 今回試したアプリ display.land Qlone pronoMeshScan ScandyPro 関連 今回試したアプリ display.land Qlone pronoMeshScan RestAR ScandyPro display.land 室内でも、街中でも空間ごと切り取ることができる近未来的なアプリ 色付きで取得できるのが強い 使用方法は動画にまとめました Qlone Qlone 小さい物体のキャプチャであれば、これが一番 キャプチャしたデータを保存する度に料金が発生するのは微妙 撮影にはQlone Mat(以下)が必要なので、大きいものは無理 pronoMeshScan データは取れるが、精度は微妙。机の様なシンプルな形状で得あれば問題なし ScandyPro Scandy Pro 顔のキャプチャーに特化したアプリ キャプチャーされたおじさん 関連 youtube [Spark AR] ARフィルターの作り方","link":"/iPad%E3%81%A73D%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E3%82%AD%E3%83%A3%E3%83%97%E3%83%81%E3%83%A3%E3%81%99%E3%82%8B%E6%89%8B%E6%B3%95-display-land/"},{"title":"iPad Pro (第4世代)でDTM環境を構築","text":"こんにちは。先日、新しいiPad 2020(第４世代)を購入しました。発売当日に受け取り、即DTM環境を作ってみました（たぶん世界最速）Alexaにより、セッティングも自動化しました。シンプルな構成なので、入門者の方も良かったら参考にしてみてください。結論から言うと、PC無しでも問題無く宅録できました。 リモートセッションをやろうとするとPCが必要です。その辺りは以下を参考にどうぞ [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] 1. 機材解説 Audio Interface Cubaseのセットアップ手順 iPad Pro 2020（第4世代） Hub Bluetoothスピーカー＆イヤホン＆カメラ WEBカメラ アンプ 全体像 2. AlexaでSettingを自動化 定型アクション 解説 3. その他のもろもろ リモートセッション モニター部分をプロジェクターに変更 AWS Componserの導入 まとめ 関連記事 1. 機材解説Audio Interface Steinberg USB3.0 UR44Cを採用しました 採用ポイント USB 3.0（USB Type-C）対応 タブレットで済ませるにはUSB Cが必要です ジャック×4 ＆ マイクプリアンプx4 複数人の楽器とマイクを繋いで、イヤホンジャック or Bluetoothで出力すれば、サイレントセッションもできます 価格 3万円ちょっとで手頃 今回の条件に当てはまる中で最安でした 他は5万以上 更にジャックを増やしたければ、予算を上げるしかないと思います ジャック×２で構わなければ以下がお勧めです スタインバーグ Steinberg USB3.0 オーディオインターフェイス UR22C ios版のCubaseが付随 Cubase 初級者でも扱いやすい有名な音楽制作ソフトでプロも使っています こういった機能が豊富なDAWソフトは宅録に必須です 無料 本来は購入する必要があります セットアップが楽 Apple StoreでinstallしてUSB-Cケーブルで繋げるだけ 実は今回のハードとCubaseは、どちらもSteinburg社が開発しているので相性が良いです ループバック機能により、動画配信も可能 Cubaseのセットアップ手順 Cubasis LE2をApp Storeからinstall アプリを起動 ”To unlock a Cubasis LE features…”と表示されます 解除方法は以下の二つです 料金を支払う 対象製品と接続する この対象製品がSteinberg USB3.0 UR44Cです USB-Cケーブルで接続(iPadについていた純正品を使いました) unlock完了 以下のように表示されれば連携完了です Cubaseを初めてすぐに適当にパッドを使って打ち込んでみました（意外とそれっぽくなって楽しい） iPad Pro 2020（第4世代） 12.9インチモデルを採用しました 採用ポイント USB C対応 USB C対応のInterfaceに簡単に繋げます メモリが6Gに増強 音源編集にはある程度パワーが欲しい トラックパッド・マウスに対応 Bluetoothマウス等でPCライクな作業が可能に 出力方法にBluetoothを選択可能 値下げ iPad Pro第三世代登場時よりもだいぶ安いです コスパ重視の方は11インチにすると少し安いです Hub USB-C Hubを付けました 以下のような入出力を実現するために採用してます 入力 USB-C 出力 HDMI モニター イヤホンジャック 音声確認 Bluetooth モニター、プロジェクター、スピーカーとの連携 QGeeM USB-C Hub より強めのHubが欲しければこちらもおすすめです(こちらはMacbook用に購入したのですが、iPadにも使えました) Bluetoothスピーカー＆イヤホン＆カメラ WF1000XM-3 立って弾く際にコードが引っかかるのが面倒で、結局生音でしかやらない節があったため採用 専用アプリから細かくイコライザーを弄れて楽しい Bluetoothのノイキャンイヤホンの中で最も音質が良い(2020/03 時点) スケールアップ技術で、音質を勝手に上げてくれる SRS-XB32 価格が手頃で低音の出が良い これの一つ上のサイズは音量重視で音がこもり気味（Sonyの店員さん談） 複数個を連携させて、別の音を振れる 自分を囲むように配置して、音に包まれてみたかったので使ってます ジャックもさせます 防水なのでお風呂でも聞ける WEBカメラ 録画・配信用にクリップ型のカメラを繋げています オススメ Webカメラ HD1080P 30FPS広角 アンプ Fender信者なので、Fenderのベースアンプを使っています でかくてかっこいいので40Wを購入したものの、近所迷惑になるので音量最低でもライン以外では音出しできないです 全体像 モニターに写すとこんな感じ(追記：今はもう少し整理しています) プロジェクターにミラーリングするとこんな感じ 120インチでかい 2. AlexaでSettingを自動化 せっかくDTM環境を作っても、セッティングの手間でやる気が失せそうなので自動化しました。 機材が増えるほど効果を発揮してくると思います 定型アクションAlexaに「DTM」と言うと、実行される”定型アクション”を設定します Trigger 音声：「DTM」 Action スマート電源タップAをON/OFF Bassアンプを接続 スマート電源タップBをON/OFF エフェクターを接続 スマートリモコンを起動 Monitorのリモコンの電源ボタンを登録 プロジェクターの電源をON 解説 スマートスピーカー 画面付きのEcho Showを採用 Smart電源タップ 電源のON/OFFで操作する機器であれば基本これでOKです 一通り試したことがありますが、一番コスパがいいのは各穴を制御できるMeross スマート電源タップです Smartリモコン 赤外線リモコンで動くものであれば、Smartリモコンに記憶させて、Alexaから実行できます 大量のリモコンを纏められるのですっきりします 私はNature Remo miniを使っています 人感センサーまでついているので、勝手にON/OFFさせることもできます 3. その他のもろもろリモートセッション ネットを介してセッションできるサービスがあります 手段 YAMAHA NETDUETTO ヤマハの遠隔合奏サービスです 無料でmacOS, Windows10, Androidに対応しています（Androidに対応ということはそのうちiOSにも対応しそう…） 以下の記事で解説してます [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) このサービスを利用する場合は、PCで環境を作らないとダメでした PCでDTM環境を構築 Steinberg UR44C/Cubase ai JamBlaster 米国のスタートアップが最近開発したハードです スマホベースでネットと繋ぐらしい。詳しくは調査中 こちらであれば、iPadでのそのうち使えるようになりそう モニター部分をプロジェクターに変更 iPadはBluetoothによって画面をミラーリングすることもできます。プロジェクターにはPopin Aladdinを使っています ミラーリングするとこんな感じで、壁一面にCubasisが映ります 120インチあると立って弾きながらでも見えて楽しいです 採用理由 照明と一体型のプロジェクター 省スペースで部屋を暗くする手間も省けます iPad, Macbook, iPhoneからのミラーリング、画面拡張 赤外線リモコンが付随しているので、スマートリモコン経由でAlexaから動かせる 詳しくは以下の記事にまとめています popIn Aladdin2 レビュー 照明型プロジェクター 使用感/専用アプリ/投影サイズ/Alexa連携/設置方法 AWS Componserの導入仕事でAWS(クラウドサービス)をよく使っているのですが、去年機械学習用のキーボードが発表され、ずっと気になっています。 AWS Composerとは 弾いたメロディに対して、AIがアレンジを加えて作曲 学習済みのモデルが複数用意されている そのままSoundCloudにアップ可能 学習モデルはオリジナルでも作成可能 学習モデルは与える音源によって変化していくらしいです。AIに音楽のルーツを持たせられるのが人間らしくて興味深いです。 まとめ今回の記事は以上です。タブレットでも音源編集が可能になり、だいぶDTMの敷居が下がったように思います。私も一から調べて今回の構成を作ったので、ここまでは誰でも真似できると思います。是非試してみてください。 関連記事 [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) PCでDTM環境を構築 [Steinberg UR44C/Cubase ai] popIn Aladdin2 レビュー 照明型プロジェクター 使用感/専用アプリ/投影サイズ/Alexa連携/設置方法 [SYNCROOM/NETDUETTO] YAMAHAのリモートセッションツールを試してみた [LadioCast] 仮想ミキサーでMacbook内の音の流れをまとめる mmhmm使用方法 プレゼン/配信ライブ用の万能仮想カメラで画面を飛び回り自在に操る","link":"/iPad-Pro%E3%81%A7DTM%E7%92%B0%E5%A2%83%E3%82%92%E6%A7%8B%E7%AF%89/"},{"title":"iPad ProでWEB AP開発 & RPA","text":"こんにちは。先日iPad 2020(第４世代)を購入しました。発売日の今日受け取ってこの記事を書いています。最近はPCライクな作業の効率がUpしているので、WEB APの開発をできるようにしてみました。一言で開発環境が立ち上がるように自動化もしています。さっきDTM環境も構築しました。 概要 基礎知識 選定基準 周辺機器 マウス Keyboard イヤホン Google Cloud Shellの設定手順 ショートカット x SiriでIDEを開くまでを自動化 手順 開発の周辺作業 関連記事 概要 ざっくりのイメージ図を書きました 流行りのブラウザ型IDEを利用して、iPadでの開発を可能にします また、iPadのRPAツールとSiriで一言でIDEが立ち上がるようにします 基礎知識 ブラウザ型IDEとは？ URLで即アクセスして、ブラウザで利用可能なIDE RDPをするより手軽 そもそもiPadからのRDPはできなくもないがまだ厳しい 裏側で動いているのはクラウド上の仮想サーバ Cloud9ならEC2、Cloud ShellならGCEのリソースを利用 意識せずに使えるので安心してください 自端末のOSに依存せず開発可能 つまりiPadでも開発可能 普通のWinows PCでも効果が大きいです 社内プロキシ問題に悩まされない 個人的には最重要ポイント 環境構築を省略可能 node_module, Git, AWSやGCPのCLI等の便利なものが元から入っている 新設チームや初級者への効果は計り知れないと思います お勧めできるブラウザ型IDEは以下の二つです Google Cloud Shell Googleのブラウザ型IDE Googleアカウントで利用 環境構築を省略可能 Firebase CLI等のGCP向けのものが入っている AWS Cloud9 AWSのブラウザ型IDE AWSアカウントで利用 環境構築を省略可能 AWS CLI等の便利なものが入っている ★複数ユーザーで同時編集可能 リモートワークやレビューに便利です やり方は以下にまとめてあります cloud9による共同編集・リモート開発 選定基準 用途から 手軽さ優先・今すぐ使いたい Google Cloud Shell Googleアカウントさえあれば、5分以内に使い始められます Cloud9はAWSのアカウントが必要なので、権限周りがシビアです 組織で共有している場合、少し面倒なことになります 複数人で同時編集したい AWS Cloud9 そのうち、Google Cloud Shellにも同じ機能がつきそうではあります 以下を参考にどうぞ cloud9による共同編集・リモート開発 開発するサービスから バックエンドに利用するクラウドが決まっていれば、環境構築の手間を削減できるので、合わせましょう Firebase, GCPを利用する Google Cloud Shell AWS, Amplify, Lambdaを利用する AWS Cloud9 周辺機器マウス iPadとマウスはBluetoothで繋げられます iPad対応で”発信機が不要”なモノにしましょう 安めで、USB充電が可能なFenifoxを使っています amazonで探していたら、ipadに対応していないにも関わらず、”対応”と書かれているものがあったので、よく確認してください fenifoxの説明には全くないのですが、接続時にパスワードを求められたら”0000”,”1234”,”1111”の何れかを入力すればOKです 拘る人にはApple純正のマウスもあります Keyboard ひとまずMagic Keyboardを使用しています 非常に軽く、登録後は叩くだけでipadと繋がります 打鍵感に拘る人はこれが良いと思います 話題のiPadが浮くキーボードは2020/05発売なので待機中です Apple Magic Keyboard イケてるけど、エントリーモデルのipadより高い… 追記：最近購入しましたが、ほぼ完全にPCになるのでお勧めです イヤホン 会議用に用意しておくと便利です Sony製品が好きなのでWF1000XM-3を使っています Google Cloud Shellの設定手順 Google アカウントを作成 ログインした状態でGCPを開く Google Cloud Platform Googleアカウントでそのままログイン GCPコンソールが開きます コンソール上部の赤で囲んだマークを押すと、コマンドラインが現れます コマンドラインが下部に出た状態 次に拡大ボタンを押下しましょう 全画面表示になります 次にペンのマークを押下しましょう エディターが現れます 以上でVC Codeのような画面になったと思います このWEBページもGoogle Cloud Shellのエディターで編集して、CLIでhexoのコマンドを打って自動生成しています 画像の処理が楽なのでiPadでやると効率があがります WEB APのlocalhostで実行してブラウザで確認したい時 上の左から二番目のアイコンをクリックすると、portを指定してブラウザを開くことができます クラウドIDEで開発する際に嵌りがちなシーンですが、Cloud Shellなら楽に解決できます ショートカット x SiriでIDEを開くまでを自動化 『Hey Siri, GCP』と言ったらGoogle Cloud Shellが開くようにします ブラウザ型IDEの欠点として、ブラウザから開く手間があります。自動化して時短＆モチベーション向上を図りましょう ショートカット iPhoneやiPadで使える手軽なRPAツール iPadで作業するメリットの一つだと思います 手順 GCPコンソールのURLを控える ”ショートカット”アプリを開く ”ショートカットの作成” ショートカット名を”GCP”に設定 左上の検索欄で”Chrome”と入力 候補に出る”Chromeで検索”を選択 “ChromeでURLを開く”を選択 URL欄に先ほどのURLをコピペ 以上で完了です。”HEy Siri, GCP”といえば、自動でIDEが出てきます よく使うサービスは同じように表示までを自動化しておくと便利です 冒頭に動画を載せておきましたが、cloud9も同じようにURL指定で開けるようにしています 開発の周辺作業PCじゃないと無理じゃない？と言われそうな作業の代替え案です パワポ Googleスライドを使いましょう クラウド上に保存すれば、どの端末からでも見れるので便利です アクセス制限を付けて任意の人に共有することも可能です Excel Googleスプレッドシートを使いましょう 関連記事 cloud9による共同編集・リモート開発 Cloud9 x Firebase x AngularでAP開発 [Google cloud shell x Hexo] 環境構築&amp;記事編集 このブログ自体もiPadからcloud shellを使って編集しています","link":"/iPad-Pro%E3%81%A7WEB-AP%E9%96%8B%E7%99%BA/"},{"title":"icarus(Hexo Theme) Tips Menuの編集","text":"こんにちは。今回はHexoのthemeにicarusを採用した際のTipsを解説します。 Aboutページを追加 1. Hexoの通常の記事として生成 2. _config/ymlを改修 Menuを追加 おまけ：ロゴの変更 icarusを適用すると以下のようなメニューがヘッダーに表示されます ポイント Aboutページは自分で作成する必要がある Menuは追加・削除可能 Aboutページを追加1. Hexoの通常の記事として生成 About-This-Blog.mdを生成1ng new 'About-This-Blog' source/_posts内に生成されたファイルを編集 2. _config/ymlを改修 path: your-blog\\themes\\icarus&gt; About: 移行を生成した記事のパスに変更 Hexoの記事のパスは “/YYYY/MM/DD/Article_name” です 123456789# Navigation bar link settingsnavbar: # Navigation bar menu links menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /2020/02/04/About-This-Blog/ # /aboutから変更 Menuを追加 メニューの追加も同様の箇所を改修するだけで簡単にできます 以下を追加します ポリシーページ 自身のECサイトへのリンク 作業は二点です menuの項目を増やす pathを指定する 外部サイトはURLそのままでOKです _config.yml 1234567891011# Navigation bar link settingsnavbar: # Navigation bar menu links menu: Home: / Archives: /archives Categories: /categories Tags: /tags About: /2020/02/04/About-This-Blog/ #/about Policy: /2020/03/17/Policy EC: https://sheeps.official.ec/ 確認 1hexo server 以下のように反映されます 外部サイトに飛べるか確認 メニューの”EC”を押下 以下のように画面が切り替わりました 私が書いたマスコットキャラ：シープ君のグッズ一覧が出てきます icarusは柔軟にメニューを弄れるのでカスタマイズ性が高いですね 自身のWEBページに合わせて自由に編集してみてください 個人で勉強ついでに開発しているWEB APが増えたら一覧ページをメニューに足そうと思います おまけ：ロゴの変更 オリジナルのロゴ 所在：\\themes\\icarus\\source\\images logo.svg オリジナルのロゴを作成して同様のディレクトリに格納 original_logo.pngを作成して配置 _config.ymlを編集 icarus側の設定ファイルを改修 themes\\icarus_config.yml 旧1234favicon: /images/favicon.svg# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/logo.svg 新 faviconをコメントアウトしないと上に被さって上手く表示できません1234#favicon: /images/favicon.svg# Path or URL to the website's logo to be shown on the left of the navigation bar or footerlogo: /images/original_logo.png これだけです 画面への反映を確認1hexo server pngをSVGファイルに変換しておくと見栄えも読み込みも良くなります ↓でぱっと変換できます PNG SVG 変換 - 画像ファイルをオンラインで変換する","link":"/icarus-Hexo-Theme-Tips-Menu%E3%81%AE%E7%B7%A8%E9%9B%86/"},{"title":"mmhmm使用方法 プレゼン/配信ライブ用の万能仮想カメラで画面を飛び回り自在に操る","text":"最近話題のバーチャルカメラアプリmmhmm（読みはンーフー）というツールのベータ版を試用してみたので解説します。テレビ会議や配信に手軽に演出を加えられるツールです。Youtuberの間でも流行りそう。 mmhmm概要 mmhmm（んーふー） プレゼン用の仮想カメラアプリ スライドと自分を重ねて表示したり、半透明にして画面を飛び回らせたりできます 録画や配信機能もあります Dynamic Deck 遠隔で別メンバーが共同でスライドを操作する機能 配信ライブやオンライン飲みにも使われ始めているようです 全ての主要ビデオ会議/動画アプリに対応 Ex. Zoom Meet, Youtube, Teams… ベータ版のテスト中(2020/08 時点) 現時点ではmacOSのみに対応 Windows版も開発中とのこと 利用方法 公式サイトで申し込むことでダウンロードリンクと招待コードを取得できます 活用例 こんな感じでスライドと自分を被せて表示したり 自分のサイズは自由に変更できます 薄くなったり色をつけることも 飛び回ることもできます 直接重要な箇所を指差し ニュースキャスターのように何かを表示したり ライブ配信にも スマホ画面のデモにも まだまだ追加機能を開発中とのこと 申込/ダウンロード まずは公式サイトより申込 Grab an invite 8/3に申し込み、一週間後(8/11)に以下の招待メールがきました ダウンロードリンクとコードが送られてきます リンクよりDownloadを実施 インストーラを起動 インストール終了後に、申請に利用したメールアドレスと招待コードを入力 Create Account 使ってみる アプリの画面は以下の様な感じ 自分の色や位置、サイズはPresenterから変更できます ドラッグでの移動も可能 Record mp4形式で録画できます Capilot mmhmmの操作を他のメンバーに任せられます 画面上部の\bパネルから表示しているスライドなどの表示形式を変更可能です Off/Default/全画面 Rooms バーチャル背景の様なもの 下部のパネルより表示する対象を変更できます 写したいスライドやブラウザなどを選択するのもここ Touch Cast Studio iPad持ちはより自由度の高いTouch Cast Studioがオススメです Touch Cast Studioでオンライン会議/プレゼン/Zoomウェビナーを演出する 以下の様に複数コンテンツの表示や、サウンドエフェクトの活用も可能です 関連記事 Touch Cast Studioでオンライン会議/プレゼン/Zoomウェビナーを演出する Avatarify 手軽なディープフェイクの作り方 〜画像の顔をフェイストラッキングで操る〜","link":"/mmhmm%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95-%E3%83%97%E3%83%AC%E3%82%BC%E3%83%B3-%E9%85%8D%E4%BF%A1%E3%83%A9%E3%82%A4%E3%83%96%E7%94%A8%E3%81%AE%E4%B8%87%E8%83%BD%E4%BB%AE%E6%83%B3%E3%82%AB%E3%83%A1%E3%83%A9%E3%81%A7%E7%94%BB%E9%9D%A2%E3%82%92%E9%A3%9B%E3%81%B3%E5%9B%9E%E3%82%8A%E8%87%AA%E5%9C%A8%E3%81%AB%E6%93%8D%E3%82%8B/"},{"title":"popIn Aladdin2 レビュー 照明型プロジェクター　使用感/専用アプリ/投影サイズ/Alexa連携/設置方法","text":"初回予約で購入したpopIn Aladdin 2が先日(6/5)届きました。一般では最速レビューになると思います。popInはプロジェクター x シーリングライト x スピーカーの機能が一体化された多機能プロジェクターです。一週間使い倒してみたので、購入前に気になっていたポイントを纏めておきます。 popIn Aladdin 2概要 前バージョンとの差分 使用感 投影サイズ 専用アプリ 時計 美風景/窓 動画配信サービス 目覚ましタイマー Spotify radico ヨガ Aladdin Today 繋がるTV 画面ミラーリング 総評 使用して感じたメリデメ 購入すべきケース 見送るべきケース PopIn Aladdinにゲームを写す方法 Alexaと連携 設置方法 関連記事 popIn Aladdin 2概要 機能 プロジェクター 天井から壁に投影 設置場所や電源に困らない点がイケてます BlueToothスピーカー ハーマンカードン製のスピーカー 天井から部屋全体に音が降ってくるので音響的に◎ シーリングライト １万通りの調光・調色 単純に照明として優秀。普通の照明と比較して段違いに明るくできるので、学習やテレワークが捗ります。 プロジェクターといえば、投影時に部屋を暗くする手間の煩わしさがネックになりますが、一体化によって解消できていました 専用アプリ android OSを内蔵 ⇒ WiFiと直接接続 スマホのようにアプリを後から追加して、中身がアップデートされていきます 画面ミラーリング 対応デバイスの画面をモニターとして利用可能 iPad/iPhone/MacBookで動作確認しました 前バージョンとの差分 短焦点化 4畳の部屋でも100インチで投影可能に 画質 フルHD化 凹凸のある壁にそのまま映しても綺麗です 使用感投影サイズ 5.5畳の寝室で斜めに写しても100インチで映せました 台形補正 最大19度斜めに投影可能 80インチ程度 5.5畳の寝室 斜めに映して台形補正 凹凸のある壁そのまま 専用アプリ popIn AladdinにはAndroid OSが入っていてスマホの様にアプリを追加していけます 時計 popInを利用しないときは、時計や美風景、Moon Light、ヒーリングライト等をインテリア代わりに投影できます 絵画を置くより手軽で気に入っています 美風景/窓 動画配信サービス 一通りのストリーミングが揃っています U-NEXT Netflix Amazon Prime Video Hulu 上記のうち三つを契約しているので、ほぼあらゆる映画を見れています。U-NEXTだけアラジンのリモコン操作に最適化されたUIになっていて、イケてました。 その他 Youtube popInのApp Selectionから追加すると使えます Abema TV DAZN 目覚ましタイマー ストレスフルな音のタイマーと違って、明かりで自然に目覚められます。朝のストレスが減りました Spotify 音楽もストリーミングで聞けます Apple Musicは有りませんでしたが、iPhone等のプレイヤーからBlueToothで連携させれば聞けます popInの公式アプリとしてもそのうち追加されそう radico ラジオも聞けます ヨガ プロの講師の動画が18種類入っていました 今後もアップデートされていくそうです Aladdin Today 新着ニュースやテクノロジーを大画面で見れます 繋がるTV Bluetooth対応のレコーダーやチューナーとの連携用アプリ これを使えば地上波の番組や録画も見れます 専用のチューナー↓の購入が必要 Xit Air Box タブレットやスマホでもTVを閲覧可能になります このチューナーにレコードーを繋ぐ事ができます 画面ミラーリング iPhon/iPad/MacBook等をミラーリングできます 5秒でパッと映せるので、仕事でもサブモニターとして使っています Zoomを写すと、原寸大以上のサイズで見れます youtubeはpopIn公式のアプリが無かったので、ミラーリングで見ています。（そのうち追加されるかも） 総評使用して感じたメリデメ メリット 複数デバイスの統一による快適さ TV, スピーカー, ライト, iPad, モニター等で分けていた役割を集約できたのが個人的に大きいです スペースの省力化 TV/TV台を捨てたおかげで寝室が広がってすっきりしました。指向性があるスピーカーを移動させる手間が減ったのも快適です。 デメリット ファンの音 日中はあまり気にならないのですが、就寝時に耳をすますと聞こえるので、寝るときには切っています。プロジェクターの電源を切っても目覚ましは起動できました。ヒーリングライトなどでうっすら音を出していれば気にならない程度。プロジェクターをOFFにしてもシーリングライトとしてはそのまま利用可能でした。 購入すべきケース 動画配信サービスのユーザー スマホ or PCゲームのユーザー Bluetoothで投影可能なゲームであればpopInで写すと楽しいです これからTVを購入する方 有機ELの50インチのTVを20万で買うより遥かにコスパが良いです Apple製品のモニターが欲しい方 MacBookの拡張モニターとしても利用しています。WEB会議に活用すると、とても便利です。 子育て世代 popInは教育関係のアプリに力をいれています 創造性や語学力、知識を楽しみながら培えたり、絵本を読んで寝かしつけたりできるメリットは大きいです 見送るべきケース 天井が斜めの部屋 特殊な形状の場合は設置できません ▲ HDMI接続のゲームをやりたい (2021/01追記: 工夫したらゲームを写せたので▲にしました) その場合は据え置き型のZ6 Polar Meets popIn Aladdinをお勧めします 天井設置型のメリットは大きいので、iPhone/iPadのソシャゲやmacbookでやれるPCゲームなら通常のpopIn Aladdinがいいと思います ゲームの写し方は以下の記事にまとめました。Airplayの機能を上手く利用しています (2021/01 追記) Popin Aladdin 2にゲーム(Switch/プレステ)画面を映す方法 近年の短焦点プロジェクターの流行りやpopInの磨き抜かれたUXを体感すると、TVを買う人もそのうち消えていきそうだなぁと思います PopIn Aladdinにゲームを写す方法 ゲームも工夫することで以下の様に投影できます PopIn AladdinにはHDMIを指すジャックがありませんが、Airplay(Bluetooth)で対応機器の画面のミラーリングはできます。 そこで、以下の手段が使えます Airplay対応機器(ex. MacBook)にゲームを繋いで写す(キャプチャーボードという機器を使えば簡単にできます) その機器の画面をAirplayでpopInに飛ばす これにより弱点がなくなり、私はpopInのみで不自由なく暮らせています。少し面倒ですが、popinに慣れると”50インチのTVは小さすぎて物足りない”と感じる様になるため、ゲームも含めてpopInの100インチで楽しめる様にすると幸せになれます。 詳細はいかにまとめたので参考にどうぞ Popin Aladdin 2にゲーム(Switch/プレステ)画面を映す方法 Alexaと連携 popIn Aladdin自体は付属の赤外線リモコンでしか動かないため、直接Alexaとは連携できません リモコンの赤外線を記憶可能なスマートリモコンを通してAlexaと連携させています。音声でパっと壁に投影するとSF感が出ます 私はスマートリモコンとアレクサを使って以下のアクションを一括で自動化しています 消灯 ＆ popIn投影 &amp; カーテンを閉じる 設置方法 簡単でした。5分で終わります 天井の照明を差し込む受け口に差し込むだけです 関連記事 Popin Aladdin 2にゲーム(Switch/プレステ)画面を映す方法 [LadioCast] 仮想ミキサーでMacbook内の音の流れをまとめる [SYNCROOM] リモートセッションのやり方(YAMAHAの遠隔合奏アプリ) iPad Pro (第4世代)でDTM環境を構築 PCでDTM環境を構築 [Steinberg UR44C/Cubase ai]","link":"/popInAladdin-review/"},{"title":"[vscode macbook(zsh)] codeコマンドでCLIからファイルを開閉可能にする","text":"vscodeを入れたら初めにする設定のメモ。CLIからcodeコマンドでファイルを開けるようにします。 環境 zsh macOS MacBook Pro(2020) 設定 設定ファイルを開く 1vi ~/.zshrc 以下を追記 12345678910function code { if [[ $# = 0 ]] then open -a &quot;Visual Studio Code&quot; else local argPath=&quot;$1&quot; [[ $1 = /* ]] &amp;&amp; argPath=&quot;$1&quot; || argPath=&quot;$PWD/${1#./}&quot; open -a &quot;Visual Studio Code&quot; &quot;$argPath&quot; fi} 以下を実行 1source ~/.zshrc 以上でcodeコマンドによるファイルの開閉が可能になった 1code &lt;filepass&gt; 参考 zshを使っていてVSCodeのcodeコマンドを使用する方法","link":"/vscode-macbook-zsh-code%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E3%81%A7CLI%E3%81%8B%E3%82%89%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E9%96%8B%E9%96%89%E5%8F%AF%E8%83%BD%E3%81%AB%E3%81%99%E3%82%8B/"},{"title":"s3 ssl化 https化(CloudFront/ACM/Route53)","text":"S3の静的WEBホスティングで公開中のアプリのURLはデフォルトではhttpになります。Cloud Frontを用いてhttpsにしてセキュリティを向上させます。 静的WEBホスティングで公開するまでは以下の記事をご参照ください [AWS S3 x Angular] 静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化 基礎知識静的コンテンツ配信を行うAWSアーキテクチャのベストプラクティス S3でコンテンツをHostingして、ユーザーとの間にCloud FrontとRoute53を挟むのが基本です それぞれの説明は後述します SSL SSL(Secure Sockets Layer)とは データ通信を暗号化し、盗聴や改ざんを防ぐプロトコル httpsから始まるWEBサイトはSSLを導入しています 非SSL(http)の場合、Googleがデフォルトで警告マークを出すので、サイトやWEB APの信頼度が大幅に下がります Cloud Front CDN 配信パフォーマンスの向上 コスト削減 セキュリティの向上 Route53手順 想定する状況 AWS Consoleで設定 CloudFormationやSAMで作るケースもあると思います Cloud FrontとS3を連携 まずは以下の構成を作ります AWS Console/サービス/CloudFront Create Distributionを押下 配信方法はWEBを選択 ディストリビューションの作成 Origin Settings Origin Domain Name Hosting中のs3バケットを選択 Restrict Bucket Access YesにするとCloudFront経由でのみ閲覧可能になる Grant Read Permissions on Bucket これを設定しておくとS3のバケット側の設定を自動でやってくれる Default Cache Behavior Settings そのままでもOK Viewer Protocol Policy Redirect HTTP to HTTPS これにしておくとhttpからhttpsへリダイレクトさせてくれる Distribution Settings Alternate Domain Name(CNAMEs) 証明書を取得したドメイン名を設定 複数のドメイン名を使用する場合は、改行区切り ドメインを取得していなければスルー SSL Certificate Defaultの証明書でOK 独自SSLを使用する場合 事前にIAMに証明書をアップロードしておく Default Root Object S3の静的Hostingの設定で指定した、インデックスドキュメント(Angularであればindex.html)を入力 Create Distributionを押下 20分程度でStatusがDeployedになるので、完了後にアクセスしてみる URL XXXX以降はディストリビューションのGeneralタブのDamain Nameに表示されているものを確認1https://xxxxx.cloudfront.net Route53や独自ドメインを利用しないのであれば以上で完了 CloudFrontの注意点：キャッシュコントロール デフォルト オリジンサーバのコンテンツを 24 時間キャッシュ 検証中など頻繁にS3のオブジェクト内容を更新する際にはキャッシュがききすぎて辛い。 Cache-Controlヘッダーを設定してCloudFrontのキャッシュ時間を制御する等、キャッシュコントロールを適切に行う必要がある。 ヘッダーを使用した個々のオブジェクトのキャッシュ保持期間の制御 独自ドメインを活用する場合 前提 独自ドメインを取得してRoute53に登録済み これから取得する人はお名前.com等を使ってみてください ACM(AWS Certificate Manager)で証明書を作成 AWS Console/AWS Certificate Manager/証明書のリクエスト ドメイン名を入力 ”この証明書に別の名前を追加”よりドメインの別名を設定 対象ドメインに登録されているメールアドレス宛に検証確認メールが送付される 検証確認メールに記載されているhttps://us-east-1.certificates.amazon.com/approvals...にアクセス 表示された画面で” I Approve”を押下 以上で証明書のリクエストが完了します CloudFrontにACMで作成した証明書を設定 Ditribution/Generalタブ/Edit SSL Certificate Custom SSL Certificateを選択 プルダウンから先ほどACMに登録した証明書を選択 保存 Route53の独自ドメインのエイリアスの向き先を変更する AWS Console/サービス/Route53 ホストゾーンから登録済みのドメインを選択 対象の行を選択 タイプ：Aのもの レコードセットの編集 エイリアス先を変更 [CloudFront ディストリビューション] - 対象のドメイン名 を選択 レコードセットを保存 確認 以下にアクセスしてみる1https://{独自ドメイン} 参考 AWSにおける静的コンテンツ配信パターンカタログ（アンチパターン含む） S3を最速でhttps化する手順と全設定項目 CloudFrontでS3のウェブサイトをSSL化する AWSでWebサイトをHTTPS化 その9：S3のみ編","link":"/s3-ssl%E5%8C%96-https%E5%8C%96/"},{"title":"らくがきARの使い方","text":"絵を動き回るARとして飛びださせるiOSアプリの解説です。 概要リンクからインストールできます らくがきAR 動作環境 iPhone/iPad 料金 1000万ダウンロードまでは無料でしたが、現在は120円です 使い方以下の動画で解説しました。 注意点 背景は白地 境界をはっきりさせる 絵の枠線が途切れていると、うまく表示されませんでした 枠線は黒がベター 小さすぎ、大きすぎはNG 関連記事 Avatarify 静止画の顔をフェイストラッキングで操るディープフェイクアプリ [AR.js x A-Frame] WebAR入門～マーカーベースで3Dオブジェクトを表示するAPを開発する～","link":"/%E3%82%89%E3%81%8F%E3%81%8C%E3%81%8DAR%E3%81%AE%E4%BD%BF%E3%81%84%E6%96%B9/"},{"title":"[無料RPA] Windows Power Automate Desktop インストール~Webの自動操作方法","text":"MSが提供開始したRPAツールについてのメモ Windows 10ユーザーは無料で使える Webの簡単な操作程度なら10分で誰でも覚えることができる インストール ブラウザ拡張機能の設定 セッティング 使用方法 フローの作成 Power Automateのアクション 使用例1: Webページの自動起動 使用例2: ボタンの自動押下 所感 関連 インストール 以下の”Download free”からインストーラーをダウンロード -Power Automate インストーラーを起動F 次へ 使用条件にチェック/インストール 以上でインストールは完了 ブラウザ拡張機能の設定 メインブラウザがChromeの場合は以下を入れたほうがいい Microsoft Power Automate 123Power Automate を使用すると、コンピューターの手動のプロセスとタスクを自動化できます。拡張機能をインストールすると、Web スクリプト、データ抽出、Web テスト、Web フォームへの入力、API 呼び出しなどが自動化されます。また、Power Automate Desktop の Web レコーダーも有効になります。 セッティング Power Automate Desktopを起動 メールアドレスを入力/Windowsアカウントを選択 国を選択/開始する 以上でセットアップは完了 使用方法フローの作成 “新しいフロー”を押下 フロー名を入力して作成を押下 後はアクションや変数を設定してワークフローを作り上げていく Power Automateのアクション ざっと見た限り他のRPAツールで可能な大抵のことができそうでした AWSなどの他社クラウドの操作まで 無料なので、既存のRPAベンダーは厳しそう 使用例1: Webページの自動起動 まずはWebページを自動で起動させてみました アクション/Webオートメーション/Webフォーム入力/新しいChromeを起動する 各パラメータを設定後に保存 上の実行ボタンを押すことでchromeが自動起動することを確認できる 使用例2: ボタンの自動押下 以下のアクションを追加する アクション/Webオートメーション/Webフォーム入力/Webページのリンクをクリックします UI要素の追加を押下 実際の画面から要素を選択できる 今回はGithubを開いてNew Issueボタンを押すように設定した 所感 使用例のようにボタンを押させていくだけでも、誰でも大抵のWEBアプリの単純操作を自動化できる Webアプリの簡単な動作テストもできそう(エンジニアであればテストコードを書くべきだが) Microsoftにしては直感的に操作可能 使用例程度のフローであれば、特にドキュメントを見ずに5分もかからず作れました ページ上の要素からのデータ取得や、TeamsやExcel等の他のアプリとの連携、条件分岐なども使っていけば、自由度は高そう スクレイピングは自分でプログラムを書くとなると面倒 まずは会社の勤退システム(Webアプリ)の自動入力から初めてみようと思います 関連 iPad ProでWEB AP開発 &amp; RPA Windows power Automate","link":"/%E7%84%A1%E6%96%99RPA-Windows-Power-Automate-%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB-Web%E3%81%AE%E8%87%AA%E5%8B%95%E6%93%8D%E4%BD%9C/"},{"title":"[オンライン飲み会向け] Netflix Partyでリモート鑑賞会をする方法","text":"最近コロナウィルスの影響でオン飲みが流行っているので、映画好きにお勧めのNetflix Partyについて書きます。 1. Netflix Partyとは 2. Netflix Partyの導入方法 3. 使い方 スマホやタブレットでリモート鑑賞する方法 関連記事 1. Netflix Partyとは 複数名でNetflixを鑑賞できるサービス 機能 映画の共有・同時視聴 Zoom等で画面共有をすればいいのでは？と考える方も多いと思いますが、Netflixにはガード機能が備わっており、画面がブラックアウトしてしまいます Chatroom 映像の画面の横にチャットが表示されます Google Chromeの拡張機能 無料 開発元 非公式 Google/Netflixとは無関係のサードパーティーが開発 利用条件 デバイス PC スマホやタブレットでは使えませんでした 事前のアカウント作成 Netflixアカウント 全員必要 Googleアカウント ChromeへのNetflix Partyの導入 全員必要 2. Netflix Partyの導入方法 まずは↓からNetflix PartyをChromeに追加します Choromeウェブストア Netflix party “拡張機能を追加” 表示されたポップアップでも”拡張機能を追加” 以上で準備はOK Chromeの画面右上に”NP”アイコンが出ます 3. 使い方 動画を再生 NPアイコンが赤くなります NPアイコンを押下 start the party URLが出てきます このURLを一緒に鑑賞するメンバに共有します 以上で同時再生機能とチャットルームを使えます。 ユーザが入るとチャット欄に”Join”と表示されます 利用イメージ こんな感じでモニターに映してZOOMやLINEで皆と通話しながら利用しています 回線が弱いと偶に切れてしまう事もありますが、同じURLから入り直してチャットルームにメンバが表示されればOKです 大画面で鑑賞したい方向け popIn Aladdin Netflix等の動画配信サービスを鑑賞できるスピーカー/ライトが一体型のプロジェクター Macbookであればミラーリングで、100インチの画面を壁に映せます レビュー記事 popIn Aladdin2 レビュー 照明型プロジェクター 使用感/専用アプリ/投影サイズ/Alexa連携/設置方法 スマホやタブレットでリモート鑑賞する方法 Netflix Partyをモバイルで利用する手段はありません 調査したところ、↓のアプリでできそうです Rave Squad Airtime 関連記事 mmhmm使用方法 プレゼン/配信ライブ用の万能仮想カメラで画面を飛び回り自在に操る オンライン飲みや配信に使えるツールの解説記事 popIn Aladdin2 レビュー 照明型プロジェクター 使用感/専用アプリ/投影サイズ/Alexa連携/設置方法 プロジェクターの解説記事","link":"/%E3%82%AA%E3%83%B3%E3%83%A9%E3%82%A4%E3%83%B3%E9%A3%B2%E3%81%BF%E5%90%91%E3%81%91-Netflix-Party%E3%81%A7%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E9%91%91%E8%B3%9E%E4%BC%9A%E3%82%92%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"},{"title":"描画ツールまとめ [draw.io/Cloud Craft/Mind Node/plantUML]","text":"個人的にイケてると思う描画ツールのまとめです。システム構成図や業務フロー図を何故かExcelで作る風潮があるようですが、そもそも描画ツールではないので、微妙な絵しか起こせません。以下のツールを導入して、レガシーな現場をあなたの手で改善しましょう。新人であれば最初の小さな成果になるかもしれません。（厳しい上司に当たると、Excelを使うだけで情弱扱いされます） 1. 描画ツール一覧 2. 各ツールについて 2.1. draw.io 2.2. cloud Front 2.3. PlantUML 2.4. MindNode 2.5. MindMaster 関連記事 1. 描画ツール一覧 UML(ex. システム構成/クラス図/シーケンス図…) draw.io cloud Front PlantUML ツリー MindNode MindMaster 2. 各ツールについて2.1. draw.io draw.io WEBブラウザベースの描画ツール Googleアカウントで運用でき、ローカル/Google Drive/Github等にデータを保存可能 用途：万能 フローやシステム構成等の大抵の図は全てこれで作成可能です テンプレートの例 FlowChartやクラス図 Cloudのアーキテクチャ VS Code用のプラグインもあります Draw.io VS Code Integration こちらの利用方法は別記事にまとめました draw.ioをVSCode上で使用/図表をGitで一元管理 2.2. cloud Front cloud Front WEBベースの描画ツール 用途 クラウドアーキテクチャのシステム構成図作成 AWSに特化しており、draw.ioのようにGCPのテンプレはありません AWS上の環境情報のリアルタイム取得（有料） 構成図の自動描画 構成や設定情報の表示 見積もりの自動生成 AWSを活用しているチームであれば今すぐ導入を勧めます 以下のような図を数分で作成できます リアルタイムデータの確認機能 任意のコンポーネントをクリックすると、現在のコンフィグとコストを確認できます。AWS Web Consoleに直接ジャンプして、Liveリソースとタグを確認できます Collaborate機能 ダイアグラムやAWSリソースに直接ドキュメントを追加可能です。チーム全体で図をオンラインで共有・編集したり、ドキュメント、Wiki、プレゼンテーションにエクスポートしたりすることができます。 運用費の見積もりは上記のように出せます。 2次元の図も作成可能です 優秀なエンジニアのドキュメントをみると、これかdraw.ioで作っている方が多いです pptで綺麗に作るとだいぶ時間を食うので避けましょう 現実の環境から図を自動生成することまでできます 公式説明訳12345公開してすぐに古くなってしまう静的なドキュメントを作成する時間を無駄にしないでください。Cloudcraft Liveは、AWS環境のすべてのサービス関係を瞬時に分析し、完全なシステムアーキテクチャ図をリバースエンジニアリングします。強力な自動レイアウト機能や高度なAWSアカウントスキャン機能もAPIとしてご利用いただけます 有料版について 単なる構成図の描画であれば、無料版で可能 AWSとAPI連携して情報を取得するのは有料 2.3. PlantUML PlantUML 用途 コードによるUMLの作成 draw.ioと同様に大抵の図に対応可能 コーディングに慣れた上級者向けではありますが、テキストなのでGitで差分管理可能 PlanUMLの実行には以下のインストールも必要です Java Graphviz 基本的にVS Codeにプラグインを入れて使います Visual Studio MarketplaceからInstall 書き方 PlantUML Cheat Sheet 2.4. MindNode MindNode iPad用のアプリ 用途 ツリー状の情報のまとめ アイデアの整理によく使っています スキルマップを5分程度で整理した例 2.5. MindMaster MindMaster MindNodeのWEB版だと思ってください downloadしてAPとしても利用可能です 用途 MindNodeと同様 以下の様にテンプレを選択して利用を開始できます pptやExcelで必死にレイアウトを調整する手間は 今回の解説は以上です。良いツールを見つけたら追記します。 関連記事 draw.ioをVSCode上で使用/図表をGitで一元管理","link":"/%E6%8F%8F%E7%94%BB%E3%83%84%E3%83%BC%E3%83%AB%E3%81%BE%E3%81%A8%E3%82%81-draw-io-Cloud-Craft-Mind-Node-plantUML/"},{"title":"静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages)","text":"静的コンテンツのホスティングサービスについてのメモ 主流のHostingサービスと利用方法の解説(2020時点)以下に一通りまとめました。 Amazon S3 AWS S3 x Angular(静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化) Firebase Hosting Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) Netlify Netlifyで公開 Github Pages [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 使い分け詳細は時間がある時に追記します。 試験公開や個人開発者向け 以下は手軽 ＆ 無料だが、アクセス過多ですぐ落ちる Netlify Github Pages 本番環境向け 利用するクラウドによって使い分ける AWS S3 Firebase Hosting Netlify 最も簡易的。ブラウザにアップしたいフォルダをドラッグするだけでOK 以下の記事で詳しく解説しています Netlifyで公開 Github Pages GithubにアップしているソースをそのままHostingして公開できるGitの機能 以下の記事で詳しく解説しています [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 Amazon S3 本番環境で最も使われているであろうオンラインストレージ セキュリティや運用監視についてもAWSの知識があれば、かなり細かく設定・自動化可能 以下の記事で詳しく解説しています AWS S3 x Angular(静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化) Firebase Hosting Firebase(GCP)を利用する場合はこれ コマンド一発でアップ可能 強みはGoogle Analyticsとの連携が初めからされているので、パフォーマンスをチェックしやすいこと 以下の記事で詳しく解説しています Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理) ※時間がある時に、それぞれの詳細と使い分けについて追記します。 関連記事 Netlify Netlifyで公開 Github Pages [Hexo x Github Pages] 5分以内にブログを自動生成して無料で公開するまで【完全版】 AWS S3 AWS S3 x Angular(静的WEBサイトホスティングでSPAを公開/ng build/公開範囲の限定/CI/CD化) Firebase Hosting Firebase Hosting完全版(Angularで開発したSPAを無料で公開～ダッシュボードで費用管理)","link":"/%E9%9D%99%E7%9A%84%E3%83%9B%E3%82%B9%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9%E3%81%BE%E3%81%A8%E3%82%81-Netlify-S3-Firebase-Hosting-Github-Pages/"},{"title":"アジャイル開発におけるプロジェクトマネジメントについて","text":"アジャイル開発の概要と各フェーズについて学んだことのメモ 1. アジャイルプロジェクトマネジメントの概要アジャイルPMとは PJのスケジュールを複数のサイクルで分割する “イテレーション” or “スプリント”と呼ぶ 成功するアジャイルプロジェクトの特徴 スプリントが4~12w 文章よりもコミュニケーションに重点を置く 業務部門と技術部門が同じ場所にあるか、緊密に連携できる環境にある 全面的に支持するスポンサーがいる ニーズの変化を先読みして取り入れる アジャイルPJに必要な条件 最終段階までのビジョンをもつ 常識とされているPJのライフサイクルに従う 要件を理解している スケジュールが共有・管理されている 専任のチームが作業に専念できる 緊密なコミュニケーション フェイズ 初回のみ実施 構想 以下を複数サイクル繰り返す 思索 探索 適応 最後のみ実施 終結 アジャイルライフサイクルの概要 構想フェイズ(一度だけ実施) これから開発するものを顧客と決める チームに必要な人材を定義 価値観と規範を定義 Output スコープ 目標 関係者 チームのコラボレーションツール 業務時間やミーティングなども含めて決定する 相談方法なども 思索フェイズ フィーチャー単位の提供計画 スプリントごとに1 or 複数完成させる フィーチャーとは機能 or 成果 見積もり リスク Output スプリントの要件とフィーチャーの一覧を作成 各フィーチャー毎に以下を見積もる 作業量見積もり リスク見積もり 探索フェイズ 毎日のスタンドアッププミーティング 内部でフィーチャーをレビュー 業務担当チーム＆技術担当チームの話合いやテスト結果に基づいて行う フィーチャーが完成したらイテレーションの終わりに振り返りを行うこれが適応フェイズの目的 適応フェイズ 顧客によるフィーチャーの最終レビュー チームによる振り返りのミーティング＆記録 こうして得られた教訓を次にスプリントの計画に生かす 終結フェイズ 成果物が完成していること 学んだ教訓を記録していることを確認 アジャイル開発を適当に実施すると、探索フェイズのみに集中して、他のフェイズの時間をろくに確保できなくなってしまうパターンが多いと感じる メンバーへの必要性の周知 ＆ スケジュールの確保が必要 2. 各フェイズの詳細構想フェーズPJの基礎を作る段階 構想フェーズ終了時のOutput プロジェクト憲章を作成。以下を記載 スコープ(PJの範囲) プロダクトのビジョン(最終プロダクトの概要)を記載 ターゲットの顧客 主なメリット 全体的な目標 PJの目的 プロジェクトの関係者 PJのスポンサーとマネージャーの責任を明記 PMに権限を与え、レベルを定義する コラボレーションツール セットアップ~動作確認まで ツールは使いやすいことが重要。 最初は少数の単純なツールから始め、必要に応じて他のツールを追加していくのがよい どれだけ高度なツールを選ぶかはPJの規模や関係者の人数、共同作業の量を考慮して決める チームの規範 構想フェイズでは全員が共同で プロジェクト全体の設計に取り組む。その際に物理的な作業場所など チームの共同作業の進め方について 規範を作成することが重要 規範の例 他の人の意見に積極的に耳を傾ける 人ではなく問題を非難する まず理解しようと努める 現在のスプリントとフィーチャー(プロダクトバックログ)だけに焦点を合わせる 問題を見つけた場合は指摘し 解決策を提案する。 毎日のミーティングに積極的に参加し、 集中する。 他の人と対立した場合は 解決するよう努力し、 解決できなかった場合は 双方が上層部に助けを求める。 メールは顔が見えない コミュニケーション手段なので 問題解決には使用しない。 ミーティング中にメールなどに 返信しない。 当座の問題に専念する。 互いを尊重する。 プロジェクトを最優先に考える。 他のメンバーの役割と責任を理解し、 お互いを尊重する。 チームの規模感 チームは 15 人以下が適切。 16 人以上のチームも可能ですが その場合は 15 人以内の サブチームに分ける。 大規模なチームではメンバー間や 開発するフィーチャー間の調整が 難しくなるリスクがある。 アジャイルプロジェクトのリスク ほとんどは以下に起因する。このような状況は避ける フィーチャーの開発スケジュールが きつすぎること 最終決断を下す権限を メンバーがもっていないこと プロジェクト憲章を策定し、コラボレーションツールを準備し、リスクを抑えたチーム編成を決めたら、次は最初のイテレーションの思索フェーズに着手する PJ憲章やチームの規範はGitのWikiに載せると良さそう 思索フェーズ 最終目的 業務部門と技術部門が各イテレーションで開発するフィーチャーを決定すること ２回目以降のイテレーションの場合は 前回完成できなかった フィーチャーの見直しも行う 業務部門と以下を検討する 新規のフィーチャー 未処理リストにあるフィーチャー 前回のイテレーションで完成しなかったフィーチャー 未処理リストに追加される フィーチャー 要件と似ているが、特定のビジネスニーズに絞ったもの 顧客にとって重要な小さな業務を”行為”と”結果”という形で表したもので、事業目標の達成を可能とするもの 流れ フィーチャーの洗い出し カードや付箋で書いて集めるか、コラボレーションツールを使用する 論理的に分類 優先順位付け 業務部門が技術部門の助言を受けながら優先度付けを行う この時、業務部門の関係者は既存のフィーチャーについて尋ねたり、追加したりする 追加のフィーチャーに関する話し合い重要な部分 ほとんどの場合は一部のフィーチャーを 将来のプロジェクトに 持ち越す必要がでる。 予算も時間も限りがあるため、以下ができたら準備完了フィーチャーリストを確認して 優先順位をつけ、業務部門とスポンサーが同意したら 準備完了 フィーチャーリスト イテレーションの開始時に見直し、最新の状態にする必要がある 作業量の見積もり 初回のイテレーションでは、全フィーチャーの見積もりを出す チームや業務部門の担当者と協力し、 正確な見積もりを出すようにします。 イテレーション、マイルストーン、リリース計画を作成 以下を決定 開発する全フィーチャー 完成日 業務部門に フィーチャーを実装する日 思索にかける時間 初回のイテレーションでは時間がかかる ２回目以降はあまり時間をかけない 例えば８週間のイテレーションの場合、思索フェーズは5日程度 探索フェーズ（プロダクトの制作段階） 毎日のスタンドアップミーティングは 全フェーズで行うが 探索フェーズでは最も重要な役割を果たす 15分程度。長くても30m以内 各チームメンバが前日の成果、当日の予定、作業を進めるために必要なサポートについて情報を共有する ”課題を解決する場では無い” 課題は記録し、ミーティング後に対処して、翌日全員に報告する 文書にする必要は無いが、学んだ教訓は課題登録簿に記録 PMの責務 オブザーバとしての役割を果たす 立ち会うだけで進行はチームにまかせる 未解決の課題が無いか確認する 障害となるものが無いか確認する 時間と共にリスクが提言していることを確認する 関係者に状況を伝える マネージャーの役割 組織上の障壁に対処する スプリントで開発しているフィーチャーの進捗管理をする 完成したフィーチャー派ミーティングで伝え、提示する 予定より遅れているフィーチャーがある場合は その原因を究明できるだけ、早期に修正し 教訓を反映できるように記録 一般のPJと同様に課題登録簿を管理していく必要がある 重要なのは課題を迅速に解決すること 未解決の加太が増えている場合は門外があるので変更を検討する必要がある チームがプロダクトの開発に追われて 時間がなくなることがよくある。 時間管理とスプリントのスケジュール管理は 非常に重要。 以下のどちらかで探索フェイズを終了する スプリントで予定していた フィーチャーが完成 フェーズ期間が経過 このどちらかの条件に沿って 探索フェーズを終了することが重要 探索フェーズの期間が７週間あって その間にフィーチャーが完成しなかった場合 スケジュール通りにフェーズを停止して 適応フェーズに進む 適応フェーズでは学んだ教訓を記録して 適用する 教訓の変化をメンバー全員に周知し 関係者とともに要望の確認や 調整を行うこれが探索フェーズに続く 適応フェーズの目的 課題管理はgitのissueとカンバンで運用すればOK 適応フェーズと終結フェーズスプリント最後のプロセス 適応フェーズ チームで以下の作業を行う 成果を確認 計画と比較する 良かった点と悪かった点を話う 変更の合意を取る 前回の適応フェーズの教訓と付き合わせ 同じ傾向が見られないか確認 顧客と以下を確認する プロダクトを顧客と一緒に確認 目標通りに機能することを確認 業務への効果を検証 顧客の業務の変更があった場合は 開発したフィーチャーの有効性が 十分かどうか確認 またそのフィーチャーが業務に期待通りの 効果をもたらすかどうかも検証。 各適応フェーズで学んだことを話し合い、 フィードバックを共有することは とても重要 問題解決の為のブレインストーミングを行う フィードバックを元に多数の修正や変更を加える フィーチャーの追加・削除 見積もりの変更 未処理リストのフィーチャーの優先度の変更 スタンドアップミーティングの議題を変更 人員体制を変更 リスク登録簿を変更 今後のスプリントに影響する変更については、理由と共にメンバに周知する PMの役割 功績を称える 次期スプリントに向けてチームの士気を高める 長期の場合はメンバを一時的にスプリントから外す 終結フェイズ マネージャの役割 ベンダーとの間で支払いが済んでいることを確認 財務情報を確認 人員を他のプロジェクトや業務に割り当てる プロジェクト全体の成果を伝える 開発したフィーチャーが業務で効果を上げているか監視する アジャイルの経験が少ない場合は、学んだ教訓を整理する ポイント スプリント＝イテレーション 通常は4~12週間をかけて行う アジャイルライフサイクル：５つのフェーズ 構想、思索、探索、適応、終結 3. 構想：プロジェクトの選択と計画 アジャイルPJを選択する アジャイルが適しているPJ 質の高いプロダクトを短期間で納品するが、一括納品する必要が無い場合 進捗に応じて要件が変わる可能性がある場合 メンバーが主体的ンい子決定できる場合 プロダクトを分割納品しても業務上の価値を提供できると思われる場合 アジャイルに適しているPJの特徴 要件が変化する PJをスプリントに細分化できる アジャイルに適さないPJの特徴 スプリントの単位で進める必要が無い PJが別の手法で成功した実績がある 全てのフィーチャーを一度に納める必要がある イテレーションで進めることだけがアジャイルではない アジャイルと非アジャイルを組み合わせる方法もある プロジェクトのスコープを決定する 構想フェイズ 以下を作成 顧客が求める最終プロダクトのビジョン PJのプロダクト憲章 次にプロダクトデータシート(PDS)を作る PDS(プロダクトデータシート)概要 計画書 プロジェクトの概要をまとめたもの PJの詳細なスコープを記載したPDSはPJのコミュニケーションツールとしても活用可能 一般に初回のスプリント前の構想フェーズで作成 1~3P程度で完結にまとめる PJ憲章から抜粋したPJの説明とスコープの概要 PJの目標 PDS(プロダクトデータシート)詳細 PJの説明 PJ憲章から抜粋したPJの説明とスコープの概要 PJの目標 スケジュール コストの見積もり 制約 環境 安全 経済 技術 準拠すべき技術企画 政治的 PJのスケジュール 完了日 チームまたは開発するプロダクト 特定の期間しか参加できないメンバ 優先順位 以下の中で優先順位をつける スコープ 人員 品質 スケジュール その他の資源 スプリント計画を策定する イテレーション(=スプリント)は基本４～１２週間 思索/探索/適応が含まれる 各スプリントの前後を、思索/適応フェイズに1週間ずつ割り当てる 始めの思索フェイズは数日多く見積もる スプリンと計画を立てるには全フィーチャーの一覧と規模の見積もりが必要 フィーチャーの分類基準 業務部門における優先順位 対応可能な技術者 利用可能な資源 事業分野 フィーチャーの規模の見積もりは大まかでよい ex. 大: 80h 中: 40h 小:20h 見積もりは思索フェイズごとに行う この後に期間を決める “スプリントの規模が決まったらそれを変えない” 潤沢な資源と人員がいる場合 “もっとも優先度の高いフィーチャーから取り組む” “期間を短くして焦点を絞る” スプリント計画例 (6ヵ月の場合) 構想フェイズ: 1ヵ月 残りの5ヵ月を複数スプリントに分割 スプリントの期間を決める 各スプリントの前後を、思索/適応フェイズに1週間ずつ割り当てる 残りは5週間となる 5週間でどこまで進める考える 各スプリントの残りの期間を探索フェイズに当てる 探索フェイズの中で消化可能なフィーチャーを見積もりと優先度に応じて割り当てる 各フィーチャーの規模の推定をせずになんとなく進めてしまうPJが多い リスクを管理する スプリントごとにリスクを管理 アジャイルが初めての場合は始めの数回のスプリントの難易度を下げる 2回目以降で難易度を上げていく 特に技術力が必要なPJ等 ”フィーチャーの難易度を上げすぎない” ”アジャイルに慣れる時間をチームに与える” 慣れていない場合は難しいフィーチャーを後ろに 経験豊富なチームであれば難しいフィーチャーから取り組む PJ全体の見通しがたつ 各スプリントの数を調整する “初期段階のスプリントのフィーチャーを減らす” 業務部門特有のリスクに注意 最適な実装順を決める 業務への影響を考える ポイント アジャイル手法によるプロジェクト管理が適しているタイプ 短期間で納品する必要があるが、一括納品する必要がないプロジェクト プロジェクトデータシート（PDS）でプロジェクトのスコープを決める作業 マイルストーンを含む詳細なタイムライン設定 コストの見積もり スプリントの期間と各スプリントで開発するフィーチャーの数を決めること スプリント計画 リスクを低減する方法の1つ チームの生産性が十分に上がるまで、最初の数回のスプリントで開発するフィーチャーの数を少なくすること 4. 思索：アジャイルプロジェクトの進め方 要件を特定する 要件の収集 開発チームより先にビジネス 新しいフィーチャーを定義する 要件特定の技法 ユースケースの活用 パフォーマンス要件カード ユースケースの活用 特定の目標を達成するシステム、 またはプロセスとアクターの関係を 図で表す。 アクター 人、会社や組織、 部門、コンピュータープログラム、 コンピューターシステムなど。 判断を下せる実態を示す 要件の範囲を表すボックス アクターがシステムを使ってできること書く ボックスの外にシステムと相互に作用する 様々なアクターを示し、ボックスと繋げる ユースケースは IT プロジェクトや IT 以外のプロジェクトで 要件を文書化する際に使用できる ユースケースにより 関係者は要件が機能となり ビジネスニーズを満たす要素を 想像しやすくなる パフォーマンス要件カード 機能カードと似ているが、このカードには 複数の機能に適用される要件を示す 各要件には固有の ID、 内容を示す簡単な名称、 またはタイトルが必要 困難度 業務部門がその他の要件や 機能と比較して 優先順位を決定する際に役立つ 複雑度（低・中・高） 最後の受け入れテストの項目 プロダクトの開発後に 要件が実現したかどうかを 検証する方法を示します。 要件の文書化はどのようなプロジェクトでも重要。アジャイルプロジェクトでは 要件が継続的に増加する。 ビジネスアナリストが中核的チームに 先立って取り組みを進めると 各スプリントの始動時に機能や要件に関する 最新情報が得られる。 スタンドアップミーティングを計画・実施する 毎日のスタンドアップミーティング 重要な情報の共有 所要時間は15分 立ったまま行うことで頭がさえ、楽観的でアクティブな状態を維持できる 業務部門と技術部門のチームメンバー全員と プロジェクトマネージャー、 別名スクラムマスターが 出席 PMの役割 会議の進行役は努めない チームのステータスを様々な順序で提示させる タイムキーパを割り当てる/ローテーションする 一人30s~1m 慣れたら不要 スタンドアップミーティングでは 問題を解決しない 最も難しい 必要なメンバーに限定 一貫性が重要 同じ時間 PMが観察する項目 チームメンバーが協力し合っているか リスクが表面化しているか？ 解決を支援できる一般的な問題があるか？ 問題のリストに含まれる項目が増加しているか？ アジャイルプロセスに難しさを感じているチームメンバーはいるか？ 前向きな雰囲気で終わらせる 成功体験を共有する 進捗を示す 前向きな姿勢を維持 毎日合っている場合は空けてもOK 週に1回のペースで 他の関係者を参加させる 最後に5分感、質問の時間を設ける 計画を管理・調整する アジャイル手法にうとい人の誤解 アジャイルプロジェクトには制御の仕組みがない スコープは未処理リストで管理する フィーチャーの完了と新しいフィーチャーの追加によって範囲をコントロールする方式 業務部門と技術部門が協力し、 継続的に優先順位を見直し、 次のスプリントで実装する機能を 判断する 未処理リストへのこのような変更は 一般的に行われるが 現行スプリントのスコープは 常に固定することを忘れてはならない 機能リストは合意したら その後は変更してはならない ベロシティ スプリントで完了している 平均的な機能の数 これは以前のスプリントを 調べることで算出可能 チームの資源＝ベロシティ 低下している場合 原因を取り除く 下方修正する場合 今後のスプリントで対処するフィーチャー数を減らす 利点 生産速度の把握によって制御を可能にすること 状況に応じてリリース計画や資源を調整できる ベロシティを使うと生産率を把握できる バーンダウンチャート これから完了する作業を表すコミュニケーションツール 機能の生産が 予定より進んでいるか遅れているか そして全機能がいつ完了するかを 明確に示す。この情報を使用して進捗を継続的に監視し 必要に応じて調整して 生産性を最大限に高めることが重要。 バックログチャート 機能数（フィーチャー）と完了までの予想期間を表すもの X軸 PJのタイムライン Y軸 PJ or スプリントで未完了の作業 開始点では残りの作業は全作業ということになる 進み具合を予定と比べて見る これに応じて各スプリントで 完了する機能を調整する 時間やコストを増やす 生産能力に合わせて機能の計画を見直す といったことが可能になる アジャイルプロジェクトは、これらの シンプルな制御テクニックを使用すれば うまく管理できる ベロシティの計測 Gitを使っていればissueの消化スピードで計測可能 バックログチャートで可視化するより良い giLabならバーンダウン機能があるらしい ZenHubとGithubを連携させてチャート化する手法があるようだが、GHEの場合セキュリティの兼ね合いで無理そう。有料 ZenHubはGitのラッパーとして機能するPMツール https://medium.com/i35-267/zenhub-x-github-project-x-github-%E3%82%92%E5%88%A9%E7%94%A8%E3%81%97%E3%81%9F%E9%96%8B%E7%99%BA%E3%83%97%E3%83%AD%E3%82%BB%E3%82%B9%E3%81%AE%E8%80%83%E5%AF%9F-eda97949e044 github burndown chrat GitHub Burndown Chart – GitHubのイシューを使ってバーンダウンチャート生成 https://www.moongift.jp/2014/04/github-burndown-chart-github%E3%81%AE%E3%82%A4%E3%82%B7%E3%83%A5%E3%83%BC%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%83%90%E3%83%BC%E3%83%B3%E3%83%80%E3%82%A6%E3%83%B3%E3%83%81%E3%83%A3%E3%83%BC/ JavaScript製のソフトウェア http://radekstepan.com/github-burndown-chart/ GitHubのissueをカンバン形式で管理できるサービス4選 ZenHub概要 GitHub Burndown Chart - GitHub Pages WEBアプリ 入力したリポジトリのissueからバーンダウンチャートを作れる パブリックリポジトリでなければ無理そう issueをcsvで出力可能 ポイント 要件を特定するために、中核的チームよりも1つか2つ先のスプリントに取り組む人 ビジネスアナリスト スタンドアップミーティングにかける理想的な時間 15m スタンドアップミーティングの特徴 参加者が立って行う リモートの場合はどうすべきか？ 平均的なスプリントでチームが開発する機能数のこと ベロシティ 5. 探索：開発・制作プロセスを管理する 開発業務を干渉せずに管理する マネージャーの役割 チームを リードすることではなく 観察して相談に乗ること 従来のPMとの違い コーチングで導く 障害を明確にする スタンドアップミーティングではしっかり耳を傾ける フォローアップを行う ミーティングの後にフォローする リソース 情報（顧客、既存のシステム、作業の繁忙期など） ツール（プラットフォーム、試験期間、専用ソフトウェアなど） 専門家との関係（業界の専門家、設計者など） トレーニング（経営方針、カスタマーサービスなど） チームによる手動が必要な場面 フィーチャーに優先順位を付ける タスクの見積もりを行う マネージャーはこれらの主導権をチームにゆだね、必要な時だけサポートする チームの自主性を助ける重要な方法の一つ チームの決定を支援する 決定が順当に行われるようにする 失敗から学ぶ よくある問題を回避するためにすべきこと 顧客は開発チームと日常的に共同作業を行い、効果的な協力を実現しているか？ 顧客が主要なチームメンバとコミュニケーションがとれていないほど多忙ではないか？ 上層部が反復型のアプローチに困惑し、 必要な機能を完了できるのか 心配していないか？ 上層部の不安については 最初の数回のスプリントでコミュニケーションを時間をかけることで軽減可能 リズムに合わせる 生産性の高いチームは一定の周期で 作業を進める スプリントの期間が６週間の場合、プロダクト機能を開発する２～５週目の間に作業が集中することがある マネージャーがストレス要因に注意し、 各自の作業負荷を 効果的に管理できているか確認する 次のスプリントに備えることができるように 作業が少ない週も設ける 探索フェーズではプロダクトマネージャーはタスクマスターではない。各チームメンバーの効率を 最大限にするためにできることを全て行い、主体的で生産性の高いチームとなるようにサポートする。 効果的なコラボレーションを実現する スプリントを成功させるには効果的な協力が不可欠 PDCAサイクルはコラボレーションの促進に有効なテクニック Plan 作業が発生するとメンバは通常二人一組で簡単な作業計画を立てる Do/Check 一人が作業を実行して完了後に、もう一人が検証して評価する GitのIssue運用のイメージ Adjust 結果が期待と異なる場合はすぐに改善意取り掛かる コロケーションを実施できない場合 アジャイル手法は各チームが 同じ場所で作業することが前提ですが 現実では難しいことも多い 中核的チームメンバーが 同じ場所で作業できない場合は コラボレーションのためのツールや技法を 追加で用意する必要がある Slack, Teams, Git等のイメージ その他例 Sharepoint ビデオ会議 少なくとも１回は 実際に顔をあわせるようにする PJの開始時が良い。最初のスプリントを 一緒にやることも効果的。 探索フェーズではマネージャーはチームの規範が確立していて 意思決定の方法について、合意が得られていることを確認する。 全員の意見が一致しなかった場合の枠組みや 手法を決めておくとよい。 決定が全員一致ではない場合のフレームワーク アイデアの共有を奨励 責任をもって率直な意見を述べる アイデアにしっかり耳を傾ける 過半数の賛成で決定とする 話し合いが 堂々巡りになるのを防ぐ 決定の根拠が理解されなければならない 反対する人の支援が必要 拒否権を持たない チームの決定は覆さない 全員一致が理想だが、討論の時間には制限を設ける 全員一致を目指すことに同意したとしても 議論の時間に制限を設けて 適切なタイミングで 結論を出すようにする 普段からPDCAや有効なコミュニケーションツールを使用し チームの規範で意思決定の方法について合意を得ておく必要がある。これらをGitのWiki等に載せていくイメージ 問題とリスクを管理する 問題が表面化したときにするべきことについてチームを教育する 互いに信頼を気づくっことが重要 健全な対立をする 問題を批判する 人を批判するのではない。よく言われていること 対立に真正面から取り組む 事実を提示する 賛否両方のシナリオを示す 決定を行う必要がある場合 明確にする 根拠を示す 視線を要請する 優れた作業環境 コロケーションが不可欠 静かな場所が用意されている 仕切られた場所が用意されている ヘッドフォンの使用が許可されている 物事を戦略的に見ることが必要 チームにリスクの譲歩を提供し続けることで、メンバー自身がリスクを低減する能力があることを再認識できる 問題およびリスク管理 関係性が重要 意思のぞ通 明確なガイドラインを示す 解決の為のツール 6. 適応と終結：納品前に微調整するスプリントで学んだ教訓を確認する 正しい質問をすることが重要 批判的な観点からPJを確認する 適応フェーズを待たずにフィードバックを得る メンバーが感じた問題点をいつでもメモできる場所をチームルーム内に設けておく 前後関係が分かるよう詳細に 解決方法は分からなくても構わない。フィードバックを書き留めるだけ GitのIssueやWikiを利用する？ 例 中規模の機能の完了に 予定より時間がかかっている 毎日のミーティングに 15 分以上かかっている 常に新しい機能が必要になるので 終わりが見えない こうすることでスプリントの最後に振り返りをする際に議論の材料となる情報がたくさん集まる。通常はスプリント中に作成したリストを基に 振り返りに参加したメンバーから 他の問題点を引き出す 教訓を得られるフィードバックを優先する 問題点をすべて確認したら、プロジェクトへの影響に基づいて フィードバックの優先順位を決める。それぞれの対処方法を判断し、優先順位が高いものに 重点を置く。 優先順位をつけるための技法 例 項目が30とする。振り返りの参加者に10票ずつ与え、PJにとって最も重要だと思う項目に投票してもらう 問題の根本的な原因を特定する いいアイデアを集める アイデアが湧いてくるようにする 創造性を持つことを奨励する できればチームメンバー外の人にファシリテーションを任せ、マネージャーもメンバとして参加する 5本指の投票 提案された解決策に対する賛成度合いを指の数で表す 5 満足している 4 まあまあ満足している 3 普通 2 懸念がある 1 重大な懸念がある 1, 2を投票したメンバーに懸念していることを確認 全員が３以上に投票するまで解決策を練り直す どのような決断に達したとしても プロジェクトに関するすべての変更点を 中核チームと広範囲の関係者に伝え全員が 新たな方向性を確実に理解するようにする ビジネスの優先事項の変化に対応するアジャイルでは変化するビジネスニーズに対応することが重要 ビジネスに対応する際に考慮すべきこと 機能の優先順位設定の影響については業務部門に助言しておく必要がある 同種の機能を一スプリントで実装する場合と複数スプリントに分解して実施する場合で工数が変わるため、再見積もりする必要がある PMはこの影響を顧客に伝える必要がある。通常はコストや資源に影響する 必須のフィーチャーが存在する場合がある 先に作る必要がある機能など ビジネスの優先順位の変更により フィーチャーが再開発されることがある フィーチャーの再構築 通常起こりうるが、計画が必要 アジャイルではよくあることなので 計画に織り込んでおく。 新しい順序があれば確認する 正確な見積もりを可能にする 初回スプリントで リリース計画を作成する際に 後続のスプリントの見積もりを 正確にするために その分野の専門家が 提案された機能の順序を確認し、 設計と再開発の影響を 判断する必要がある。 適切に計画して見通すことで業務部門は 機能の優先順位を管理し、 プロジェクトチームは助言をして 各スプリントで変更を適用するというアジャイルの基本原則を維持できる PJを終結する 終結フェーズはPJ全体で学んだ教訓を理解し、文書化することから始める アジャイルの標語ではこれを振り返りと呼ぶ 振り返り PJ（またはスプリント）の教訓を記載した文書を作成すること 終結フェーズでは他の関係者を招待してもOK振り返りが完了したら終結処理に入る 終結フェーズを開始する場合 全フィーチャーが実装済み 時間が残っていない 資金が残っていない PJを終結する場合んお検討事項 バックログリストを見直す 残りのフィーチャーの重要性を判断する 新しいフィーチャーが必要かどうかを考える 新しいPJが必要か考える 優先度の低いフィーチャーを段階的に実施するように変える 成り行きを見る は有効なアプローチ 業務部門にバックログリストを提供する チームイベントは重要 終結を実施する PJが終了したことを知らせる 成果を評価する メリットと問題点について話しあう マネージャーと協力してチームメンバーの次の任務を決める PMはメンバーを通常の業務に戻すか、他のPJに移す PJ終結の「人間的側面」 感情的になる可能性がある 注意散漫になる場合がある 全体的な有効性に重点を置く 改善点について検討する 7. アジャイルのヒントとコツトラブルの兆候を見極めるアジャイルプロジェクトでもトラブルが起きることはある トラブルの兆候 残っているフィーチャー スノープラウィング スプリント終了時にフィーチャーを次へ持ち越さない 通常最初の２つのスプリントの終了時に実際の生産性に合わせて 見積もりを修正する。 ただし修正が繰り返し行われる場合は すぐにミーティングを行って 原因を話し合い、 適切に対処することが必要 優先度の低いフィーチャーの開発 不適切なフィーチャー 修正が必要なフィーチャー 問題の根本的な原因 適切な質問をしなかった 何を開発しているかを顧客が理解していない ビジネスニーズを正確に把握していない 根本的な原因への対応 プロダクトレビューを行う プロダクトバックログを修正する その他のトラブルの兆候 チームの出席率の問題 欠席しtアメンバーに個別に連絡する PJバッファを使い切っている 最適なツールは問題ログ 問題発生の日付と説明、 その原因を記録 これで問題の規模と回数を確認し、 バッファをいつどのように使っているかを 把握する PMとチームのどちらが「解決者」になるか 成功するアジャイルチームには自己統治が大事 管理手法の調整 アジャイル手法を初めて使用する場合 経営陣の不安を予期する 経営陣にとって重要なことに重点を置く 経営陣の考えを誘導する 経営陣の一般的な優先事項 ビジネスの問題を解決する 統率力を維持する チームの指揮を高める 顧客満足 顧客の積極的な参加を求める 顧客の役割 プロダクトのバックログを定義する 優先するフィーチャーを決める 統制の維持 協力関係を管理する 重要な管理手段を理解する 従来の報告手段が役に立つ場合もある スコープの管理 プロダクトのデモで得られた顧客のフィードバックを活用する 時間の管理 MS Project等でマイルストーンのガントチャートを作るのもいい スプリントごとのフィーチャー、 プロジェクト全体のスプリント間の 依存関係を示し 定期的に内容を更新して 経営陣に見せることができる コスト管理 固定予算を示す 信用を得るには アジャイルプロジェクトに チームのメンバーだけが使用できる 固定予算があることを示す。 従来のプロジェクトでよく使われる 実コストと予算の関係性を示した S 字曲線ではなく、 顧客と開発チームの両者が フィーチャーごとのコストと ビジネスにもたらす実益を 比較できるものを用意しする。 フィーチャー毎のコストと、ビジネスにもたらす実益を比較する フィーチャーの納品時には 予算残額を査定し 承認された資金を使いきる チームの士気を 高める要素 適切な技能 コントロールの分担 迅速に成果を出す 成功を繰り返す その他 手法以上にチームのコミュニケーションに重点を置く 経営陣に進捗を報告する メンバ全員に各自の役割とチームのミッションを理解させるのが重要 一貫した強いリーダーシップを示すのが成功のカギ スノープラウィング プロジェクトマネージャーが完了した作業をチェックし、計画と相違ないことを確認する作業 関連記事 これらの運用実現に向けた具体的なツールの活用法を以下にまとめた Githubの Issue &amp; Project(カンバン)でプロダクトバックログ/タスクを管理する（アジャイル開発の運用）","link":"/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E9%96%8B%E7%99%BA%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8B%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%83%9E%E3%83%8D%E3%82%B8%E3%83%A1%E3%83%B3%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"},{"title":"[Angular] An unhandled exception occurred: Port 4200 is already in use の解決策","text":"Error 解決策 参考 関連記事 その他 ng serve実行時のエラーについてのメモ Error 以下のエラーが出る12&gt; ng serveAn unhandled exception occurred: Port 4200 is already in use. Use '--port' to specify a different port. 解決策Port 4200のプロセスをkillする ポートが:4200と表示されているプロセスを探す123&gt; netstat -a -n -oプロトコル ローカル アドレス 外部アドレス 状態 PIDTCP 127.0.0.1:62279 127.0.0.1:4200 ESTABLISHED 18492 pidを指定してプロセスをkill12&gt; taskkill -f /pid 8464成功: PID 18492 のプロセスは強制終了されました。 以上でserve 可能になる1&gt; ng serve 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular/TypeScript(JavaScript)] 非同期処理/待ち合わせ処理のまとめ (Observable/subscribe/forkJoin/Promise/async/await/then) [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する その他 https://stackoverflow.com/questions/39091735/port-4200-is-already-in-use-when-running-the-ng-serve-command","link":"/Angular-An-unhandled-exception-occurred-Port-4200-is-already-in-use-%E3%81%AE%E8%A7%A3%E6%B1%BA%E7%AD%96/"},{"title":"[Angular] ng build時のエラー --aotについて","text":"Angular 9以降でデフォルト化されたAOTについてのメモ 8以前のバージョンからアップデートした際に注意すべきポイント 発生する事象 Angularのバージョンアップ後、build実行時にエラーが発生する –aot オプションが必要になる1ng build --aot 原因/AOT Angular9 以降ではahead-of-time (AOT)コンパイラがデフォルトに採用されている Ahead-of-time (AOT) コンパイラ 引用123Angular の ahead-of-time (AOT) コンパイラ は、ブラウザがそのコードをダウンロードして実行する前に、ビルドフェーズ中にAngular HTML コードと TypeScript コードを効率的な JavaScript コードに変換します。ビルドプロセス中にアプリケーションをコンパイルすると、ブラウザでのレンダリングが速くなります。 Angularには、アプリケーションをコンパイルする2つの方法がある Just-in-Time (JIT) 実行時にブラウザ内でアプリケーションをコンパイルします。This was the default until Angular 8. Ahead-of-Time (AOT) ビルド時にアプリとライブラリをコンパイルします。This is the default since Angular 9. ng build (build only)またはng serve (build and serve locally)のCLIコマンドを実行すると、コンパイルの種類（JITかAOTか）は、angular.jsonで指定したビルド設定のaotプロパティの値に依存する Angular 8以前で開始した場合はデフォルトでtrueではない これらの要因により今回のエラーが発生したと思われる aotの有効化 設定を変更することで、buildの度にオプション(–aot)を付与せずともエラーを回避可能になる 以下の設定ファイルでbuildの設定を変更することで解決できる aotをtrueとするだけ angular-pj/angular.json 123456789&quot;build&quot;: { &quot;builder&quot;: &quot;@angular-devkit/build-angular:browser&quot;, &quot;options&quot;: { &quot;outputPath&quot;: &quot;dist/reacq-pj&quot;, &quot;index&quot;: &quot;src/index.html&quot;, &quot;main&quot;: &quot;src/main.ts&quot;, &quot;polyfills&quot;: &quot;src/polyfills.ts&quot;, &quot;tsConfig&quot;: &quot;tsconfig.app.json&quot;, &quot;aot&quot;: true, //こちらを変更 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular/TypeScript(JavaScript)] 非同期処理/待ち合わせ処理のまとめ (Observable/subscribe/forkJoin/Promise/async/await/then) [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する その他 Angularコミュニティ","link":"/Angular-ng-build%E6%99%82%E3%81%AE%E3%82%A8%E3%83%A9%E3%83%BC--aot/"},{"title":"Angular 11 buid error: Index html generation failed.Inlining of fonts failed. An error has occurred while retrieving https://fonts.googleapis.com/css?family=Roboto:300,400,500&display=swap over the internet.","text":"Angular 11で有効化されたフォント最適化機能について プロキシ環境下で開発をしている場合、ng buildでプロキシエラーが発生してしまう 発生した事象 Anular11 へのアップデート後に、ng buildで以下のエラーが発生する1234567&gt; ng build --prod√ Browser application bundle generation complete.√ ES5 bundle generation complete.√ Copying assets complete.× Index html generation failed.Inlining of fonts failed. An error has occurred while retrieving https://fonts.googleapis.com/css?family=Roboto:300,400,500&amp;display=swap over the internet.connect ETIMEDOUT 原因 Angular 11からインラインフォントへの新機能が追加されている プロキシ環境下で開発を行っている場合は、build時にプロキシを通過できずエラーが発生してしまう 正しくHTTP_PROXY/http_proxyの環境変数を設定していても無視されてしまう 回避策 幾つかGitのissueに同様の事象が挙がっていたが、以下が結論であった 1ビルドサーバーはファイアウォールの外にはアクセスできません。それをオフにするのが唯一の選択肢だと思います。 font optimizationをオフにする方法 Angular workspace configuration Fonts optimization options 要約 設定ファイル(angular-pj/angular.json)でbuildの設定を変更することで解決可能 デフォルトの設定 “optimization”: trueとなっている123456789101112131415161718&quot;projects&quot;: { &quot;app_name&quot;: { ... &quot;architect&quot;: { &quot;build&quot;: { &quot;builder&quot;: &quot;@angular-devkit/build-angular:browser&quot;, &quot;options&quot;: { ... }, &quot;configurations&quot;: { &quot;production&quot;: { &quot;fileReplacements&quot;: [ { &quot;replace&quot;: &quot;src/environments/environment.ts&quot;, &quot;with&quot;: &quot;src/environments/environment.prod.ts&quot; } ], &quot;optimization&quot;: true, angular.jsonの各項目について “architect” コンパイルやテスト実行などの複雑なタスクを実行するためにCLIが使用するツール ターゲットの設定に従って、指定されたタスクを実行するために指定されたビルダーを実行するシェル “build” “configurration” このセクションでは、異なる目的地のための代替構成を定義し、名前を付ける。このセクションには、それぞれの設定のためのセクションがあり、その環境でのデフォルトのオプションを設定する。 “optimization” より細かい設定を行うために、ブール値かオブジェクトのいずれかを指定できる。このオプションを使用すると、ビルド出力のさまざまな最適化が可能になる fonts12フォントの最適化を有効にします。注意: これにはインターネットへのアクセスが必要です fonts optimsization options inline12アプリケーションの HTML インデックス ファイル内の外部の Google フォントとアイコンの CSS 定義をインライン化することで、レンダリング ブロック要求を減らします。注意:これにはインターネットへのアクセスが必要です。 レンダリングブロック要求について 以下に変更 123&quot;optimization&quot;: { &quot;fonts&quot;: true} 以上でbuildが問題なく実行できた 12345&gt; ng build --prod√ Browser application bundle generation complete.√ ES5 bundle generation complete.√ Copying assets complete.√ Index html generation complete. 同様の事象はgitのissueで複数確認できたが、無効化する以外の解決策は見つけられなかった。 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular/TypeScript(JavaScript)] 非同期処理/待ち合わせ処理のまとめ (Observable/subscribe/forkJoin/Promise/async/await/then) [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular] ng e2e Test 証明書エラーでハマった際の回避策(unable to get local issuer certificate)) [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular Service入門] ロジックを切り出し、複数Componentで再利用可能にする [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み Angular x AWS SDK for JavaScriptの始め方 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する その他 Angularコミュニティ Automatic Inlining of Fonts breaks in Angular 11 #19350 Inlining fonts behind HTTP proxy #19401 Angular workspace configuration Port and Proxy Config on ng-build","link":"/Angular-11-build-error-Index-html-generation-failed-Inlining-of-fonts-failed-An-error-has-occurred-while-retrieving-https-fonts-googleapis-com-css-family-Roboto-300-400-500-display-swap-over-the-internet/"},{"title":"[AWS/IaC] Former2によるCloudFormation/Terraformテンプレートの自動出力方法","text":"AWSアカウント内の既存のリソースから、IaCテンプレート(CloudFormation/Terraform)を自動で作成するツールの活用方法と手動で改修すべき範囲についてのメモ 1. Former2の概要 2. (Former2動作環境の起動) 3. Former2 Setup 3.1. Introduction 3.2. Credentials 3.3. Parameter 3.4. Settings 4. Former2によるテンプレートの出力 5. Former2で出力されるテンプレートについて 例とするPF構成 出力したCFn Temlateに含まれない情報/注意点 汎用的なテンプレートにするには 所感 参考 関連記事 その他 1. Former2の概要 Former2 ブラウザで動くWebアプリ サードパーティ製のツール1Former2では、AWSアカウント内の既存のリソースからInfrastructure-as-Codeの出力を生成することができます。AWS JavaScript SDKを使用して関連するコールを行うことで、Former2はインフラストラクチャをスキャンし、出力を生成するリソースのリストを表示します。 CFnテンプレートだけでなく、Terraform等も出力可能 CloudFormation Terraform Troposphere CDK (Cfn Primitives) - TypeScript, Python, Java, C# CDK for Terraform - TypeScript Pulumi - TypeScript Diagram - embedded version of draw.io CloudFormerと比較して高機能で2021年現在主流になっている 価格はOSSのため無料1Former2はローカルでのアクセスや利用は無料ですが、一部のAWSサービスではAPIコールに関連して少額の料金が発生するため、AWSの利用料金に数セント余分に加算される可能性があります。 出力したCFn Templateを汎用的にするには少し手直しが必要であった ex. 固定値のパラメータを入力値を参照するように変更、formerでテンプレートに取り込めない細かいリソースの追記 使用方法は二つ Webアプリとして使用 https://former2.com/ セキュリティの関係でローカルホスティングしたい場合は、自分で動作環境を準備してそこで動かば良い 2. (Former2動作環境の起動) Former2はこちらでブラウザから利用可能だが、セキュリティの制約が厳しいPJの場合は、自分でgitからformer2をpullしてローカル環境で動作させることもできる Former2 ローカル動作環境の構築例 EC2インスタンスを生成/IPを付与 EC2でgitからFormer2をpull EC2のパブリックIPからFormer2を利用 参考 ローカル環境でFormer2を使用 https://qiita.com/miriwo/items/8d5b35950232c1126d36 https://qiita.com/jey0taka/items/237f8d62c6c171975960 3. Former2 Setup Former2にアクセス https://former2.com/ or 用意したローカル環境のIP 3.1. Introduction ブラウザにプラグインを導入 Install Former2 Helper for Google Chrome Continue to Credentialsを押下 3.2. Credentials 事前にReadOnlyAccessを付与したIAM UserとAccess Key/Secret Access Keyの用意が必要 IAM UserのCredentialを入力 Access Key ID Secret Access Key Credentialを正しく認識できたら、以下が表示される 1Logged in as: &lt;IAM User Name&gt;@&lt;AWS Account&gt; 公式説明 12リクエストを認証するには、IAM キーのペアが必要です。リソースを直接インポートすることを計画していない場合は、これらの資格情報で読み取りアクセスのみを提供し、ReadOnlyAccessポリシーを割り当てることをお勧めします。インポート機能を使用する予定がある場合は、スタックを作成するために適切な権限を付与する必要があります。 Continue to Parametersを押下 3.3. Parameter 独自のCloudFormation Parameterを設定する事ができる 特になければスルー 1オプションとして、以下にCloudFormationスタックのパラメータを追加することで、独自のCloudFormationスタックパラメータを含めることができます。デフォルト値が設定されている場合、値が一致していれば、出力でこれらのパラメータを参照するために !Ref または !Sub を使用することができます。 Continue to Settingsを押下 3.4. Settings CFnテンプレートを出力するだけであればデフォルトでもOK 設定後にGo to Dashboardを押下 CloudFormation Spacing 出力のスペース数を変更 Logical ID Strategy 論理ID名の付け方を設定 Default Output 出力言語の設定 デフォルトではCloudFormation ここで、TerraformやCDK, Draw.ioのDiagram等に変更可能 Irrelevant Resources 1有効にすると、この設定は無関係とみなされるリソースをスキップします（現在はCloudWatchログストリームのみ） Enable Related Resources 関連リソースを有効化 Add All Resources 1以下のボタンを使用して、スキャンしたすべてのリソースを出力に追加します（非推奨） Save / Load Settings 1すべての設定されたパラメータと設定（資格情報を除く）を含むファイルを保存またはロードします。 Programming Language 1CDKやPulumiの出力プログラミング言語の好みを変更してください。 Default Resources 1この設定を有効にすると、デフォルトのVPCやそのサブネットなどのデフォルトのリソースが含まれます。 以上でセットアップは完了 4. Former2によるテンプレートの出力テンプレートに含めたいリソースを選択していく Former2のDashboardからサービスを選択 表示されたオブジェクトから、テンプレート化したいリソースを選択 +Add Selected 関連するリソースがタブでまとまっており、直感的に操作できる Generate Template オブジェクトの追加完了後に、Generate CFnテンプレートが出力される オブジェクト追加時に確認出来なかった項目も反映されていた ex. tag 5. Former2で出力されるテンプレートについて Former2では、一部CFnテンプレートに含まれない情報を見受けられた また、各Propertyが固定された状態で出力されてしまうため、汎用的なテンプレートにするには入力値(Properties)の設定が必要になる 例とするPF構成 以下のPF構成をformer2でテンプレート化したケースを考える S3 Bucket アプリをホスティング CloudFront Distribution S3 Bucketをソースとしてアプリを配信 AWS WAF CloudFrontにアタッチ アクセスを制限 出力したCFn Temlateに含まれない情報/注意点 s3 bucket LifecycleConfiguration Rules Id指定のみで、ルール自体はCFn Templateに取り込めていなかった 別アカウントでテンプレートを実行する場合は同名のルールが無いためエラーになってしまうと思われる ライフサイクル未指定であれば無関係 WAFに関する注意点 CloudFront用に設定したWAFのリソースはGlobal(CloudFront)として扱われる former2では画面右上のボタンでリージョンを選択するが、Globalが無い 調査したところ、リージョンをUS East(N. Virginia)に設定することで確認可能であった US East(N. Virginia)で生成される仕様になっていため、former2の画面右上のボタンでリージョンを変更するだけで良い 汎用的なテンプレートにするには Parametersで各固定値を自由に設定可能な入力値に変更する CFn Template実行時の入力値としてユーザが設定可能なパラメータを規定できる テンプレートが汎用的に利用可能になり、別Projectやアカウントでも使い回し可能になる 各パラメータには以下を定めることで利便性を高めることができる Description 説明を定義 初期値とバリデーションも定義できる 参考となるような名称を予め定めておくことで、Templateの利便性が高まる 記載例12345678910Parameters: ＃ 入力値を定義 BucketName: # CFn実行時に入力欄に表示されるユーザ向けの説明 Description: Please write bucket name # デフォルト値 Default: sample-bucket # # 入力値のタイプ Type: String XXXXName: ... 各リソースのPropertiesの各項目から入力値(Parameters)を参照する !RefでParametesで定めた入力値を参照できる 入力値の規定/参照例1234567891011121314Parameters: ＃ 入力値を定義 BucketName: # CFn実行時に入力欄に表示されるユーザ向けの説明 Description: Please write bucket name # デフォルト値 Default: sample-bucket # # 入力値のタイプ Type: String...Resources: # 生成するResourceを定義 S3Bucket: Type: &quot;AWS::S3::Bucket&quot; Properties: BucketName: !Ref BucketName # 入力値を参照 入力値の参照にはRefを用いる 指定した論理IDのパラメータやリソースを参照する1!Ref &lt;PropertyName&gt; CloudFormationRef Subを使うと変数と文字列を組み合わせられる？ Cloudformation Fn::Subを使って文字列内に変数をいれる !Subを活用すると、入力値と固定値を組み合わせることができる 名称の一貫性や、入力の手間の省力化を見込める 書式123!Sub &quot;${PJName}-Bucket&quot;!Sub &quot;${PJName}-Policy&quot;... 所感 Former2で出力したテンプレートの活用方法 そのまま固定値で使用しても構わないが、他のPJでも使いまわせる汎用的なテンプレートにするには、paramaterで変数化する必要がある。CFnの記法については最低限知識が必要 CFnに精通したメンバがいない場合は、以下の流れでIaC化を図ると良さそう 0から無理にCFnテンプレを作らず、コンソールやCLIで検証しながらPFを構築 初級者が0からCFnテンプレを書くと細かい内容でハマってしまう(実体験) ある程度定まってからFormer2で固定値のテンプレートを出力 固定値を変数化 以降はCFnテンプレートとGitでPFを管理していく テンプレートの分割について 大規模なPFの場合はテンプレートを分割して、他のテンプレートと入れ子構造にした方が良い Former2でホスティング環境/IAM関連/運用監視関係と分割してテンプレートを出力することで、管理が円滑になる 分割テンプレートを連携させるには、パラメータの受け渡しなどの手間が増えるため、CFnの知識がある程度必要 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック その他 AWS EC2 AmazonLinux2 Gitをインストールする Docker, Docker Composeのインストール [Former2][Terraform] AWS既存環境を楽にコード化したい 開発者ガイド/CloudFormer (ベータ) を使用して既存の AWS リソースから AWS CloudFormation テンプレートを作成する","link":"/AWS-IaC-Former2%E3%81%AB%E3%82%88%E3%82%8BCloudFormation-Terraform%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E8%87%AA%E5%8B%95%E5%87%BA%E5%8A%9B%E6%96%B9%E6%B3%95/"},{"title":"[CloudFormation] WAFv2(SCOPE: CLOUDFRONT)をIaC化する際に発生するリージョン問題について","text":"AWSでCloudFront Distributionに関連付けるWAFv2リソースをCFnテンプレート化する際の注意点についてのメモ 発生する事象 CFnテンプレートの書式が正しくても、CFnを実行するリージョンによって以下のエラーが発生する123Error reason: The scope is not valid., field: SCOPE_VALUE, parameter: CLOUDFRONT (Service: Wafv2, Status Code: 400, Request ID: ... 原因: WAFv2のSCOPE: CLOUDFLONT WAFv2はSCOPEによって、us-east-1にしか生成できないことがある CloudFormation Distributionに関連づけるWAFはコンソールであれば、Globalとするが、実体はus-east-1に生成される CFnでは”SCOPE”というプロパティで、WAFv2がCloudFront向けか、各リージョンに生成するか定義する 以下のように定義した場合、cloudFront Distributionにアタッチ可能なWAFv2リソースとなるが、1Scope: &quot;CLOUDFRONT&quot; SCOPEについてのルールは公式ドキュメントに以下のように書かれていた 1CLOUDFRONT の場合、米国東部 (バージニア北部) リージョン (us-east-1) で WAFv2 リソースを作成する必要があります。 CloudFormtationは選択中のリージョンで実行される SCOPE: CLOUDFRONTのWAFv2リソースがあれば、us-east-1で実行する必要がある 同じテンプレートで定義した他のリソース群も、us-east-1に生成されてしまう 払い出せるリージョンが実質ロックされるので、汎用性が欠けたテンプレートになってしまう… 回避策以下が考えられる テンプレートの分割 WAFv2リソースのみ別にする CloudFront Distributionとの関連付けが面倒ではある us-east-1専用テンプレートとしてルール付けする 同様の問題を経験した人も多いはずなので、そのうちAWS側で解消されるかもしれない 参考関連記事 Angular x AWS SDK for JavaScriptの始め方 [Angular JavaScript] JSONデータのファイル化と出力 取得したデータを任意の名称で保存するロジック (TypeScript) [Angular JavaScript] JSONファイル(複数)の読み込み 静的ホスティングサービスまとめ(Netlify/S3/Firebase Hosting/Github Pages) [Angular ReactiveForm x mat-input] 一つの入力欄のエラーメッセージを出し分ける [Angular mat-input] バリデーションまとめ [Angular] 複数のcheckboxで一つ以上のチェックを必須とするバリデーション [Angular Material入門] mat-inputで生成したフォームから入力値を取得(双方向データバインディング) [Angular] mat-selection-list &amp; ngForでcheckboxをリスト表示～選択値を配列として取得 [Angular Schematics] 開閉可能なサイドナビ＆ツールバーを3分で自動生成する [Angular] map() &amp; filter() &amp; mat-checkboxを使って選択値を配列に格納するロジック","link":"/CloudFormation-WAFv2-SCOPE-CLOUDFRONT-%E3%82%92IaC%E5%8C%96%E3%81%99%E3%82%8B%E9%9A%9B%E3%81%AB%E7%99%BA%E7%94%9F%E3%81%99%E3%82%8B%E3%83%AA%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E5%95%8F%E9%A1%8C%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6/"}],"tags":[{"name":"AR","slug":"AR","link":"/tags/AR/"},{"name":"WebAR","slug":"WebAR","link":"/tags/WebAR/"},{"name":"AR.js","slug":"AR-js","link":"/tags/AR-js/"},{"name":"AR.js Studio","slug":"AR-js-Studio","link":"/tags/AR-js-Studio/"},{"name":"AWS","slug":"AWS","link":"/tags/AWS/"},{"name":"AWS Budgets","slug":"AWS-Budgets","link":"/tags/AWS-Budgets/"},{"name":"Amazon SNS","slug":"Amazon-SNS","link":"/tags/Amazon-SNS/"},{"name":"IAM","slug":"IAM","link":"/tags/IAM/"},{"name":"MFA","slug":"MFA","link":"/tags/MFA/"},{"name":"MS Authentication","slug":"MS-Authentication","link":"/tags/MS-Authentication/"},{"name":"CloudTrail","slug":"CloudTrail","link":"/tags/CloudTrail/"},{"name":"Logging","slug":"Logging","link":"/tags/Logging/"},{"name":"CloudFront","slug":"CloudFront","link":"/tags/CloudFront/"},{"name":"S3","slug":"S3","link":"/tags/S3/"},{"name":"Angular","slug":"Angular","link":"/tags/Angular/"},{"name":"静的WEB Hosting","slug":"静的WEB-Hosting","link":"/tags/%E9%9D%99%E7%9A%84WEB-Hosting/"},{"name":"CI/CD","slug":"CI-CD","link":"/tags/CI-CD/"},{"name":"AWS SDK for JavaScript","slug":"AWS-SDK-for-JavaScript","link":"/tags/AWS-SDK-for-JavaScript/"},{"name":"Adobe XD","slug":"Adobe-XD","link":"/tags/Adobe-XD/"},{"name":"UI","slug":"UI","link":"/tags/UI/"},{"name":"プロトタイピング","slug":"プロトタイピング","link":"/tags/%E3%83%97%E3%83%AD%E3%83%88%E3%82%BF%E3%82%A4%E3%83%94%E3%83%B3%E3%82%B0/"},{"name":"e2e test","slug":"e2e-test","link":"/tags/e2e-test/"},{"name":"WAF","slug":"WAF","link":"/tags/WAF/"},{"name":"Amazon Honycode","slug":"Amazon-Honycode","link":"/tags/Amazon-Honycode/"},{"name":"NoCode","slug":"NoCode","link":"/tags/NoCode/"},{"name":"LowCode","slug":"LowCode","link":"/tags/LowCode/"},{"name":"JSON","slug":"JSON","link":"/tags/JSON/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"TypeScript","slug":"TypeScript","link":"/tags/TypeScript/"},{"name":"ファイル操作","slug":"ファイル操作","link":"/tags/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E6%93%8D%E4%BD%9C/"},{"name":"Angular Material","slug":"Angular-Material","link":"/tags/Angular-Material/"},{"name":"ReactiveForm","slug":"ReactiveForm","link":"/tags/ReactiveForm/"},{"name":"mat-input","slug":"mat-input","link":"/tags/mat-input/"},{"name":"Observable","slug":"Observable","link":"/tags/Observable/"},{"name":"Promise","slug":"Promise","link":"/tags/Promise/"},{"name":"async/await","slug":"async-await","link":"/tags/async-await/"},{"name":"forkJoin()","slug":"forkJoin","link":"/tags/forkJoin/"},{"name":"then()","slug":"then","link":"/tags/then/"},{"name":"Schematics","slug":"Schematics","link":"/tags/Schematics/"},{"name":"mat input","slug":"mat-input","link":"/tags/mat-input/"},{"name":"map()","slug":"map","link":"/tags/map/"},{"name":"filter()","slug":"filter","link":"/tags/filter/"},{"name":"mat-checkbox","slug":"mat-checkbox","link":"/tags/mat-checkbox/"},{"name":"双方向データバインディング","slug":"双方向データバインディング","link":"/tags/%E5%8F%8C%E6%96%B9%E5%90%91%E3%83%87%E3%83%BC%E3%82%BF%E3%83%90%E3%82%A4%E3%83%B3%E3%83%87%E3%82%A3%E3%83%B3%E3%82%B0/"},{"name":"mat-selection-list","slug":"mat-selection-list","link":"/tags/mat-selection-list/"},{"name":"ngFor","slug":"ngFor","link":"/tags/ngFor/"},{"name":"mat tree","slug":"mat-tree","link":"/tags/mat-tree/"},{"name":"待ち合わせ処理","slug":"待ち合わせ処理","link":"/tags/%E5%BE%85%E3%81%A1%E5%90%88%E3%82%8F%E3%81%9B%E5%87%A6%E7%90%86/"},{"name":"Service","slug":"Service","link":"/tags/Service/"},{"name":"@ViewChild","slug":"ViewChild","link":"/tags/ViewChild/"},{"name":"@Input","slug":"Input","link":"/tags/Input/"},{"name":"@Output","slug":"Output","link":"/tags/Output/"},{"name":"@EventEmitter","slug":"EventEmitter","link":"/tags/EventEmitter/"},{"name":"”global is not defined”","slug":"”global-is-not-defined”","link":"/tags/%E2%80%9Dglobal-is-not-defined%E2%80%9D/"},{"name":"Augury","slug":"Augury","link":"/tags/Augury/"},{"name":"Treetable","slug":"Treetable","link":"/tags/Treetable/"},{"name":"iOS","slug":"iOS","link":"/tags/iOS/"},{"name":"cloud9","slug":"cloud9","link":"/tags/cloud9/"},{"name":"Github Actions","slug":"Github-Actions","link":"/tags/Github-Actions/"},{"name":"Github","slug":"Github","link":"/tags/Github/"},{"name":"aws config","slug":"aws-config","link":"/tags/aws-config/"},{"name":"Firebase","slug":"Firebase","link":"/tags/Firebase/"},{"name":"AngularFire","slug":"AngularFire","link":"/tags/AngularFire/"},{"name":"C","slug":"C","link":"/tags/C/"},{"name":"Amazon CloudWatch","slug":"Amazon-CloudWatch","link":"/tags/Amazon-CloudWatch/"},{"name":"Github.com","slug":"Github-com","link":"/tags/Github-com/"},{"name":"Teams","slug":"Teams","link":"/tags/Teams/"},{"name":"Webhook","slug":"Webhook","link":"/tags/Webhook/"},{"name":"Hosting","slug":"Hosting","link":"/tags/Hosting/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"GithubEnterprise","slug":"GithubEnterprise","link":"/tags/GithubEnterprise/"},{"name":"GithubPages","slug":"GithubPages","link":"/tags/GithubPages/"},{"name":"アジャイル","slug":"アジャイル","link":"/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"},{"name":"Google Cloud Shell","slug":"Google-Cloud-Shell","link":"/tags/Google-Cloud-Shell/"},{"name":"AddThis","slug":"AddThis","link":"/tags/AddThis/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"},{"name":"Sitemap","slug":"Sitemap","link":"/tags/Sitemap/"},{"name":"google search console","slug":"google-search-console","link":"/tags/google-search-console/"},{"name":"WEB Page Dev","slug":"WEB-Page-Dev","link":"/tags/WEB-Page-Dev/"},{"name":"静的WEBサイトHosting","slug":"静的WEBサイトHosting","link":"/tags/%E9%9D%99%E7%9A%84WEB%E3%82%B5%E3%82%A4%E3%83%88Hosting/"},{"name":"Disqus","slug":"Disqus","link":"/tags/Disqus/"},{"name":"AMP","slug":"AMP","link":"/tags/AMP/"},{"name":"hexo-generator-amp","slug":"hexo-generator-amp","link":"/tags/hexo-generator-amp/"},{"name":"LadioCast","slug":"LadioCast","link":"/tags/LadioCast/"},{"name":"Steinberg UR44C","slug":"Steinberg-UR44C","link":"/tags/Steinberg-UR44C/"},{"name":"DTM","slug":"DTM","link":"/tags/DTM/"},{"name":"リモートセッション","slug":"リモートセッション","link":"/tags/%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%BB%E3%83%83%E3%82%B7%E3%83%A7%E3%83%B3/"},{"name":"MacBook Pro 16","slug":"MacBook-Pro-16","link":"/tags/MacBook-Pro-16/"},{"name":"Cubase ai","slug":"Cubase-ai","link":"/tags/Cubase-ai/"},{"name":"popIn Aladdin2","slug":"popIn-Aladdin2","link":"/tags/popIn-Aladdin2/"},{"name":"Elgato HD 60S","slug":"Elgato-HD-60S","link":"/tags/Elgato-HD-60S/"},{"name":"SYNCROOM","slug":"SYNCROOM","link":"/tags/SYNCROOM/"},{"name":"NETDUETTO","slug":"NETDUETTO","link":"/tags/NETDUETTO/"},{"name":"Touch Cast Studio","slug":"Touch-Cast-Studio","link":"/tags/Touch-Cast-Studio/"},{"name":"WEB会議","slug":"WEB会議","link":"/tags/WEB%E4%BC%9A%E8%AD%B0/"},{"name":"Spark AR","slug":"Spark-AR","link":"/tags/Spark-AR/"},{"name":"UI Bakery","slug":"UI-Bakery","link":"/tags/UI-Bakery/"},{"name":"Wireshark","slug":"Wireshark","link":"/tags/Wireshark/"},{"name":"Network","slug":"Network","link":"/tags/Network/"},{"name":"draw.io","slug":"draw-io","link":"/tags/draw-io/"},{"name":"Cloud Craft","slug":"Cloud-Craft","link":"/tags/Cloud-Craft/"},{"name":"Mind Node","slug":"Mind-Node","link":"/tags/Mind-Node/"},{"name":"plantUML","slug":"plantUML","link":"/tags/plantUML/"},{"name":"共同開発","slug":"共同開発","link":"/tags/%E5%85%B1%E5%90%8C%E9%96%8B%E7%99%BA/"},{"name":"テレワーク","slug":"テレワーク","link":"/tags/%E3%83%86%E3%83%AC%E3%83%AF%E3%83%BC%E3%82%AF/"},{"name":"iPad Pro","slug":"iPad-Pro","link":"/tags/iPad-Pro/"},{"name":"RPA","slug":"RPA","link":"/tags/RPA/"},{"name":"iPhone","slug":"iPhone","link":"/tags/iPhone/"},{"name":"ショートカット","slug":"ショートカット","link":"/tags/%E3%82%B7%E3%83%A7%E3%83%BC%E3%83%88%E3%82%AB%E3%83%83%E3%83%88/"},{"name":"Siri","slug":"Siri","link":"/tags/Siri/"},{"name":"display.land","slug":"display-land","link":"/tags/display-land/"},{"name":"Cubasis LE","slug":"Cubasis-LE","link":"/tags/Cubasis-LE/"},{"name":"Alexa","slug":"Alexa","link":"/tags/Alexa/"},{"name":"Cloud9","slug":"Cloud9","link":"/tags/Cloud9/"},{"name":"ブラウザ型IDE","slug":"ブラウザ型IDE","link":"/tags/%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E5%9E%8BIDE/"},{"name":"mmhmm","slug":"mmhmm","link":"/tags/mmhmm/"},{"name":"vscode","slug":"vscode","link":"/tags/vscode/"},{"name":"Route53","slug":"Route53","link":"/tags/Route53/"},{"name":"ACM","slug":"ACM","link":"/tags/ACM/"},{"name":"CDN","slug":"CDN","link":"/tags/CDN/"},{"name":"SSL","slug":"SSL","link":"/tags/SSL/"},{"name":"らくがきAR","slug":"らくがきAR","link":"/tags/%E3%82%89%E3%81%8F%E3%81%8C%E3%81%8DAR/"},{"name":"Windows Power Automate","slug":"Windows-Power-Automate","link":"/tags/Windows-Power-Automate/"},{"name":"Google Chrome","slug":"Google-Chrome","link":"/tags/Google-Chrome/"},{"name":"Netflix Party","slug":"Netflix-Party","link":"/tags/Netflix-Party/"},{"name":"Netlify","slug":"Netlify","link":"/tags/Netlify/"},{"name":"Firebase Hosting","slug":"Firebase-Hosting","link":"/tags/Firebase-Hosting/"},{"name":"アジャイル開発","slug":"アジャイル開発","link":"/tags/%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB%E9%96%8B%E7%99%BA/"},{"name":"aot","slug":"aot","link":"/tags/aot/"},{"name":"CloudFormation","slug":"CloudFormation","link":"/tags/CloudFormation/"},{"name":"Former2","slug":"Former2","link":"/tags/Former2/"},{"name":"WAFv2","slug":"WAFv2","link":"/tags/WAFv2/"}],"categories":[{"name":"AR","slug":"AR","link":"/categories/AR/"},{"name":"Serverless Application Dev","slug":"Serverless-Application-Dev","link":"/categories/Serverless-Application-Dev/"},{"name":"WebAR","slug":"AR/WebAR","link":"/categories/AR/WebAR/"},{"name":"AWS","slug":"Serverless-Application-Dev/AWS","link":"/categories/Serverless-Application-Dev/AWS/"},{"name":"Tool Tips","slug":"Tool-Tips","link":"/categories/Tool-Tips/"},{"name":"SPA (Angular)","slug":"Serverless-Application-Dev/SPA-Angular","link":"/categories/Serverless-Application-Dev/SPA-Angular/"},{"name":"NoCode(LowCode)","slug":"NoCode-LowCode","link":"/categories/NoCode-LowCode/"},{"name":"Adobe XD","slug":"Tool-Tips/Adobe-XD","link":"/categories/Tool-Tips/Adobe-XD/"},{"name":"Angular","slug":"Serverless-Application-Dev/Angular","link":"/categories/Serverless-Application-Dev/Angular/"},{"name":"Amazon Honeycode","slug":"NoCode-LowCode/Amazon-Honeycode","link":"/categories/NoCode-LowCode/Amazon-Honeycode/"},{"name":"App","slug":"AR/App","link":"/categories/AR/App/"},{"name":"CI/CD(Github Actions)","slug":"Tool-Tips/CI-CD-Github-Actions","link":"/categories/Tool-Tips/CI-CD-Github-Actions/"},{"name":"Firebase","slug":"Serverless-Application-Dev/Firebase","link":"/categories/Serverless-Application-Dev/Firebase/"},{"name":"Others","slug":"Others","link":"/categories/Others/"},{"name":"Github","slug":"Tool-Tips/Github","link":"/categories/Tool-Tips/Github/"},{"name":"Google Cloud Shell","slug":"Tool-Tips/Google-Cloud-Shell","link":"/categories/Tool-Tips/Google-Cloud-Shell/"},{"name":"WEB Page Dev","slug":"WEB-Page-Dev","link":"/categories/WEB-Page-Dev/"},{"name":"SmartHome","slug":"SmartHome","link":"/categories/SmartHome/"},{"name":"MacBook Setup","slug":"Tool-Tips/MacBook-Setup","link":"/categories/Tool-Tips/MacBook-Setup/"},{"name":"Touch Cast Studio","slug":"Tool-Tips/Touch-Cast-Studio","link":"/categories/Tool-Tips/Touch-Cast-Studio/"},{"name":"UI Bakery","slug":"NoCode-LowCode/UI-Bakery","link":"/categories/NoCode-LowCode/UI-Bakery/"},{"name":"Wireshark","slug":"Tool-Tips/Wireshark","link":"/categories/Tool-Tips/Wireshark/"},{"name":"Drawing","slug":"Tool-Tips/Drawing","link":"/categories/Tool-Tips/Drawing/"},{"name":"AWS Cloud9","slug":"Tool-Tips/AWS-Cloud9","link":"/categories/Tool-Tips/AWS-Cloud9/"},{"name":"RPA","slug":"Tool-Tips/RPA","link":"/categories/Tool-Tips/RPA/"},{"name":"C","slug":"Others/C","link":"/categories/Others/C/"},{"name":"mmhmm","slug":"Tool-Tips/mmhmm","link":"/categories/Tool-Tips/mmhmm/"},{"name":"vscode","slug":"Tool-Tips/vscode","link":"/categories/Tool-Tips/vscode/"},{"name":"Chrome 拡張機能","slug":"Tool-Tips/Chrome-拡張機能","link":"/categories/Tool-Tips/Chrome-%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD/"},{"name":"Hosting Service","slug":"Serverless-Application-Dev/Hosting-Service","link":"/categories/Serverless-Application-Dev/Hosting-Service/"},{"name":"PM/アジャイル","slug":"Others/PM-アジャイル","link":"/categories/Others/PM-%E3%82%A2%E3%82%B8%E3%83%A3%E3%82%A4%E3%83%AB/"},{"name":"Hexo","slug":"WEB-Page-Dev/Hexo","link":"/categories/WEB-Page-Dev/Hexo/"},{"name":"DTM","slug":"SmartHome/DTM","link":"/categories/SmartHome/DTM/"},{"name":"Gadget","slug":"SmartHome/Gadget","link":"/categories/SmartHome/Gadget/"}]}