{"pages":[],"posts":[{"title":"About This Blog","text":"初めまして。本ページをご覧頂き有難うございます。都内の大手IT企業で、先端技術検証を担当している若手社員です。主にSaaS/Multi Cloud/Serverless/IoT/DevOps関連のPoCに携わっています。学生時代は早慶の理工学部で3Dプリンターの研究をしていました。コンピューターサイエンスの基礎を学ばないまま、モダンな技術を扱うことになったので、日々悪戦苦闘しています。 以下によると、学習定着率を高めるにはOutputする機会が大事なので、この場で個人的なTipsやハマった事の解決策をまとめていきたいと考えております。 IT業界では、ベテランの方々とのスキルギャップで苦しむシーンが多いと思います。私も初期配属された頃、8ヵ月間毎月資格を取り続けたことがありました。技術的に稚拙な表現もあるかもしれませんが、公開した記事が同じように困っている誰かの助けになれば嬉しいです。 IoT案件に関わった影響で始めたSmart Home構築の手法についても載せていく予定です。現在は以下のような構成を作っています。IoTマットで消耗品の発注を自動化するとQOLが向上するのでお勧めです。 個人的に開発したいSaaSもあるので、手伝ってくれる方も募集してます。 Mail: junjunjunya108@gmail.com 良く扱う技術 FW Angular Ionic Flutter Cloud AWS IaC: CloudFormation Cognito Google Cloud Authentication Firestore AutoML AdMob BaaS Firebase (Google) Amplify (AWS) IoT IFTTT Rasberry Pi","link":"/2020/02/04/About-This-Blog/"},{"title":"Angular8:”global is not defined”の回避策","text":"概要 Angular8で以下のエラーにハマった際の解消法を解説します 1”global is not defined” 上記のエラーについて Angularでグローバルオブジェクトを参照する外部ライブラリを利用している環境で発生する事象 今回はAngularとAWS間のAPI連携機能を実装した際に発生 環境の詳細 12345678910111213141516171819202122232425Angular CLI: 8.3.24Node: 10.16.3OS: win32 x64Angular: 8.2.14... animations, common, compiler, compiler-cli, core, forms... language-service, platform-browser, platform-browser-dynamic... routerPackage Version-----------------------------------------------------------@angular-devkit/architect 0.803.24@angular-devkit/build-angular 0.803.24@angular-devkit/build-optimizer 0.803.24@angular-devkit/build-webpack 0.803.24@angular-devkit/core 8.3.24@angular-devkit/schematics 8.3.24@angular/cdk 8.2.3@angular/cli 8.3.24@angular/material 8.2.3@ngtools/webpack 8.3.24@schematics/angular 8.3.24@schematics/update 0.803.24rxjs 6.4.0typescript 3.5.3webpack 4.39.2 解決策 pollyfills.tsに設定が必要 所在 “pj-name”\\srcの配下 以下を追記すると解決します// &quot;global is not defined&quot;の対応 (window as any).global = window; 解説 polyfillとは JavaScriptのversion間の互換性を補うもの 利用したい機能に未対応のブラウザでも使えるように、同等の機能をJavaScriptで供給できる pollyfills.ts Angularにおけるpolyfillの設定ファイル 例えば、Angularで開発したAPをIEでも動かしたい時には設定が必要 Angularは”デフォルトではIEに未対応”です","link":"/2020/03/09/Angular8-global-is-not-defined%E3%81%AE%E8%A7%A3%E6%B6%88%E6%B3%95/"},{"title":"Angular x AWS SDK for JavaScriptの始め方","text":"angularで開発していたアプリケーションにaws-sdkを導入する際の備忘録 AWS SDKを入れることで、アプリケーションからAWSのリソースを操作可能になります ex.) S3やDynamoDBへのデータの格納、Cognitoによる認証、Lambdaの実行… Angularの場合、公式の開発者ガイド通りにやると鬼のようにエラーが出るので共有しておきます。ひと手間必要でした。 1. aws sdk for javascriptのinstall angular PJ直下で実行1npm install aws-sdk --save-dev この時点でAPを確認すると、以下のエラーが大量に出ます APの画面もブラウザに表示されなくなります 123&gt;ng serve --openERROR in node_modules/aws-sdk/clients/acm.d.ts:141:37 - error TS2591: Cannot find name 'Buffer'. Do you need to install type definitions for node? Try `npm i @types/node` and then add `node` to the types field in your tsconfig. 2. @types/nodeをinstallする Angular PJ直下で以下を実行12345npm install --save @types/node+ @types/node@8.9.5updated 1 package and audited 19123 packages in 41.418sfound 0 vulnerabilities 3. tsconfig.json ファイルに以下を追記 Angular PJ直下にあります 123&quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;node&quot;]} 場所は以下 1&gt; code .\\tsconfig.json tsconfig.app.json にも、同じく追記 Angular PJ直下にあります123&quot;compilerOptions&quot;: { &quot;types&quot;: [&quot;node&quot;] } エラーの解消を確認 ng serve時に正しくAPの画面が表示される ここまででAngular APからAWSのリソースとAPI連携する下準備が整いました 以下についても後日UP予定です AWSの各リソースの利用方法、実装方法 Ampliyfy(BaaS)でAWSと連携させる手法","link":"/2020/02/28/Angular-x-AWS-SDK-for-JavaScript%E3%81%AE%E5%A7%8B%E3%82%81%E6%96%B9/"},{"title":"Angularアプリの開発支援ツールAugury(Chrome拡張機能)","text":"今回はAngularでWEBアプリを開発する際に簡単に利用できるツールを紹介します Auguryと は？ できること 導入方法 利用方法 備考 Auguryと は？ Angularの開発支援ツール Google Chromeの拡張機能 Chromeをメインブラウザとして利用しているデベロッパーには必須とも言えるツール できること 標準のデベロッパーツールに以下の機能を追加できます Componentの階層構造やプロパティ値の図示 ルーティング情報のグラフ化 import済みモジュール構成のリスト表示 導入方法 Chrome Webstoreにアクセス “Chromeに追加”をClick ブラウザの右上にAuguryの丸いアイコンが追加されます 利用方法 Angular APの起動 まずは以下のコマンドでAPの画面をChromeに表示しましょう1ng serve --open F12キーで開発者ツールを起動 ブラウザの右側に表示される開発者ツールに追加されているAuguryタブを選択 “Component Tree”タブのInjection Graph コンポーネントとサービスの依存関係をグラフ表示 個人的に一番利用する機能です “Router Tree”タブ ルート構造をツリー表示 “NgModule”タブ import済みのモジュール構成を確認可能 備考 以下も便利そうでした。APの構成管理やドキュメント作成の手間は極力自動化していきましょう。 compodocでAngularプロジェクトのビジュアルなドキュメントを自動生成する","link":"/2020/02/20/Angular%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AE%E9%96%8B%E7%99%BA%E6%94%AF%E6%8F%B4%E3%83%84%E3%83%BC%E3%83%ABAugury-Chrome%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD/"},{"title":"Github.comからGithubEnterpriseへの移行手順","text":"概要 リポジトリ移行(Github⇒GHE)の備忘録です 想定する状況 Organizationごと中身をまるまる移行したいパターン Commitログ等は特に移行する必要無く、シンプルな手法で手早く終わらせたい 事前調査 organization単位の以降はできない リポジトリ単位の移行は可能 GHE内に同じ名称のOrganizationやリポジトリを作成可能 ★一意性のチェックがGithub側とは隔絶されている 手順1. GHEでOrganizationを作成 Githubと同様の名称で問題無し URLは前半が企業ごとのものに変わる SiteAdmin権限が必要 GUIで操作 2. GHEでリポジトリを作成 Github.com側と同様の名称で問題無し 空のリポジトリを一通り作成 GUIで操作 3. Local端末で移行対象のリポジトリのデータを退避 各リポジトリの中身をデスクトップ等へコピー Gitリポジトリの管理場所:Dドライブから削除 この後、GHEから同様の名称のリポジトリをCloneするため Dドライブでlsコマンドを打って削除されたことを確認 4. GHEからLocalへClone 各リポジトリ（空）を端末へClone URLはリポジトリのページの”Clone or download”タブより確認1git clone &lt;リポジトリのURL&gt; 5. Cloneした空リポジトリに退避データをコピー GHEからCloneした空リポジトリへ、退避場所からコピー 6. GHEのRemoteにデータを登録 各リポジトリで以下の作業を実施する 変更内容を保存12git add *git commit &quot;Repository Migration&quot; Remoteへ送信1git push Github Pagesが含まれている場合 _config.ymlに設定する公開URLを変更する必要がある GHEにおけるGithub PagesのURLは以下のようになる1https://pages.&lt;gheのURL&gt;/&lt;Organization名 or ユーザ名&gt;/&lt;リポジトリ名&gt;.io 7. GHEで確認 GHEの問題無くデータが移行できていることを確認 Github pagesが含まれていたため、ブラウザで表示されるようにする リポジトリのSettingsより、以下のようにGithub pagesを有効にしてSave GHEにおけるGithub PagesのURLは以下1https://pages.&lt;gheのURL&gt;/&lt;Organization名 or ユーザ名&gt;/&lt;リポジトリ名&gt;.io 8. Github.comより移行元を削除 リポジトリを削除 Organizationを削除 管理者権限が必要","link":"/2020/02/09/Github%E3%81%8B%E3%82%89GithubEnterprise%E3%81%B8%E3%81%AE%E7%A7%BB%E8%A1%8C%E6%89%8B%E9%A0%86/"},{"title":"cloud9による共同編集・リモート開発","text":"こんにちは。最近ウィルス対策の影響でテレワークの利用が広がっているようです。IT界隈の方達は慣れているとは思いますが、「トラシューやコードレビュー、ペアプロ等は対面でないと困る」という声をちらほら聞きます。新入社員が先輩に横で教えてもらうためにわざわざ出社するケースもあるようです。そこで、今回は開発の遠隔・同時編集を可能にするTipsを紹介します。利用するのはAWSのブラウザ型IDEであるcloud9のワークスペース共有機能です。 前提知識 cloud9のワークスペース共有機能 画像の様に複数メンバでエディタ＆CLIを同時に遠隔操作できます 右側のタブに参加メンバが表示されます 初期設定だけ完了すれば、ブラウザでURLを共有してログインしてもらうだけです テレワーク時に「ちょっとここが分からないので、アドバイスを頂けますか？」と開発環境に入ってもらうと助けてもらいやすいです 直接コードやコマンドを書き込んでもらうこともできます Slack等のチャットだけでコードの話をするのは実際辛いです 開発チームを監督する側も状況を理解しやすく、皆が幸せになれます 対抗：VSCode LiveShare Microsoftのエディターでもプラグインによって似たようなことができます 個人的な使用感としては以下の差異があります 自分のLocal環境を共有 APを起動すると恐ろしく重くなり、落ちてしまうことも… 各メンバ全員がプラグインを設定する必要があり、手間取る ホスト側が参加メンバ毎に権限付与する工程が毎回ある VSCode豊富なプラグインが必要なケースもあるので、私は場合によって使い分けています。個人の好みにもよると思います。 前提条件 AWSアカウントを作成済み or 作成可能 cloud9 開発環境を作成済み 公式ドキュメントを参考にしてください AWS Cloud9 で 環境 を作成する 読者は以下を想定 開発環境のオーナー IAMユーザの作成権限を持つ cloud9環境共有手順 以下の二点が必要です AWSのIAM Userの作成 Cloud9への参加メンバの登録 右上の”Share”を押下 共有機能の設定画面が出ます Cloud9への参加メンバの登録 共有機能の設定画面の”Invite Members”にIAM User名を入力 タブで権限を設定 R: Readのみ RW: Read &amp; Write まだ未作成の場合は”create a new user”よりAWS Consoleに飛びましょう IAMユーザの追加 ★cloud9で共同編集したいだけのメンバ向けの権限についてです。最小権限の原則に従いましょう アクセス許可の設定の”既存のポリシーを直接アタッチ”を選択 検索欄に”cloud9”と打つ AWSCloud9EnvironmentMemberを選択・付与 まとめ 以上で複数メンバでの共同編集ができます。テレワークにおける情報伝達のもどかしさを解消して気持ちよく開発しましょう。ハンズオン研修・学習用途にも便利だと思います。 関連記事 cloud9 x Angular x FirebaseでWEB AP開発 画像ファイルD:\\Users\\0000011349117\\Desktop\\memo_article\\cloud9member 補足：Angular開発環境の構築手順(cloud9) 以下を実行するだけでOKです12npm install @angular/.....ng add @angular/material 自動で入るとは思いますが、もし利用中にCDKがないというエラーが出たら以下も実行してください1$ ng add @angular/CDK","link":"/2020/03/07/cloud9%E3%81%AB%E3%82%88%E3%82%8B%E5%85%B1%E5%90%8C%E7%B7%A8%E9%9B%86%E3%83%BB%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E9%96%8B%E7%99%BA/"},{"title":"Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録","text":"概要 想定読者 基礎知識 手順 1. Pluginの導入 2. _config.ymlにPluginの設定を追加 3. sitemap.xmlの生成 4. 本番環境へデプロイ 5. Google Search Consoleへ登録 概要こんにちは。今回はHexoでサイトマップを自動生成してGoogleに登録するまでの手法を紹介します。本サイトもHexoを用いて自動生成しています。 想定読者 静的サイトジェネレータhexoでWEBページを作成済み Google検索でヒットしない状態 サイトマップ未登録 基礎知識 サイトマップとは サイトにどのようなページがあるのか表す為のもの 以下の二種類があります HTMLサイトマップ XMLサイトマップ 検索エンジンが情報収集する対象となるため、SEO対策において重要 hexoではプラグインを利用することでサイトマップを自動生成できます Google Search Console Serch Consoleの概要 （公式サイトより引用）1Google Search Console は、Google 検索結果でのサイトの掲載順位を監視、管理、改善するのに役立つ Google の無料サービスです。Search Console に登録しなくても Google 検索結果にサイトが表示されるようにすることはできますが、Search Console に登録することで、Google のサイトに対する認識を理解し、改善できるようになります。 生成したサイトマップをこちらに登録することで、Google検索結果に自分のWEBページが出るようになります WEBページを公開したばかりの場合、登録しなければ検索結果に出ないと思われます 手順 Pluginの導入 _config.ymlにPluginの設定を追加 sitemap.xmlの生成 本番環境へデプロイ Google Search Consoleへ登録 1. Pluginの導入 HEXOでサイトマップを生成できるプライグインは二種類あります hexo-generator-sitemap hexo-generator-seo-friendly-sitemap 今回はこちらを採用 インストール HEXOディレクトリ直下で以下を実行1npm install hexo-generator-seo-friendly-sitemap --save 2. _config.ymlにPluginの設定を追加 HEXOの設定ファイルに先ほどのPluginを登録します ファイルはhexoディレクトリ直下にあります _config.ymlに追記する内容 12345## Plugins: https://hexo.io/plugins/sitemap: path: sitemap.xml tag: false category: false 3. sitemap.xmlの生成 いつも通りにhexoコマンドでジェネレートする際に、sitemapが生成されます 1hexo g sitemap.xmlの生成を確認 index.htmlと 通常はpublic配下 開いてみると、以下のように書かれています 1234567891011&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;sitemap.xsl&quot;?&gt;&lt;sitemapindex xmlns=&quot;http://www.sitemaps.org/schemas/sitemap/0.9&quot;&gt; &lt;sitemap&gt; &lt;loc&gt;https://j-xaas.github.io/post-sitemap.xml&lt;/loc&gt; &lt;lastmod&gt;2020-03-10T13:04:39.446Z&lt;/lastmod&gt; &lt;/sitemap&gt;&lt;/sitemapindex&gt;&lt;!-- XML Sitemap generated by Hexo SEO Friendly Sitemap Generator --&gt; 4. 本番環境へデプロイ WEBページをホスティングしている、サーバ等へsitemap.xmlファイルをおきましょう github pagesを用いている場合は、Gitへpushします 5. Google Search Consoleへ登録 公式サイトへアクセス 未登録であれば、自分のWEBサイトのURLを登録しましょう サイドメニュー内、インデックスのサイトマップを選択 新しいサイトマップの追加 入力欄に”sitemap.xml”を入力 送信 しばらく待って更新すると、以下のようにステータスが”成功しました”と表示されます 以上でサイトマップの登録は完了です hexo g の度に更新されるので、事後作業は特にありません","link":"/2020/03/10/Hexo%E3%81%A7%E3%82%B5%E3%82%A4%E3%83%88%E3%83%9E%E3%83%83%E3%83%97%E3%82%92%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90-Google-Search-Console%E3%81%B8%E7%99%BB%E9%8C%B2/"},{"title":"Cloud9 x Angular x FirebaseでAP開発（導入編）","text":"こんにちは。今回は上記の３つを組み合わせてWEB AP開発を行う際の手順を解説していこうと思います。それぞれの使用経験があっても組み合わせると細かい所で沢山ハマってしまうので注意しましょう。（新設の開発チームの大半がこの段階で躓く印象です） 各技術についての基礎知識簡単にポイントだけを解説します。分かっている方は飛ばしてください手順を細かく書いているので分からない言葉があっても、一先ず触りなから理解していきましょう cloud9 AWSのブラウザ型IDE 自端末のOSに依存せず開発可能 iPadでも開発可能（よく使ってます） 社内プロキシ問題に悩まされない 個人的には最重要ポイント 環境構築を省略可能 node_module, Git, AWS CLI等の便利なものが元から入っている 複数ユーザーで同時編集可能 リモートワークやレビューに便利です 対抗のGoogle Cloud Shellとの差分 後に同様の機能が付きそうではあります Angular Googleが出しているWEB APのフレームワーク 言語はHTML, TypeScript, scss SPA (Single Page Application)を開発可能 APの画面はAngular Materialでほぼ自動構築可能 静的WEBサイトホスティングサービスを用いれば、サーバレスを実現可能 代表例としてFirebase HostingやAmazon S3等が挙げられます Firebase GoogleのBaaS(Backend as a Service) 認証機能やデータベースなどのバックエンドの機能を提供してくれるサービス 開発工数を大幅削減可能 本質的な機能の開発に集中可能 APのHostingや顧客分析、収益管理まで可能 この３つを抑えれば開発環境の用意からAPの公開まで高速でできます。 前提条件 cloud9環境を作成済み 指示に従って設定していくだけなので参考サイトを載せておきます 初めてのAWS Cloud9導入 Googleアカウントを作成済み Googelアカウントの作成 手順1. Angular開発環境の準備 Angularが動くために必要なもの node_module Angular CLI cloud9には初めからnode_moduleが入っている為、Angular CLIを入れるだけでOKです。（Windowsにnode_moduleを入れようとすると、それだけでだいぶ工数をロスします） 1.1. Angular CLIのinstall 1npm install -g @angular cli 確認 以下のようにngコマンドを使えるようになればOKです ngはangularの略です1234567891011121314ng --version _ _ ____ _ ___ / \\ _ __ __ _ _ _| | __ _ _ __ / ___| | |_ _| / △ \\ | '_ \\ / _` | | | | |/ _` | '__| | | | | | | / ___ \\| | | | (_| | |_| | | (_| | | | |___| |___ | | /_/ \\_\\_| |_|\\__, |\\__,_|_|\\__,_|_| \\____|_____|___| |___/ Angular CLI: 8.3.20Node: 10.16.2OS: linux x64Angular: 8.2.14 ０から開発する場合 以下のコマンドでAngular PJを開始しましょう1ng new &lt;AP名&gt; Gitから開発途中のソースを持ってきた場合 APのディレクトリ直下にもnode_moduleを入れなければ動かないので注意です1npm install 2. firebaseの登録～project作成 初めは基本的にWEBのFirebaseコンソールで操作していきます Googleアカウントを作成していればすぐに始められます 2.1. 公式ページから右上の”コンソールへ移動”を押下 2.2. projectを作成します（APの単位です） AP名を設定 2.3. アプリを登録 ios/android/webからwebを選択 ニックネームを設定 2.4. Firebase SDKの追加 公式の説明は以下1これらのスクリプトをコピーして &lt;body&gt; タグの下部に貼り付けます。この作業は Firebase サービスを使用する前に行ってください。 Angularの場合はindex.htmlのbody配下に置きます SPAなので、単一ページであるindex.htmlがJSで書き換わっていくのがAngularの特徴です1234567891011121314 &lt;body&gt; &lt;app-root&gt;&lt;/app-root&gt;&lt;!----firebaseSDKの追加--&gt; &lt;!-- The core Firebase JS SDK is always required and must be listed first --&gt; &lt;script src=&quot;/__/firebase/7.8.2/firebase-app.js&quot;&gt;&lt;/script&gt; &lt;!-- TODO: Add SDKs for Firebase products that you want to use https://firebase.google.com/docs/web/setup#available-libraries --&gt; &lt;script src=&quot;/__/firebase/7.8.2/firebase-analytics.js&quot;&gt;&lt;/script&gt; &lt;!-- Initialize Firebase --&gt; &lt;script src=&quot;/__/firebase/init.js&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 3. firebaseとAPの関連付け(Angular Fireの導入) Angular APとfirebaseを関連付けるまでに必要な作業の一覧は以下になります angularfireのinstall Firebase CLIのinstal (firebase側でアプリを追加 2で先に行った内容です) Firebase SDKの追加 FirebaseのAPIキーを取得 Angular環境設定ファイルにAPIキーを貼り付け ★二点に設定が必要。よくはまるポイントです 開発環境 src/environments/environment.ts 本番環境 src/environments/environment.prod.ts firebase login/init 環境設定ファイルをapp.module.tsに読み込む @angular/fireからAngularFireModuleを呼び出して、上記のenvironmentオブジェクトを使ってAPIキーをインストール （特定の機能を利用する場合の作業：認証機能を利用する際の例） @angular/fire/authからAngularFireModuleを呼び出して、NgModuleに登録 Firebase Authenticationを利用するために必要な工程 @angular/fireは全機能をinstallすると重くなる為、上記の様に必要なものだけを登録する仕様になっているらしい それぞれ詳しく解説していきます 3.1. angular fireのinstall angularfireを入れます AngularとFirebase連携用のLibraryです1npm install firebase @angular/fire 出力結果1234+ @angular/fire@5.4.2+ firebase@7.9.3added 140 packages from 98 contributors and audited 19218 packages in 17.919sfound 5 vulnerabilities (3 moderate, 2 high) ここまでではまだ、Firebaseコマンドが使えない状態です 3.2. の導入 以下を実行することでinstallできます firebase コマンドが有効になります1npm install -g firebase-tools 3.3. Angular環境設定ファイルにAPIキーを貼り付け 開発環境向けと本番環境向けの２つの設定ファイルの改修が必要。よくはまるポイントです 各値はfirebase consoleより確認 src/environments/environment.ts 開発環境用の設定ファイル12345678910111213export const environment = { production: false // Firebaseの設定情報を登録 firebase: { apiKey: '&lt;your-key&gt;', authDomain: '&lt;your-project-authdomain&gt;', databaseURL: '&lt;your-database-URL&gt;', projectId: '&lt;your-project-id&gt;', storageBucket: '&lt;your-storage-bucket&gt;', messagingSenderId: '&lt;your-messaging-sender-id&gt;' } };}; src/environments/environment.prod.ts 本番環境用の設定ファイル12345678910111213export const environment = { production: false // Firebaseの設定情報を登録 firebase: { apiKey: '&lt;your-key&gt;', authDomain: '&lt;your-project-authdomain&gt;', databaseURL: '&lt;your-database-URL&gt;', projectId: '&lt;your-project-id&gt;', storageBucket: '&lt;your-storage-bucket&gt;', messagingSenderId: '&lt;your-messaging-sender-id&gt;' } };}; 3.4. CLIとFirebaseの関連付け 次にCloud9のCLIとfirebaseを関連付けます c9の場合–nolocalhostが必須 ★社内Local環境でloginをやろうとするとFirebaseの認証がProxyに阻まれて突破できず詰むので気を付けましょう 調べた解決策を全て講じてもこれだけは解決できませんでした… 123456789firebase login --no-localhost --reauthi Firebase optionally collects CLI usage and error reporting information to help improve our products. Data is collected in accordance with Google's privacy policy (https://policies.google.com/privacy) and is not used to identify you.? Allow Firebase to collect CLI usage and error reporting information? Yesi To change your data collection preference at any time, run `firebase logout` and log in again.Visit this URL on any device to log in:&lt;認証用のURL&gt; 上記のURLから、ブラウザで認Googleアカウント証を進めるとコードが表示される 貼り付けてSuccessとでれば成功です123? Paste authorization code here: &lt;Code&gt;✔ Success! Logged in as &lt;googleアカウント名&gt; Cloud9のCLIからFirebase(=Google Cloud)上のリソースにアクセス可能になりました 3.5. APとfirebaseのpjの関連付け Angular PJ直下で実行1firebase init 以下のように出力されれば成功です 使いたいサービスを選択すると簡単にCloud側と連携できます12345678910111213141516171819 ######## #### ######## ######## ######## ### ###### ######## ## ## ## ## ## ## ## ## ## ## ## ###### ## ######## ###### ######## ######### ###### ###### ## ## ## ## ## ## ## ## ## ## ## ## #### ## ## ######## ######## ## ## ###### ########You're about to initialize a Firebase project in this directory: /home/ec2-user/environment/test-app? Which Firebase CLI features do you want to set up for this folder? Press Space to select features, then Enter to confirm your choices. (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)❯◯ Database: Deploy Firebase Realtime Database Rules ◯ Firestore: Deploy rules and create indexes for Firestore ◯ Functions: Configure and deploy Cloud Functions ◯ Hosting: Configure and deploy Firebase Hosting sites ◯ Storage: Deploy Cloud Storage security rules ◯ Emulators: Set up local emulators for Firebase features おまけ：cloud9でng serveを実行してAPの画面を確認する際の注意 cloud9で必要なこと portの指定(8080) browserのURLの指定 disableHostCheck 大抵の人が必ず一度はハマるポイントです 上部タブから”Preview”を選択後”Preview Runnig Application”を選択するとCloud9上に表示できます Previewの中のURL欄をコピーして控えてください 1ng serve --public-host &lt;cloud9のPreviewのURL&gt; --disableHostCheck --port 8080 後書き如何だったでしょうか？ここまでで本格的な実装に入る準備が整いました。Firebaseを使いこなせば、認証機能もデータのCRUD機能も１日で簡単に実装することができます。モダンな手法を使いこなして素早くAPを開発していきましょう。 最後に、この先の機能実装の際に参考になりそうなページを共有しておきます。 AngularFireでFirestoreのCRUD処理を実装する【Angular + Firebase】 Angular8でFirebaseを使ってGoogleアカウント認証機能を実装する","link":"/2020/03/05/Cloud9-x-Angular-x-Firebase%E3%81%A7AP%E9%96%8B%E7%99%BA%EF%BC%88%E5%B0%8E%E5%85%A5%E7%B7%A8%EF%BC%89/"},{"title":"Hexoテーマ(theme)変更: icarus","text":"概要 変更手順 1. テーマの選定 今回採用したテーマ 2. Githubからダウンロード 3. 設定(_config.yml)を変更 Trouble Shooting icarus設定Tips ウィジェットを変更 プロフィールを変更 背景の変更 目次を自動作成するプラグインの導入 概要 Hexoにはテーマのテンプレートが数百種類用意されており、簡単に変更することができます デフォルトはlandscape シンプルでいいのですが、デザインとして物足りなく、プロフィール欄も欲しいので変更します &lt;div style=&quot;text-align:center;&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/41946222/76521887-038c5300-64a9-11ea-8dfd-8454b8ce0dd2.png&quot; height=&quot;100%&quot; width=&quot;100%&quot;&gt; &lt;/div&gt;変更手順 テーマの選定 Githubからダウンロード 設定(_config.yml)を変更 1. テーマの選定 まずは採用したいテーマを決めましょう Hexoのテーマ一覧は以下より確認できます Themes | Hexo 295種(2020/03/12時点)あります Star数のランキングはこちらです 自身のWEBページの方向性に合わせて選定しましょう 個人的にイケてると感じたテーマを紹介します シンプル icarus プロフィール欄がデフォルトである 各記事がサムネで表示される 手間は少し増えてしまいそう サイドのメニューと記事一覧を、画面サイズに応じて１～３列で表示 NexT プロフィール欄がデフォルトである モノトーン １～２列で表示 Material indigo Tranquilpeak 最近見つけたので追加。そのうちこちらに変更するかも ダイナミック React 会社サイト向け デザインが作りこまれています 別の機会に利用してみようと考えています Ochuunn サイトを開いた時の動作がおしゃれです デザイナー向け MiccallTheme Zhaoo TKL 一枚目から始まるタイプですが記事欄は質素です 今回採用したテーマ icarus GitのStar数ランク5位で人気のテーマです 後はいつも通りgenerateして本番環境へデプロイしましょう1hexo generate Trouble Shooting 本番環境で表示が崩れている場合 前のテーマからgenerateされていたファイルが邪魔をしています（私もハマりました） generateで生成されるファイル群を削除すれば、修正できます cheerioがないというエラーが出た場合 12ERROR Package cheerio is not installed.ERROR Please install the missing dependencies from the root directory of your Hexo site. 以下を実行 Hexoディレクトリ直下で1npm install cheerio --save hexo sを実行できます icarus設定Tips ハマる場面もあったので各種設定についても解説しておきます ウィジェットを変更 icarus/layout/widget内のファイルを改修することで、左右の表示を変更できます プロフィールを変更 icarusのwikiを参考に改修します 上記には書いてありませんでしたが、改修する設定ファイルは以下になります themes\\icarus_cofig.yml 中を確認すると以下のようにprofileの初期設定がされていることが分かります 123456789101112131415161718192021# https://ppoffice.github.io/hexo-theme-icarus/categories/Widgets/widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: Your name # Title of the author to be shown in the profile widget author_title: Your title # Author's current location to be shown in the profile widget location: Your location # Path or URL to the avatar to be shown in the profile widget avatar: # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: false # Path or URL for the follow button follow_link: 'https://github.com/ppoffice' 変更 profile画像は以下に格納しましょう \\themes\\icarus\\source\\images おしゅし のフリー素材として公開されている画像を用意しました 改修例 123456789101112131415161718widgets: - # Widget name type: profile # Where should the widget be placed, left or right position: left # Author name to be shown in the profile widget author: J # Title of the author to be shown in the profile widget author_title: IT Specialist # Author's current location to be shown in the profile widget location: Tokyo Japan # Path or URL to the avatar to be shown in the profile widget avatar: images/oshushi.png # Email address for the Gravatar to be shown in the profile widget gravatar: # Whether to show avatar image rounded or square avatar_rounded: true Profileの変更結果 &lt;div style=&quot;text-align:center;&quot;&gt; &lt;img src=&quot;https://user-images.githubusercontent.com/41946222/76530468-1d349700-64b7-11ea-8cae-6ed0407cc359.png&quot; height=&quot;50%&quot; width=50%&quot;&gt; &lt;/div&gt;背景の変更 以下からできますhttps://github.com/highlightjs/highlight.js/tree/master/src/styles 1234567# Article display settingsarticle: # Code highlight settings highlight: # Code highlight themes # https://github.com/highlightjs/highlight.js/tree/master/src/styles theme: atom-one-light 目次を自動作成するプラグインの導入 hexo-tocをインストール1$ npm install hexo-toc --save 目次を入れたい箇所に下記を追記すればOK。 1&lt;!-- toc --&gt; オプションとしてthemes/icarus/config.ymlに下記を追加します。 123456789toc: maxdepth: 3 class: toc slugify: transliteration decodeEntities: false anchor: position: after symbol: '#' style: header-anchor 実際に記事に入れて見ましょう 123456789101112---title: Hexoでサイトマップを自動生成 ~ Google Search Consoleへ登録thumbnails: /gallery/sitemap_thumnail.pngdate: 2020-03-10 23:23:23toc: truetags:- Hexo- Sitemap- google search console---&lt;!-- toc --&gt;## 概要 画面を確認すると以下のように反映されていました。","link":"/2020/03/13/Hexo%E3%83%86%E3%83%BC%E3%83%9E-theme-%E5%A4%89%E6%9B%B4-icarus/"}],"tags":[{"name":"Purpose","slug":"Purpose","link":"/tags/Purpose/"},{"name":"Angular","slug":"Angular","link":"/tags/Angular/"},{"name":"”global is not defined”","slug":"”global-is-not-defined”","link":"/tags/%E2%80%9Dglobal-is-not-defined%E2%80%9D/"},{"name":"AWS SDK for JavaScript","slug":"AWS-SDK-for-JavaScript","link":"/tags/AWS-SDK-for-JavaScript/"},{"name":"Github.com","slug":"Github-com","link":"/tags/Github-com/"},{"name":"GithubEnterprise","slug":"GithubEnterprise","link":"/tags/GithubEnterprise/"},{"name":"GithubPages","slug":"GithubPages","link":"/tags/GithubPages/"},{"name":"cloud9","slug":"cloud9","link":"/tags/cloud9/"},{"name":"共同開発","slug":"共同開発","link":"/tags/%E5%85%B1%E5%90%8C%E9%96%8B%E7%99%BA/"},{"name":"テレワーク","slug":"テレワーク","link":"/tags/%E3%83%86%E3%83%AC%E3%83%AF%E3%83%BC%E3%82%AF/"},{"name":"Hexo","slug":"Hexo","link":"/tags/Hexo/"},{"name":"Sitemap","slug":"Sitemap","link":"/tags/Sitemap/"},{"name":"google search console","slug":"google-search-console","link":"/tags/google-search-console/"},{"name":"Firebase","slug":"Firebase","link":"/tags/Firebase/"},{"name":"AngularFire","slug":"AngularFire","link":"/tags/AngularFire/"},{"name":"Augury","slug":"Augury","link":"/tags/Augury/"},{"name":"icarus","slug":"icarus","link":"/tags/icarus/"}],"categories":[{"name":"Tool Tips","slug":"Tool-Tips","link":"/categories/Tool-Tips/"},{"name":"WEB Page Dev (Hexo)","slug":"WEB-Page-Dev-Hexo","link":"/categories/WEB-Page-Dev-Hexo/"},{"name":"AWS","slug":"Tool-Tips/AWS","link":"/categories/Tool-Tips/AWS/"},{"name":"Serverless Application Dev","slug":"Serverless-Application-Dev","link":"/categories/Serverless-Application-Dev/"},{"name":"Firebase","slug":"Serverless-Application-Dev/Firebase","link":"/categories/Serverless-Application-Dev/Firebase/"},{"name":"AWS","slug":"Serverless-Application-Dev/AWS","link":"/categories/Serverless-Application-Dev/AWS/"},{"name":"Single Page Application","slug":"Serverless-Application-Dev/Single-Page-Application","link":"/categories/Serverless-Application-Dev/Single-Page-Application/"},{"name":"Github","slug":"Tool-Tips/Github","link":"/categories/Tool-Tips/Github/"}]}